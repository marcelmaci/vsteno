#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
VSTENO Dokumentation
\end_layout

\begin_layout SubTitle
19.03.2020
\end_layout

\begin_layout Author
Marcel Maci
\end_layout

\begin_layout Abstract
VSTENO - kurz Vector Shorthand Tool with Enhanced Notational Options oder
 zu Deutsch Vektor-Kurzschrift-Werkzeug mit erweiterten Darstellungsoptionen
 - ist ein PHP-Programm zur automatisierten Generierung von Kurzschrifttexten
 (Stenogrammen) unter Verwendung des SVG-Grafikformates.
 Die generierten Texte können als HTML-Seite in einem Browser angezeigt
 und von dort als PDF exportiert und zum Beispiel auf einem E-Reader gelesen
 werden.
 
\end_layout

\begin_layout Abstract
Den Kern des Programmes bildet die so genannte Steno Engine, ein abstraktes
 (verallgemeinertes) Stenografiezeichen-Satzsystem, das grundsätzlich an
 kein spezifisches Kurz\SpecialChar \-
schrift-System gebunden ist.
 Es können also eigene Zeichen und REGEX-Regeln zur Übertragung von Langschrift
 zu Kurzschrift programmiert werden.
 In der Version 0.3 kommt VSTENO mit Definitionen für das deutsche, spanische,
 französische und englische System Stolze-Schrey (Verkehrsschrift).
 
\end_layout

\begin_layout Abstract
VSTENO ist Freie Software - das Programm kann unter der GPL (General Public
 License) frei kopiert und genutzt werden.
 Die aktuelle und hier dokumentierte Version ist 0.3 (genannt 
\begin_inset Quotes eld
\end_inset

Hyperion
\begin_inset Quotes erd
\end_inset

) und richtet sich sowohl an Anwender/innen, Linguist/innen und Programmierer/in
nen.
\end_layout

\begin_layout Part*
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part*
Einleitung
\end_layout

\begin_layout Standard
Im letzten Vorwort hatte ich geschrieben, VSTENO wuchere und wuchere ...
 Wählen wir doch dieses Mal das Wort 
\begin_inset Quotes eld
\end_inset

gedeihen
\begin_inset Quotes erd
\end_inset

 - womit gemeint sei: Das Programm generiert nun wirklich recht hübsche
\begin_inset Foot
status open

\begin_layout Plain Layout
...
 und oft erstaunlich korrekte ...
 ;-)
\end_layout

\end_inset

 Stenogramme.
 Bücher auf Deutsch und Französisch sind inzwischen recht angenehm und mit
 wenigen Fehlern lesbar
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich schreibe das aus Überzeugung, vertreibe ich mir doch auf meinem Arbeitsweg
 die Zeit mit Vol de nuit von Antoine de Saint-Exupéry - ein poetischen
 Kontrapunkt zum (eher prosaischen) Arbeitsalltag ...
\end_layout

\end_inset

, auch wenn im Untergrund ein Spaghetti-Code werkelt, der einem durchaus
 die Haare zu Berge stehen lassen könnte
\begin_inset Foot
status open

\begin_layout Plain Layout
Schreiben wir: 
\begin_inset Quotes eld
\end_inset

könnte
\begin_inset Quotes erd
\end_inset

, denn der Code scheint ja zu funktionieren (was der einzige Anspruch ist,
 den wir an ihn haben sollten) - denn wie heisst es ja so schön heisst:
 never change a running system! :)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Anyway ...
 was ist neu in Version 0.3, die offiziell den Namen Hyperion
\begin_inset Foot
status open

\begin_layout Plain Layout
Einerseits der Tradition der Götternamen folgend: Hephaistos, Ariadne, Hyperion
 ...
 Andererseits besucht uns seit längerem und ziemlich fleissig die Katze
 der Nachbarin - ein ebenso imposanter wie verspielter grauer Kater, dem
 der Name - wie ich finde - recht gut steht ...
\end_layout

\end_inset

 zugeteilt erhält? Es ist wieder so einiges dazu gekommen:
\end_layout

\begin_layout Itemize
Interpolation: VSTENO kann nun selbständig Punkte von Stenofonts interpolieren
 und dadurch die Druckqualität der Zeichen verbessern.
\end_layout

\begin_layout Itemize
Optionale Regeln: Diese ermöglichen es dem/der Anwender/in, im Eingabeformular
 bestimmte Optionen zum Modell anzubieten, welche ein- und ausgeschaltet
 werden können.
\end_layout

\begin_layout Itemize
Eilschrift Deutsch: Die optionalen Regeln werden nun erstmals im Modell
 Stolze-Schrey angewandt, indem neben der Grundschrift (Verkehrsschrift)
 weitere Kürzungsregeln der Eilschrift angewählt werden können
\begin_inset Foot
status open

\begin_layout Plain Layout
Wer also die Grundschrift Stolze-Schrey beherrscht, kann mit VSTENO nun
 interaktiv die nächst höhere Stufe der Eilschrift erlernen.
 Die Regeln dafür sind bereits recht zuverlässig, werden aber in den nächsten
 Monaten noch kontinuierlich verbessert.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Import/Export: Modelle können nun automatisiert in und aus Dateien exportiert
 oder geladen werden (die manuelle Übertragung mittels Copy&Paste bleibt
 erhalten).
\end_layout

\begin_layout Itemize
Performance: Durch die zunehmende Komplexität ist VSTENO noch langsamer
 geworden - dem wurde mit entsprechenden Code- und Algorithmus-Optimierungen
 entgegengewirkt.
\end_layout

\begin_layout Itemize
Debugging: Dank besseren Debugging-Optionen (mit Informationen zu Staging,
 Caching und grafischer Darstellung) können Fehler in Modellen nun einfacher
 entdeckt und korrigiert werden.
\end_layout

\begin_layout Itemize
Ausgabe: VSTENO bietet nun eine augenschonende Yinyang-Funktion, die vor
 allem bei längerem Arbeiten mit dem Programm hilfreich sein kann.
\end_layout

\begin_layout Itemize
Layout: Es wurde der neue Tag <newpage> eingefügt, mit dem nun auch Seitenumbrüc
he definiert werden können.
\end_layout

\begin_layout Itemize
Transkription: Akronyme können nun von der phonetischen Transkription ausgenomme
n und (auf Wunsch) zur einfacheren Übertragung in Kleinbuchstaben konvertiert
 werden.
\end_layout

\begin_layout Standard
Abgesehen davon wurden - wie immer - viele Fehler korrigiert und kleinere
 Verbesserungen angebracht.
\end_layout

\begin_layout Standard
So, what's next? Mitte April jährt sich die der Entwicklungsstart zu VSTENO
 zum zweiten Mal.
 Dies entspricht auch dem zeitlichen Rahmen, den ich mir ursprünglich gesetzt
 hatte: In zwei Jahren sollte das Programm 
\begin_inset Quotes eld
\end_inset

fertig
\begin_inset Quotes erd
\end_inset

 sein.
 Dieser Zeitpunkt ist nun gekommen: Fertig ist ein Programm wie VSTENO zwar
 nie, dennoch soll Hyperion die voraussichtlich vorletzte Version sein.
 Ich schreibe vorletzte, weil ich durchaus denke, dass es nochmal eine Version
 geben wird, in der gewissermassen 
\begin_inset Quotes eld
\end_inset

letzte
\begin_inset Quotes erd
\end_inset

 Fehler korrigiert und das ganze Programm noch einmal 
\begin_inset Quotes eld
\end_inset

durchgekämmt
\begin_inset Quotes erd
\end_inset

 und - vor allem - von allem unnötigen Ballast gesäubert und befreit wird.
\end_layout

\begin_layout Standard
Dennoch ist es Zeit, die Entwicklung von VSTENO abzuschliessen: Einige Überlegun
gen hiezu - insbesondere die design-technischen Einschränkungen von VSTENO
 - hatte ich ja bereits im letzten Vorwort dargelegt.
 Es gibt aber auch praktische Gründe: VSTENO soll ja kein programmiertechnischer
 Selbstläufer werden, sondern am Ende greifbare Resultate in Form von Stenotexte
n liefern.
 Gerade dem möchte ich mich in Zukunft vermehrt widmen können.
\end_layout

\begin_layout Standard
Konkret schweben mir für die nächste Zeit folgende zwei Projekte vor:
\end_layout

\begin_layout Itemize
Herausgabe eines Romans (z.B.
 Krock&Co) von Friedrich Glauser als gedrucktes Buch in der Grundschrift
 Stolze-Schrey Deutsch (entweder nur in Steno oder als Paralleledition in
 Langschrift und Steno).
\end_layout

\begin_layout Itemize
Herausgabe des Romans Vol de nuit von Antoine de Saint-Exupéry in der Grundschri
ft Stolze-Schrey Französisch (eventuell als Paralleledition mit einer Schweizerd
eutschen Übersetzung
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine solche hatte ich bereits vor drei Jahren angefertigt und dabei für
 das Schweizerdeutsche viele Hinweise von Viktor Schobinger (siehe 
\begin_inset CommandInset href
LatexCommand href
name "hier"
target "https://de.wikipedia.org/wiki/Viktor_Schobinger"

\end_inset

 und 
\begin_inset CommandInset href
LatexCommand href
name "hier"
target "http://www.züritütsch.ch/index.html"

\end_inset

) berücksichtigt.
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
Daneben wäre es natürlich auch sehr wünschenswert, wenn weitere Stenografie-Syst
eme mit VSTENO umgesetzt würden.
 In Stolze-Schrey könnten dies zum Beispiel in den Sprachen Italienisch
 und Rätoromanisch sein
\begin_inset Foot
status open

\begin_layout Plain Layout
Die entsprechenden Manuale liegen schon längere Zeit hier, aber es fehlt
 einfach die Zeit ...
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Auf jeden Fall wünsche ich bereits jetzt allen viel Vergnügen mit 
\begin_inset Quotes eld
\end_inset

Hyperion
\begin_inset Quotes erd
\end_inset

 - und bitte um Nachsicht, falls dieses Vorwort allenfalls etwas fahrig
 daherkommt: Ich schreibe diese Zeilen in Zeiten, wo der Bundesrat in der
 Schweiz wegen Corona die ausserordentliche Lage verordnet hat ...
 und sich um mich herum - so scheint mir - nur Panik und Stress (fiebrige,
 ineffiziente Betriebsamkeit) breit macht.
 Da will ich doch die neue Version zügig herausbringen - und mich danach
 mit Saint-Exupéry in eine Ecke verkriechen ...
\end_layout

\begin_layout Section*
Vorwort zur Version 0.2 
\begin_inset Quotes eld
\end_inset

Ariadne
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
VSTENO wächst und wächst
\begin_inset Foot
status open

\begin_layout Plain Layout
Oder wie man anders auch sagen könnte: Es wuchert ...
 :)
\end_layout

\end_inset

 ...
 Tatsächlich konnte in der vorliegenden, zweiten Version (V0.2) namens Ariadne
 der Funktionsumfang erheblich erweitert werden.
 Unter den Neuerungen sind zum Beispiel:
\end_layout

\begin_layout Itemize
Englisch als weiteres Kurzschrift-System (Verkehrsschrift Stolze-Schrey)
 neben Deutsch, Spanisch und Französisch, welche verbessert wurden.
\end_layout

\begin_layout Itemize
eine kombinierte phonetische und linguistische Analyse, welche sich insbesondere
 für das englische System aufdrängte.
\end_layout

\begin_layout Itemize
Hybride Regeln, welche gleichzeitig schriftliche, phonetische und linguistische
 Bedingungen überprüfen können.
\end_layout

\begin_layout Itemize
Rückportierungen aus der SE2 wie Umrissmodellierung und proportionale Punkte
 mit parallelen Rotationsachsen.
\end_layout

\begin_layout Itemize
Parallelsatz, also Langschrift auf gleicher Seite vis-à-vis von Kurzschrift.
\end_layout

\begin_layout Itemize
Diakritische Zeichen in Verbindung mit Grundzeichen.
\end_layout

\begin_layout Itemize
Allgemein verbesserte globale und individuelle Zeichenskalierung (inklusive
 Schattierung).
\end_layout

\begin_layout Itemize
Gemeinsame Nutzung ein und desselben Fonts in verschiedenen Systemen (Sprachen).
\end_layout

\begin_layout Standard
Bei all diesen Neuerungen wird gleichzeitig offensichtlich, mit welchen
 technischen Einschränkungen VSTENO zu kämpfen hat.
 Die ursprüngliche Steno Engine, also das eigentliche Herzstück des Programms,
 ist in der Version 1 inzwischen hoffnungslos obsolet.
 Zwar wurde sie x-Mal aufgebohrt, gepatcht und durch zuweilen fast münchausneris
che Hacks immer wieder gedehnt und gebogen, um neuere Funktionalitäten ohngeacht
et der fundamentalen Inkompatibilitäten, die sich diesem Ansinnen grundsätzlich
 in den Weg stellten, zu integrieren.
 Dieses buchstäbliche 
\begin_inset Quotes eld
\end_inset

Aufmotzen eines Trottinetts zu einem Möchtegern-BMW
\begin_inset Foot
status open

\begin_layout Plain Layout
Nicht dass an dieser Stelle irgendjemand auf die Idee käme, ich sei ein
 Autonarr oder gar Fan von BMW oder so ...
 aber der hanebüchene Vergleich vom fussbetriebenen Trotinett zu einem soliden
 Boliden schien mir im Falle der in der Grundkonzeption definitiv eher bescheide
nen Steno Engine doch zutreffend ...
 :)
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 scheint zwar soweit ad-hoc und funktionell geglückt, es lässt sich indes
 nicht leugnen, dass hier gravierende und grundlegende Mängel bestehen,
 die dereinst nur durch eine komplette Neuimplementierung gelöst werden
 können.
\end_layout

\begin_layout Standard
Sollen wir an dieser Stelle also einen Blick in die Zukunft wagen? In jene
 Schöne Neue Welt dessen, was VSTENO dereinst - in einem völlig neuen Kleid
 - sein könnte? Eine kokette, bezaubernde, objektorientierte Diva in Java
 oder C++ mit einem Satzsystem à la Metafont und TEX als solidem Unterbau?
 Ich komme zum Schluss, dass solche Träumereien ebenso unrealistisch wie
 sinnlos sind.
 Unrealistisch, weil eine Neuimplementierung mit den genannten Parametern
 locker 1500 - 2000 Stunden Arbeit in Anspruch nehmen kann; und sinnlos,
 weil mit VSTENO trotz seiner Mängel inzwischen ein brauchbares Programm
 zur Verfügung steht, dessen Potenzial noch nicht ausgeschöpft ist.
\end_layout

\begin_layout Standard
In diesem Sinne empfehle ich Ihnen Ariadne ganz herzlich zum Gebrauch.
\end_layout

\begin_layout Section*
Vorwort zur Version 0.1 
\begin_inset Quotes eld
\end_inset

Hephaistos
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Die letzte Dokumentation von VSTENO liegt schon einige Zeit zurück
\begin_inset Foot
status open

\begin_layout Plain Layout
Anwender/innen-Tutorial (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset

) vom 11.
 August 2018 und Tutorial für Linguist/innen (https://www.vsteno.ch/docs/tutorial_
linguistinnen.pdf) vom 18.
 August 2018.
 Die erste Version dieser Dokumenation wurde am 10.02.19 erstellt.
\end_layout

\end_inset

.
 Seitdem ist viel passiert: Datenbankfunktionen, Formelsprache (mit Branching
 und Stages), linguistisches Analyse-Modul (linguistical analyzer), Weiterentwic
klung der Steno Engine (diakritische Zeichen und verbesserte Darstellung
 von Punktschlingen), spanisches und französisches System
\begin_inset Foot
status open

\begin_layout Plain Layout
Das spanische System wurde ab 3.
 Juni 2019 entwickelt und am 8.
 Juni erstmals auf www.vsteno.ch aufgeschaltet.
 Es wird fortan parallel zum deutschen System weiterentwickelt.
 Idem für das französische System, das Anfang Juli 2019 aufgeschaltet wurde.
\end_layout

\end_inset

 - dies alles sind Neuerungen, die bis heute nirgendwo erläutert wurden.
 
\end_layout

\begin_layout Standard
Höchste Zeit also, dies nachzuholen und so Ihnen, den Anwender/innen die
 Möglichkeit zu geben, eigene Stenografie-Systeme umzusetzen.
 Denn dies ist zugegebenermassen eine der primären Visionen von VSTENO:
 Stenograf/innen anderer Systeme dazu zu animieren, ihr eigenes Stenografie-Syst
em mit VSTENO umzusetzen! 
\end_layout

\begin_layout Standard
Wie jedes quelloffene, freie Software-Projekt strebt VSTENO danach, irgendwann
 jenes entscheidende Momentum zu gewinnen, das den Quantensprung vom Einpersonen
- ins Community-Projekt ermöglicht.
 Mir ist sehr wohl bewusst, dass Stenografie heutzutage nicht mehr 
\begin_inset Quotes eld
\end_inset

so der Renner
\begin_inset Quotes erd
\end_inset

 ist, aber die Möglichkeit, dank VSTENO in Zukunft jeden beliebigen Roman
 in einem x-beliebigen Kurzschrift-System zu lesen, könnte vielleicht doch
 dazu führen, dass die Stenografie wieder etwas populärer wird.
\end_layout

\begin_layout Standard
Diesbezüglich kann ich aus eigener Erfahrung nur sagen, dass das Verwenden
 der Kurzschrift umso mehr Spass macht, je besser man sie beherrscht; und
 zur Beherrschung gehört nicht nur das Schreiben, sondern vor allem auch
 das (flüssige) Lesen.
 Gerade hier kann VSTENO mit seinem 
\begin_inset Quotes eld
\end_inset

Lesestoff à gogo
\begin_inset Quotes erd
\end_inset

 einen wesentlichen Beitrag leisten!
\end_layout

\begin_layout Standard
Sollte jemand Interesse haben, VSTENO weiterzuentwickeln - als Linguist/in
 (andere Systeme) oder als Programmierer/in (Erweiterung des Programmes),
 dann bitte bei mir melden (m.maci@gmx.ch)!
\end_layout

\begin_layout Standard
Nun wünsche ich viel Spass und anregende Lesestunden mit VSTENO!
\end_layout

\begin_layout Part*
Praktischer Teil
\end_layout

\begin_layout Standard
Dieser Teil ist für all jene gedacht, die VSTENO zur Generierung von 
\begin_inset Quotes eld
\end_inset

Lesestoff
\begin_inset Quotes erd
\end_inset

 verwenden wollen.
 Sie erfahren hier, wo Sie gemeinfreie Bücher finden, die Sie mit VSTENO
 übertragen können, wie Sie die Bücher in Kurzschrift übertragen und wie
 Sie die Stenografie-Texte ausdrucken oder auf einem E-Reader lesen können.
\end_layout

\begin_layout Section*
Bücher
\end_layout

\begin_layout Standard
Jede/r Autor/in ist Urheber/in seiner/ihrer Bücher und hält somit sämtliche
 Rechte an seinen/ihren Texten.
 Deshalb die wichtigste Bemerkung vorweg: VSTENO will keinesfalls dazu aufrufen,
 urheberrechtlich geschützte Bücher ohne Abgeltung der entsprechenden Gebühren,
 die den Urheber/innen zustehen, zu verwenden!
\end_layout

\begin_layout Standard
Es gibt allerdings auch Bücher, die gemeinfrei sind, entweder weil deren
 Urheberrechte abgelaufen sind (dies ist in der Regel 70 Jahre nach dem
 Tod des/der Autor/in der Fall) oder weil sie von Anfang an als gemeinfrei
 (z.B.
 mithilfe von Creative Commons
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://de.wikipedia.org/wiki/Creative_Commons"

\end_inset


\end_layout

\end_inset

) publiziert wurden.
 Eine Seite, die eine Sammlung von Büchern und Texten mit abgelaufenem Copyright
 anbietet, ist das Projekt Gutenberg:
\end_layout

\begin_layout Quotation
\begin_inset CommandInset href
LatexCommand href
name "Projekt Gutenberg"
target "https://www.projekt-gutenberg.com"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Nachdem das Projekt lange Jahre von Spiegel gehostet wurde, ist es nun seit
 diesem Jahr zu seinem alten, schlichten Design (glaube ich noch aus den
 90ern) zurückgekehrt, was mich sehr freut.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sie dürfen hier also jeden Text kopieren und für sich persönlich verwenden
\begin_inset Foot
status open

\begin_layout Plain Layout
Mit 
\begin_inset Quotes eld
\end_inset

persönlich
\begin_inset Quotes erd
\end_inset

 ist eine nicht-kommerzielle, private Nutzung gemeint.
 Untersagt ist ausdrücklich eine kommerzielle, öffentliche Nutzung.
 Es gilt also zu unterscheiden, dass die ursprünglichen Texte zwar copyright-fre
i sind, das Projekt Gutenberg (bzw.
 deren Mitarbeitende) indes die Rechte der digitalisierten Version innehaben!
 Nur Bücher, welche ausdrücklich durch eine CC-Lizenz freigegeben sind,
 dürfen - unter der Berücksichtigung der angegebenen Rechte - öffentlich
 (und zum Teil auch kommerziell) weiterverwendet werden!
\end_layout

\end_inset

.
 Sollten Sie die Bücher anderweitig verwenden wollen (also insbesondere
 öffentlich oder gar kommerziell), so klären Sie bitte vorgängig ab, ob
 und von welcher Art Copyright sie allenfalls betroffen sind!
\end_layout

\begin_layout Section*
Übertragen
\end_layout

\begin_layout Standard
Um Texte zu übertragen, öffnen Sie Ihren Webbrowser
\begin_inset Foot
status open

\begin_layout Plain Layout
Empfohlen wird Firefox.
 VSTENO ist Freie Software und wurde somit ausschliesslich unter Linux und
 unter Verwendung von Freier Software entwickelt.
 Getestet wurde VSTENO ausschliesslich auf den Browsern IceCat und ABrowser
 (unter Trisquel 7).
 Einige Funktionalitäten (insbesondere von VPAINT, welches JavaScript verwendet)
 laufen ausdrücklich nicht auf Browsern wie Safari und Internet Explorer.
\end_layout

\end_inset

 und geben die Adresse www.vsteno.ch ein.
 Es existieren grundsätzlich zwei mögliche Formate, um Texte zu übertragen
 und zu lesen: (1) im Webbrowser und (2) auf einem E-Reader (via PDF).
 
\end_layout

\begin_layout Subsection*
Webbrowser
\end_layout

\begin_layout Standard
Um lediglich etwas Text im Webbrowser zu lesen, klicken Sie in der linken
 Navigationsleiste auf Mini.
 Sie können den Text entweder selber eintippen oder aus der Zwischenablage
 kopieren.
 Klicken Sie anschliessend auf abschicken - fertig!
\end_layout

\begin_layout Standard
Stenogramme, die Sie auf diese Weise generieren, werden als einzelne SVG-Grafike
n (ein Bild pro Wort) inline in den HTML-Code eingefügt.
 Vorteil dieses Modus: Wenn Sie die Grösse des Browserfensters ändern, werden
 die Stenogramme automatisch neu angeordnet.
 Nachteil: Relativ grosser Abstand von Zeile zu Zeile (da jedes einzelne
 SVG-Bild die maximale Anzahl von 7 Stenografiehöhen enhalten muss, damit
 höher und tiefer gestellte Zeichen dargestellt werden können).
\end_layout

\begin_layout Subsection*
E-Reader
\end_layout

\begin_layout Subsubsection*
Vorbemerkung
\end_layout

\begin_layout Standard
Um es gleich vorwegzunehmen: Kurzschrift-Texte auf einem E-Reader zu lesen
 ist einfach top! Nicht nur ist die Schriftqualität wesentlich besser als
 auf einem herkömmlichen Bildschirm oder Tablett, sondern Sie tun damit
 auch Ihren Augen etwas Gutes! E-Reader verwenden nämlich die so genannte
 E-Ink-Technologie (bei denen schwarze Punkte durch echte Pigmente dargestellt
 werden), die das Auge wesentlich weniger ermüden.
 Ich möchte deshalb die Anschaffung eines E-Readers allen empfehlen, die
 sich ernsthaft mit dem Gedanken tragen, längere Stenografie-Texte zu lesen.
 Auch in ökologischer Hinsicht ist ein E-Reader aus meiner Sicht eine gute
 Sache, da die Texte in guter Qualität gelesen werden können, ohne Papier
 verschwenden zu müssen.
\end_layout

\begin_layout Standard
Die Empfehlung für einen E-Ink-Reader kommt mir allerdings nicht leicht
 über die Lippen: Der Markt der E-Ink-Reader wird heute hauptsächlich dominiert
 von Amazon.
 Zu Amazon gibt es aus meiner Sicht nicht viel Gutes bzw.
 eigentlich nur Schlechtes zu sagen
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich verweise hier nurmal auf Richard Stallmans Seite: 
\begin_inset CommandInset href
LatexCommand href
target "https://stallman.org/amazon.html"

\end_inset

.
 Aus persönlicher Sicht füge ich hinzu, dass ich es stossend finde, dass
 ein Mensch wie Jeff Bezos, seines Zeichens reichster Mann der Welt, ein
 weltweites Unternehmen führt, das Angestellte unter unmenschlichen Arbeitsbedig
ungen ausbeutet, im Namen der Globalisierung jeden lokalen Markt kaputt
 macht - und schliesslich noch die Frechheit hat, Steuerschlupflöcher zu
 nutzen, die dazu führen, dass die Firma Amazon im Jahr 2018 nicht nur keine
 Steuern bezahlt hat, sondern sogar noch 129 Millionen Dollar vom Fiskus
 rückerstattet erhielt (siehe hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.nau.ch/news/wirtschaft/amazon-zahlt-in-den-usa-keine-steuern-65485543"

\end_inset

).
\end_layout

\end_inset

.
 Das Dilemma an E-Readern ist im Moment, dass es wenige (bis keine) ethischen
 Alternativen gibt.
 Deshalb werde ich hier kein bestimmtes Modell nennen, sondern empfehle
 allen, sich ein eigenes Urteil zu bilden
\begin_inset Foot
status open

\begin_layout Plain Layout
Hilfreich dabei ist aus meiner Sicht die Seite: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.ethicalconsumer.org/technology/shopping-guide/tablets-e-readers"

\end_inset


\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
PDF
\end_layout

\begin_layout Standard
Es empfiehlt sich Kurzschrift-Texte via PDF auf den E-Reader zu transferieren.
 Dies kann in zwei Schritten erreicht werden: (1) Generieren der gelayouteten
 Seiten im Webbrowser und (2) Export der Seiten als PDF (via Druckfunktion
 des Browsers).
 
\end_layout

\begin_layout Enumerate
Gehen Sie auf die Seite www.vsteno.ch und wählen Sie Maxi aus der linken Navigatio
nsleiste.
 Geben Sie den Text ein (oder kopieren Sie ihn aus der Zwischenablage) und
 wählen Sie dann folgende Einstellungen: Fenster = Vollseite (ohne Button);
 Ausgabe = Layout (statt Inline).
 Ebenfalls empfiehlt sich unter Header, Titel und Einleitung entweder abzuwählen
 (dann wird gleich mit dem Kurzschrift-Text begonnen) oder hier einen eigenen
 Titel und eine Einleitung einzutragen (dies erscheinen dann in Langschrift
 zu Beginn des Textes).
 Die übrigen Einstellungen können Sie vorläufig belassen.
 Klicken Sie anschliessend auf abschicken.
\end_layout

\begin_layout Enumerate
Im Unterschied zu Inline erscheint ihr Text nun gelayoutet, d.h.
 für jede Seite wird nun eine grosse SVG-Grafik erstellt und die Stenogramme
 darin platziert (standardmässig ist die Seite 660x1000 Punkte gross und
 die Stenogramme werden im Blocksatz dargestellt).
 Diese Seiten können Sie nun zu einem PDF exportieren, indem Sie die Druck-Funkt
ion Ihres Browsers nutzen.
 Dies kann je nach Browser etwas unterschiedlich sein (meistens muss im
 Menü Datei der Punkt Drucken gewählt werden), wichtig ist, dass Sie hier
 die Option 
\begin_inset Quotes eld
\end_inset

Druckvorschau
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

Drucken in Datei
\begin_inset Quotes erd
\end_inset

 wählen.
 Der Trick besteht also darin, die Druckausgabe nicht auf den Drucker zu
 schicken, sondern in eine Datei umzuleiten.
 
\end_layout

\begin_layout Standard
Übertragen Sie anschliessend das PDF auf Ihren E-Reader.
\end_layout

\begin_layout Subsubsection*
Längere Texte
\end_layout

\begin_layout Standard
Texte bis zu einer Länge von etwa 20 Stenografieseiten können im Moment
 mit VSTENO problemlos verarbeitet werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Bezieht sich auf www.vsteno.ch und die jetzige Server-Konfiguration
\end_layout

\end_inset

.
 Bei längeren Texten tritt der Fehler 
\begin_inset Quotes eld
\end_inset

Gateway timeout
\begin_inset Quotes erd
\end_inset

 auf, da die Generierung zu lange dauert.
 Als Faustregel: VSTENO benötigt etwa 20 Sekunden für das Generieren einer
 Stenografie-Seite.
 Der Fehler 
\begin_inset Quotes eld
\end_inset

Gateway timeout
\begin_inset Quotes erd
\end_inset

 tritt somit in etwa nach 7 Minuten auf.
\end_layout

\begin_layout Standard
Der grösste Teil der Rechenzeit, nämlich etwa 80%, entfällt hierbei nicht
 auf das Generieren der Stenografie-Zeichen als solche, sondern auf die
 vorgeschaltete, linguistische Analyse.
 Damit trotzdem auch längere Texte (wie z.B.
 Romane) mit VSTENO bearbeitet werden können, empfiehlt es sich, die linguistisc
he Analyse abzukoppeln bzw.
 die Generierung zu Portionieren.
 Zwei Vorgehen bieten sich hierfür an:
\end_layout

\begin_layout Enumerate
Verwenden der LNG-Form: Kopieren Sie den Langschrift-Text ins Textfeld des
 Maxi-Formulars, wählen Sie anschliessend unter Ausgabe die LNG-Form (zusätzlich
 empfiehlt es sich auch, die Optionen 
\begin_inset Quotes eld
\end_inset

Vollseite
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

ohne Button
\begin_inset Quotes erd
\end_inset

 zu markieren) und anschliessend 
\begin_inset Quotes eld
\end_inset

abschicken
\begin_inset Quotes erd
\end_inset

.
 VSTENO wendet nun nur die linguistische Analyse an und gibt das Resultat
 im Browser aus.
 Achten Sie auch hier darauf, dass die Berechnung des eingegebenen Textes
 ungefähr 7 Minuten Rechnzeit nicht überschreitet.
 Wiederholen Sie anschliessend die Berechnung mit weiteren Textteilen und
 kopieren Sie das Resultat fortlaufend in eine ASCII-Textdatei (hierfür
 kann ein ganz normaler Texteditor verwendet werden).
 Kopieren Sie am Schluss den kompletten Text in LNG-Form ins Textfeld des
 Maxi-Formulars, wählen Sie unter 
\begin_inset Quotes eld
\end_inset

Text
\begin_inset Quotes erd
\end_inset

 das Format 
\begin_inset Quotes eld
\end_inset

Meta (LNG)
\begin_inset Quotes erd
\end_inset

 und als Ausgabe-Format 
\begin_inset Quotes eld
\end_inset

Layout
\begin_inset Quotes erd
\end_inset

 (mit entsprechenden Werten) und generieren Sie anschliessend das komplette
 PDF.
 Da VSTENO nun die linguistische Analyse nicht mehr anwenden muss, läuft
 die Generierung des Stenografie-Dokuments sehr schnell ab (wenige Minuten
 für 150-200 Seiten).
\end_layout

\begin_layout Enumerate
Generieren separater PDFs: Falls der Ursprungstext in Kapitel unterteilt
 ist, die eine Länge von 20 Seiten nicht überschreiten, können Sie auch
 jedes Kapitel einzeln als PDF generieren und anschliessend mit dem nachfolgende
n Kommandozeilen-Befehl zusammenfügen
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies funktioniert unter Linux mit dem Programm GhostScript (gs).
 Andere Betriebssystem bieten vermutlich ähnliche Hilfsprogramme, mit denen
 PDFs zusammengeführt werden können.
\end_layout

\end_inset

.
 Beachten Sie, dass VSTENO hier in jedem PDF mit der Seitennummerierung
 neu beginnt (falls Sie also eine fortlaufende Seitennummerierung möchten,
 so müssen Sie diese manuell für jedes PDF unter 
\begin_inset Quotes eld
\end_inset

Layout
\begin_inset Quotes erd
\end_inset

 anpassen):
\end_layout

\begin_layout LyX-Code
gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite
\end_layout

\begin_layout LyX-Code
-sOutputFile=pdf_komplett.pdf pdf_teil1.pdf pdf_teil2.pdf
\end_layout

\begin_layout Subsubsection*
Tipps
\end_layout

\begin_layout Subsubsection*
Zeilenumbrüche
\end_layout

\begin_layout Standard
Sie werden vielleicht bereits bemerkt haben, dass VSTENO normalen Text als
 fortlaufend betrachtet (es nützt also nichts, wenn Sie im Textfenster zusätzlic
he Zeilenumbrüche und Leerzeilen einfügt - VSTENO wird diese einfach ignorieren).
 Um einen Zeileneinbruch einzufügen müssen Sie die HTML-Tags <br> (break)
 und <p></p> (paragraph) verwenden
\begin_inset Foot
status open

\begin_layout Plain Layout
Neu bietet VSTENO die Option 
\begin_inset Quotes eld
\end_inset

Breaks
\begin_inset Quotes erd
\end_inset

 gleich oberhalb des Textfeldes: Ist 
\begin_inset Quotes eld
\end_inset

Breaks
\begin_inset Quotes erd
\end_inset

 gesetzt (Standard) übernimmt VSTENO die eingegebenen Zeilenumbrüche, FALLS
 der Text keine HTML-Tags enthält (sonst - oder wenn 
\begin_inset Quotes eld
\end_inset

Breaks
\begin_inset Quotes erd
\end_inset

 nicht markiert ist - werden Zeilenumbrüche wie beschrieben ignoriert).
\end_layout

\end_inset

:
\end_layout

\begin_layout Quotation
Dies ist die 
\end_layout

\begin_layout Quotation
erste Zeile <br> dies ist 
\end_layout

\begin_layout Quotation
die 
\end_layout

\begin_layout Quotation
zweite Zeile
\end_layout

\begin_layout Standard
Dieses Beispiel wird also in zwei Zeilen ausgegeben.
\end_layout

\begin_layout Standard
Damit Sie - insbesondere bei längeren Texten (wie Büchern), die Sie von
 einer Webseite via Zwischenablage kopieren - nicht alle Formatierungen
 von Hand neu eingeben müssen, empfiehlt sich folgendes Vorgehen:
\end_layout

\begin_layout Itemize
Rufen Sie die Seite mit dem Text auf, den Sie kopieren möchten
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir verwenden hier im Folgenden die 
\begin_inset Quotes eld
\end_inset

Notwendige Vorrede
\begin_inset Quotes erd
\end_inset

 aus Matto regiert von Friedricht Glauser in der Version des Projekts Gutenberg,
 siehe http://gutenberg.spiegel.de/buch/matto-regiert-1855/1.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Wählen Sie 
\begin_inset Quotes eld
\end_inset

Seitenquelltext anzeigen
\begin_inset Quotes erd
\end_inset

 o.ä.
 aus Ihrem Browsermenu.
\end_layout

\begin_layout Itemize
Scrollen Sie zu der Stelle, die den Text enthält.
\end_layout

\begin_layout Itemize
Wählen Sie mit der Maus den gesamten Text (inklusive HTML-Tags) aus, den
 Sie kopieren möchten.
\end_layout

\begin_layout Itemize
Fügen Sie diesen Text (inklusive HTML-Tags) ins Textfeld von VSTENO ein
 und berechnen Sie die Seite.
\end_layout

\begin_layout Standard
Hier unser Beispieltext als HTML-Quellcode:
\end_layout

\begin_layout LyX-Code
<h3>Notwendige Vorrede</h3> <p>Eine Geschichte zu erz&auml;hlen,
\end_layout

\begin_layout LyX-Code
die in Berlin, London, Paris oder Neuyork spielt, ist ungef&auml;
\end_layout

\begin_layout LyX-Code
hrlich.
 Eine Geschichte zu erz&auml;hlen, die in einer Schweizer 
\end_layout

\begin_layout LyX-Code
Stadt spielt, ist hingegen gef&auml;hrlich.
 Es ist mir passiert, 
\end_layout

\begin_layout LyX-Code
da&szlig; der Fu&szlig;ballklub Winterthur sich gegen eine meiner 
\end_layout

\begin_layout LyX-Code
Erz&auml;hlungen verwahrt hat, weil darin ein Back vorkam.
 
\end_layout

\begin_layout LyX-Code
Ich mu&szlig;te dann den Boys und anderen Fellows best&auml;tigen, 
\end_layout

\begin_layout LyX-Code
da&szlig; sie nicht gemeint waren.</p>
\end_layout

\begin_layout Standard
Wie man sieht werden hier nicht nur alle Zeilenumbrüche wie <br>, <p></p>
 mitkopiert, sondern auch Sonderzeichen wie ä (&auml;) oder das deutsche
 sz (&szlig;) anders dargestellt.
 All das braucht Sie nicht zu kümmern: VSTENO wandelt diese Sonderzeichen
 um und verwendet die Tags, um den Text in Abschnitte zu unterteilen (wie
 es im Original der Fall war).
\end_layout

\begin_layout Subsubsection*
Seitenumbrüche
\end_layout

\begin_layout Standard
Mit Version 0.3 (Hyperion) wurde neu der <newpage>-Tag eingeführt, der zum
 manuellen Einfügen eines Seitenumbruchs im Layout-Modus (ganze Seiten)
 verwendet werden kann:
\end_layout

\begin_layout LyX-Code
Dieser Text
\end_layout

\begin_layout LyX-Code
steht
\end_layout

\begin_layout LyX-Code
auf der ersten Seite<newpage> Dieser Text
\end_layout

\begin_layout LyX-Code
steht auf der zweiten Seite
\end_layout

\begin_layout Standard
Wie bereits bei den Zeilenumbrüchen spielt es keine Rolle, ob der Text im
 Textfenster Zeilenumbrüche enthält oder nicht: Einzig die Tags werden für
 das Layout berücksichtigt - alles andere wird von VSTENO ignoriert!
\end_layout

\begin_layout Subsubsection*
Einstellungen
\end_layout

\begin_layout Standard
Unter Zeichen haben Sie die Möglichkeit Grösse, Dicke, Neigung, Schattierung
 etc.
 anzugeben.
 Ein Hinweis gleich vorweg: Nicht alle Optionen sind bereits in beiden Formaten
 (Inline und Layouted) implementiert! Am wichtigsten für ein gutes Schriftbild
 auf einem E-Reader (oder beim Ausdrucken) ist jedoch die Schriftgrösse
 und die Schriftdicke.
 Experimentieren Sie etwas mit diesen Werten, um die optimalen Grössen für
 Ihren E-Reader zu finden! Gleiches gilt für die Parameter unter Layouted:
 Experimentieren Sie mit Höhe/Breite, Randeinstellungen etc.
 um die für Sie optimalen Werte zu finden!
\end_layout

\begin_layout Subsubsection*
Inline-Option-Tags
\end_layout

\begin_layout Standard
Inline-Option-Tags bieten Ihnen eine weitere Möglichkeit, die Gestaltung
 eines Stenografie-Textes anzupassen.
 Inline-Option-Tags sehen HTML-Tags sehr ähnlich und können wie diese an
 jeder beliebigen Textstelle eingefügt werden.
 
\end_layout

\begin_layout LyX-Code
<p>Dies ist ein 
\end_layout

\begin_layout LyX-Code
<@token_color=red>
\end_layout

\begin_layout LyX-Code
rotes
\end_layout

\begin_layout LyX-Code
<@token_color=black>
\end_layout

\begin_layout LyX-Code
Wort.</p> 
\end_layout

\begin_layout Standard
Beachten Sie, dass VSTENO den Text “Dies ist ein rotes Wort” auch hier als
 fortlaufende Stenogramme in einer einzigen Zeil ausgibt (Zeilenumbrüche
 haben keine Bedeutung
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies gilt, solange sie HTML-Tags, wie hier z.B.
 <p> und </p>, verwenden.
 Wenn Sie <p> und </p> weglassen, fügt VSTENO automatisch Zeilenumbrüche
 ein.
 Deaktivieren Sie in diesem Fall die Option 
\begin_inset Quotes eld
\end_inset

breaks
\begin_inset Quotes erd
\end_inset

 oben im Formular, um einen fortlaufenden Text zu erhalten.
\end_layout

\end_inset

).
 Mit dem Inline-Option-Tag <@token color=red > wird die Zeichenfarbe nach
 “dies ist ein” auf rot gesetzt und das Wort “rotes” somit in roter Farbe
 ausgegeben.
 Analog wechselt <@token_color=black> die Schriftfarbe wieder zurück auf
 schwarz.
 
\end_layout

\begin_layout Standard
Inline-Option-Tags weisen somit folgendes Format auf: 
\end_layout

\begin_layout Standard
<@variable=
\begin_inset Quotes erd
\end_inset

Wert
\begin_inset Quotes erd
\end_inset

> 
\end_layout

\begin_layout Standard
<@variable=’neuer Wert’ > 
\end_layout

\begin_layout Standard
<@variable=Wert > 
\end_layout

\begin_layout Standard
Die Variable bezeichnet die Option, die angepasst wird, indem sie den Wert
 “Wert” zugewiesen erhält.
 Der Wert kann in doppelten oder einfachen Anführungszeichen oder auch direkt
 zwischen = und > stehen (wählen Sie hier die Form, die Ihnen persönlich
 am besten gefällt).
\end_layout

\begin_layout Subsubsection*
Variablen 
\end_layout

\begin_layout Standard
Grundsätzlich können sämtliche Optionen der Steno-Engine - insbesondere
 also auch jene, welche in der Vollversion per Webformular zur Verfügung
 stehen - mit Inline-Option-Tags dynamisch, d.h.
 innerhalb des Textes, verändert werden.
 Die wichtigsten Variablen sind:
\end_layout

\begin_layout Itemize
token_size: Grösse der Stenozeichen (Zoomfaktor, Standard: Standard 1.6).
 
\end_layout

\begin_layout Itemize
token_type: Kann die Werte “shorthand” (Standard), “handwriting”, “html-
 text” und “svgtext” annehmen.
 Dadurch kann kann Text in Langschrift und Stenografie gemischt werden (mehr
 dazu im Abschnitt “gemischte Texte”).
 
\end_layout

\begin_layout Itemize
token_thickness: Liniendicke der Stenozeichen (Standard: 1.25).
 
\end_layout

\begin_layout Itemize
token_inclination: Neigung der Stenozeichen (Standard: 60 Grad).
 
\end_layout

\begin_layout Itemize
token_shadow: Stärke der Schattierung (Standard: 1.0).
 
\end_layout

\begin_layout Itemize
token_distance_wide: Abstand zwischen zwei weiten Stenozeichen (Standard:
 15)
\begin_inset Foot
status open

\begin_layout Plain Layout
Der weite Abstand entspricht im deutschen System den Vokalen e, ä (horizontal);
 ei, eu (1/2 Stufe höher); ü, ö (1/2 Stufe tiefer).
 Die enge Verbindung token_distance_narrow kann zwar ebenfalls eingestellt
 werden.
 Da Stenozeichen jedoch sehr individuelle Abstände benötigen, sollte hierfür
 stattdessen mithilfe des Spacers und des RX-GEN entsprechende Regeln definiert
 werden (siehe hierzu das entsprechende Kapitel).
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Itemize
token_color: Farbe der Stenozeichen (Standard: “black” bzw.
 rgb(0,0,0)
\begin_inset Foot
status open

\begin_layout Plain Layout
Hier kann aus HTML entweder die rgb-Notierung rgb(r,g,b) oder die vordefinierten
 Standarfarben (wie black, green, white, red, blue, purple etc.) verwendet
 werden.
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Itemize
token_style_type: Linientyp mit dem Wert 
\begin_inset Quotes eld
\end_inset

solid
\begin_inset Quotes erd
\end_inset

 (durchgehend), 
\begin_inset Quotes eld
\end_inset

dotted
\begin_inset Quotes erd
\end_inset

 (gepunktet) oder 
\begin_inset Quotes eld
\end_inset

dashed
\begin_inset Quotes erd
\end_inset

 (gestrichelt).
\end_layout

\begin_layout Itemize
token_style_custom_value: benutzerdefinierter Wert für den Linientyp
\begin_inset Foot
status open

\begin_layout Plain Layout
Hier können zwei durch Komma abgetrennte Werte zugewiesen werden: <@token_style_
custom_value=1,1> bedeutet zum Beispiel: 1 Punkt zeichnen, einen Punkt leerlasse
n etc.
 (was einer eng punktierten Linie entspricht).
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
svgtext_size: Grösse der Zeichen in Normalschrift in px (Standard: 30, es
 wird die Schrift Courier verwendet).
\end_layout

\begin_layout Standard
Sämtliche von VSTENO verwendeten Variablen sind in der Datei session.php
 aufgeführt.
 Nicht alle können durch den Nutzer geändert werden und bei anderen macht
 es wenig Sinn, sie im Laufe einer Berechnung zu verändern
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Variable actual_model zum Beispiel kann nicht verändert werden, da VSTENO
 gleichzeitig immer nur 1 Kurschriftsystem verwenden kann.
 Die Variable token_size hingegen kann zwar angepasst werden, dennoch sollte
 dies mit Vorsicht getan werden: Wir die grösse der Stenozeichen während
 der Berechnung verändert, dann sollte dies nicht innerhalb der gleichen
 Zeile geschehen (da sonst die Grundlinie der Zeichen nicht mehr auf gleicher
 Höhe liegt) und im Layout-Modus sollte dies gar nicht verwendet werden
 (da der Layout-Modus mit fixen Zeilenabständen arbeitet, die dann nicht
 mehr zur Zeichengrösse passen).
 Variablen, die vom/von der Nutzer/in verändert werden können, sind in der
 Datei options.php in der Variable $whitelist aufgefüht.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Gemischte Texte
\end_layout

\begin_layout Standard
Mithilfe der Inline-Option-Tags bietet VSTENO auch die Möglichkeit, Stenogramme
 und Langschrift zu mischen: 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<p>Einige Kürzungen:
\end_layout

\begin_layout LyX-Code
<@token_type=svgtext>
\end_layout

\begin_layout LyX-Code
gegen
\end_layout

\begin_layout LyX-Code
<@token_type=shorthand>
\end_layout

\begin_layout LyX-Code
gegen
\end_layout

\begin_layout LyX-Code
<@token_type=svgtext>
\end_layout

\begin_layout LyX-Code
mit
\end_layout

\begin_layout LyX-Code
<@token_type=shorthand>
\end_layout

\begin_layout LyX-Code
mit</p> 
\end_layout

\begin_layout Standard
Hier wird also nach den Wörtern 
\begin_inset Quotes eld
\end_inset

gegen
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

mit
\begin_inset Quotes erd
\end_inset

 in Langschrift die entsprechende Abkürzung als Stenogramm angezeigt.
 
\end_layout

\begin_layout Standard
Die Variable “token_type” kann folgende Werte annehmen:
\end_layout

\begin_layout Itemize
shorthand: Kurzschrift (es wird das vorselektierte Modell verwendet).
\end_layout

\begin_layout Itemize
handwriting: Langschrift handgeschrieben (Blockschrift im ähnlichen Stil
 wie die Stenozeichen).
 
\end_layout

\begin_layout Itemize
htmltext: Langschrift als HTML-Text 9
\begin_inset Foot
status open

\begin_layout Plain Layout
Diese Variante bietet nur sehr eingeschränkte Möglichkeiten und wir in zukünftig
en Versionen vermutlich wieder verschwinden.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Itemize
svgtext: Langschrift als SVG-Grafik dargestellt.
\end_layout

\begin_layout Standard
Wie bereits angedeutet sind gewisse Optionen (darunter auch token_type)
 im Layout-Modus nicht oder nur eingeschränkt verfügbar.
 Zuverlässig verwendet werden können aber in beiden Modi: Schriftdicke (token_th
ickness), Schattierungsstärke (token_shadow), Farbe (token_color).
\end_layout

\begin_layout Subsubsection*
Sprache
\end_layout

\begin_layout Standard
Im Abschnitt 
\begin_inset Quotes eld
\end_inset

Engine
\begin_inset Quotes erd
\end_inset

 kann die Sprache gewählt werden.
 Im Moment stehen Deutsch (standard
\begin_inset Foot
status open

\begin_layout Plain Layout
Die 
\begin_inset Quotes eld
\end_inset

Glückskekse
\begin_inset Quotes erd
\end_inset

 (fortune cookies) rechts oben werden immer auf Deutsch angezeigt.
\end_layout

\end_inset

), Spanisch, Französisch und Englisch zur Verfügung
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Zuverlässigkeit der Systeme (bzgl.
 Richtigkeit der Übertragung) nach Reihenfolge: Deutsch (erstes und am besten
 erproptes und korrigiertes System), Französisch (drittes und am zweitbesten
 erproptes und korrigiertes System), Spanisch (zweites und recht gut erproptes
 und korrigiertes System - leider wird es fast nicht mehr geschrieben, weshalb
 Textsamples und Korrekturen schwierig sind), Englisch (viertes und am wenigsten
 erproptes und praktisch unkorrigiertes System).
 
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Wenn Sie als Benutzer/in eingeloggt sind, wird hier zusätzlich ihr eigenes
 (editierbares) Modell angezeigt und diese Auswahl selektiert auch automatisch
 das aktive Modell, mit dem Sie arbeiten.
\end_layout

\begin_layout Subsubsection*
Zeichen 
\backslash
 und |
\end_layout

\begin_layout Standard
Diese Zeichen geben VSTENO an, ob es sich um ein zusammengesetztes Wort
 handelt und wie dieses geschrieben werden soll.
 Betrachten wird die beiden Wörter Lebenspartner und Eulenspiegel.
 Beide Wörter sind aus zwei Einzelwörtern zusammengesetzt und beide weisen
 an der Verbindungsstelle die Konsontengruppe -nsp- auf.
\end_layout

\begin_layout Standard
Im System Stolze-Schrey können diese auf zwei Arten gruppiert werden: (1)
 -ns- plus -p- oder (2) -n- plus -sp-.
 VSTENO hat grundsätzlich keine Möglichkeit zu entscheiden, welches die
 bessere Gruppierung ist.
 Sie können aber eine Gruppierung erzwingen, indem Sie die Einzelwörter
 mit | und 
\backslash
 trennen:
\end_layout

\begin_layout LyX-Code
Lebens|partner, Lebens
\backslash
partner
\begin_inset Foot
status open

\begin_layout Plain Layout
Verwenden Sie zur Eingabe von 
\backslash
 und | die Taste AltGr + <> und AltGr + 7.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
Eulen|spiegel, Eulen
\backslash
spiegel
\end_layout

\begin_layout Standard
Nun werden die Konsonantengruppen richtig gruppiert.
 Mit | bleiben die Wörter zusammegschrieben (fortlaufendes Stenogramm),
 mit 
\backslash
 hingegen kehrt VSTENO für das zweite Wort auf die Grundlinie zurück (die
 Wortteile werden getrennt, nahe nebeneinander geschrieben).
\end_layout

\begin_layout Subsubsection*
Paralleledition
\end_layout

\begin_layout Standard
Ab Version 0.2 (Ariadne) stellt VSTENO eine rudimentäre Form für Paralleltexte
 - zum Beispiel links Langschrift, rechts Kurzschrift - zur Verfügung.
 Gehen Sie wie folgt vor, um die Paralleledition zu selektieren:
\end_layout

\begin_layout Enumerate
Wählen Sie die Optionen: Layount, ohne Button, Vollseite
\end_layout

\begin_layout Enumerate
Selektieren Sie Paralleltext und wählen Sie die Parameter (Grösse, Schrift
 etc.) und insbesondere, wo der Langschrifttext stehen soll:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

vorher
\begin_inset Quotes erd
\end_inset

: der Langschrifttext soll vor dem Kurzschrifttext (links) stehen
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

nachher
\begin_inset Quotes erd
\end_inset

: der Langschrifttext soll nach dem Kurzschrifttext (rechts) stehen
\end_layout

\end_deeper
\begin_layout Enumerate
VSTENO generiert nun abwechselnd ganzseitige SVG mit Langschrift- und Kurzschrif
ttexten.
 Exportieren Sie diese über die Druckfunktion des Browsers als PDF (siehe
 
\begin_inset Quotes eld
\end_inset

Drucken
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Enumerate
Verwenden Sie ein PDF-Programm, das die Funktion 
\begin_inset Quotes eld
\end_inset

2 Seiten auf 1 Seite drucken
\begin_inset Quotes erd
\end_inset

 anbietet.
 Damit können Sie jede einzelne PDF-Seite von A4 auf A5 verkleinern, sodass
 auf einer A4 Seite zwei A5-Seiten nebeneinander gedruckt werden.
\end_layout

\begin_layout Standard
In der Paralleledition wird auf der Langschrift-Seite genau jener Text gedruckt,
 der auf der enstprechenden Kurzschriftseite enthalten ist.
\end_layout

\begin_layout Standard
Bitte beachten Sie: Wenn Sie ein stenografisches Modell verwenden, dass
 den ursprünglichen Text in Stage 0 verändert, dann erscheinen diese Veränderung
 auch im Paralleltext.
 Soll eine saubere Parallelausgabe erreicht werden, darf das Modell also
 keine Regeln in Stage 0 definieren.
 Ein Spezialfall sind Markierung in Stage 0 mit # (für phonetische Transkription
en) oder [] (für einzelne Zeichen): Diese können am Schluss für die Paralleledit
ion automatisch wieder herausgefiltert werden (hierfür muss einfach die
 entsprechende Option selektiert werden).
\end_layout

\begin_layout Subsection*
Rendering
\end_layout

\begin_layout Subsubsection*
Flächenmodellierung
\end_layout

\begin_layout Standard
Ab Version 0.2 (Ariadne) bietet VSTENO nebst der Mittellinienmodellierung
 auch die Möglichkeit, die Stenogramme als Polygone (Flächen) zu rendern.
 Dies kann unter Umständen zu einer verbesserten Darstellung von schattierten
 Zeichen führen, da die Schattierung dann nicht treppenförmig (wie bei der
 Mittellinienmodellierung) sondern kontinuierlich dargestellt wird.
\end_layout

\begin_layout Standard
Das Polygon-Rendering (oder 
\begin_inset Quotes eld
\end_inset

Umrissmodellierung
\begin_inset Quotes erd
\end_inset

) ist ein so genannter Backport aus der SE2 auf die SE1rev1 und gilt als
 experimentell.
 Weitere Infos zur Funktionsweise sowie die Parameter, welche diesen Modellierun
gstyp kontrollieren, werden in einem separaten Dokument erklärt
\begin_inset Foot
status open

\begin_layout Plain Layout
siehe https://www.vsteno.ch/docs/Umrissmodellierung.pdf
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Interpolation
\end_layout

\begin_layout Standard
Da die Flächenmodellierung relativ komplex ist und nicht immer zufriedenstellend
e Resulatate liefert, wird in Verison 0.3 (Hyperion) zusätzlich die Interpolation
 eingeführt.
 Interpolation bedeutet, dass VSTENO anhand der vorhandenen Punkte, welche
 die Splines des Stenozeichens definieren, Zwischenpunkte errechnet.
 Diese Zwischenpunkte wiederum erlauben es dem Programm, insbesondere Übergänge
 von verschiedenen Strichdicken feiner zu gestalten.
 Als Beispiel das Wort 
\begin_inset Quotes eld
\end_inset

Fastanklage
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename interpolation_beispiel.png
	width 6cm

\end_inset


\end_layout

\begin_layout Standard
Wie man sieht, gibt es hier drei schattierte Zeichen: [ST], [N] und [G].
 Alle drei sind in der Grundvariante (oben) relativ grobschlächtig: Einige
 wenige rote Punkte definieren den Verlauf der Kurven
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies ist aus meiner Sicht grundsätzlich eine der Stärken von VSTENO: mit
 relativ wenigen Punkten können komplexe Strichverläufe relativ intuitiv
 definiert werden.
 Der Nachteil ist allerdings, dass die Übergänge bei Strichdicken relativ
 abrupt erfolgen.
 Die zweite Zeile zeigt nun das gleiche Wort interpoliert: VSTENO legt an
 die ursprünglichen Punkte violett dargestellte Handles (Tensions) an, und
 berechnet damit weitere rote Zwischenpunkte.
 In der dritten Zeile wird das Ergebnis der zweiten Zeile noch einmal interpolie
rt, sodass das Wort im Vergleich zum Beginn nun also mit der 4-fachen Auflösung
 gerendert wird.
 Wie leicht zu erkennen ist, werden nun [ST] und [N] viel besser (feiner)
 gerendert.
 Die Interpolation und die entsprechenden Iterationen können im Eingabeformular
 angegeben werden.
 Empfohlen werden 2 Iterationen (was wie in diesem Beispiel einer 4-fachen
 Auflösung entspricht).
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Drucken
\end_layout

\begin_layout Standard
Nebst der Ausgabe der Stenogramme im Webbrowser oder auf einem E-Reader
 können Sie diese natürlich auch ausdrucken.
 Auch hier wird (wie beim E-Reader) der Modus Layout (anstelle von Inline)
 empfohlen, da VSTENO dann ganze Seiten generiert (und die Stenogramme innerhalb
 der Seite ästhetisch - z.B.
 unter Verwendung von Blocksatz - anordnet).
 Ebenfalls wird empohlen, die Optionen Vollseite und ohne Button zu verwenden,
 damit VSTENO die Stenogramme auf eine leere Seite setzt (und nicht das
 Layout der Homepage www.vsteno.ch mitgedruckt werden muss).
\end_layout

\begin_layout Standard
Zum Drucken können Sie entweder ein PDF exportieren (wie für den E-Reader)
 oder die Druckfunktion des Browsers direkt verwenden.
 Auch hier empfiehlt es sich, verschiedene Einstellungen (Grösse, Dicke,
 Layout: Breite/Höhe, Rand etc.) auszuprobieren, um herauszufinden, welche
 Werte auf Ihrem Drucker die besten Resultate ergeben.
\end_layout

\begin_layout Subsection*
Printeditions
\end_layout

\begin_layout Standard
Inzwischen gibt es verschiedene Webseiten, welche so genannte 
\begin_inset Quotes eld
\end_inset

Books on Demand
\begin_inset Quotes erd
\end_inset

 (also 
\begin_inset Quotes eld
\end_inset

Bücher auf Bestellung
\begin_inset Quotes erd
\end_inset

) anbieten.
 Der Vorteil besteht hier darin, dass sauber gedruckte und schön gebundene
 Buchausgaben mit ansprechendem Cover zu einem relativ erschwinglichen Preis
 bereits ab 1 Exemplar bestellt werden können.
 Optionen und Preise sind hier je nach Anbieter verschieden (z.B.
 Paperback vs Hardcover, Fadenbindung vs Klebebindung, wählbare Papiersorten
 und -dicke, verschiedene Formate), allen gemein ist jedoch in der Regel,
 dass ein so geannter 
\begin_inset Quotes eld
\end_inset

Buchblock
\begin_inset Quotes erd
\end_inset

 hochgeladen werden muss, welcher dem Mittelteil des Buches (= was sich
 zwischen den Buchdeckeln befindet) abdeckt.
\end_layout

\begin_layout Standard
Für diesen Buchblock kann prinzipiell ein mit VSTENO generiertes PDF verwendet
 werden, allerdings gibt es verschiedene Dinge zu beachten: (1) Der Buchblock
 enthält in der Regel zu Beginn mehrere leere Seiten und am Schluss ein
 Impressum (welches vermutlich in Normalschrift gedruckt werden soll; (2)
 Anders als bei losen, fortlaufenden Seiten gibt es in Büchern eine linke
 und eine rechte Seite, d.h.
 es muss ein so genannter Satzspiegel erstellt werden, der festlegt, wie
 weit die Seiten nach links oder nach rechts verschoben werden müssen, damit
 sie auch in der Mitte gut lesbar bleiben; (3) Der Buchblock muss natürlich
 genau dem Buchformat angepasst werden und auch die Auflösung muss dem Druck
 entsprechend gewählt werden; (4) Je nachdem muss die Schriftdicke und die
 Zeichenschattierung je nach Vergrösserung oder Verkleinerung angepasst
 werden, damit die Proportionen am Schluss 
\begin_inset Quotes eld
\end_inset

passen
\begin_inset Quotes erd
\end_inset

 (d.h.
 ein angenehmes Lesen ermöglichen).
 Kurzum: Man kann nicht einfach ein mit VSTENO generiertes PDF im A4-Format
 (Standard-Druckformat für Heimcomputer) nehmen und daraus ein Buch generieren,
 sondern es braucht hierfür gewisse Anpassungen, welche im folgenden zusammen
 mit einigen Tipps und Tricks beschrieben werden sollen:
\end_layout

\begin_layout Subsubsection*
Textformatierung
\end_layout

\begin_layout Standard
Bevor wir mit der Bucherstellung beginnen können, muss natürlich der Drucktext
 selber erst formatiert, d.h.
 z.B.
 in Abschnitte, Kapitel unterteilt oder mit speziellen Formathinweisen versehen
 werden.
 Hierfür können die Inline-Option-Tags (siehe dort) verwendet werden.
 Zur Illustration einige Beispiele von Formatierungen, wie sie z.B.
 in Karl Ettlingers 
\begin_inset Quotes eld
\end_inset

Der Widerstenstigen Zähmung
\begin_inset Quotes erd
\end_inset

, dem ersten Buch, das vollständig mit VSTENO editiert wurde, zur Anwendung
 kamen:
\end_layout

\begin_layout Itemize
Abschnitte können mit Zeilenumbrüchen realisiert werden (im folgenden Beispiel
 wird jeweils mit zwei <br>-Tags eine Leerzeile zwischen den Paragraphen
 eingefügt):
\end_layout

\begin_layout LyX-Code
Dies ist der erste Abschnitt
\end_layout

\begin_layout LyX-Code
<br> <br> Dies ist der zweite Abschnitt.
\end_layout

\begin_layout LyX-Code
<br> <br> Dies ist der dritte Abschnitt.
\end_layout

\begin_layout Itemize
Neue Seiten können mit dem Newpage-Tag eingefügt werden:
\end_layout

\begin_layout LyX-Code
Erste Seite
\end_layout

\begin_layout LyX-Code
<newpage> zweite Seite
\end_layout

\begin_layout LyX-Code
<newpage> dritte Seite
\end_layout

\begin_layout Itemize
Nützlich ist auch das Wechseln zwischen Kurzschrift und Langschrift (z.B.
 zur Wiedergabe von mundartlichen Passagen, welche in Langschrift geschrieben
 werden sollen):
\end_layout

\begin_layout LyX-Code
<@token_type=shorthand> Text in Kurzschrift.
\end_layout

\begin_layout LyX-Code
<@token_type=handwriting> Text wird in Langschrift.
\end_layout

\begin_layout LyX-Code
<@token_type=shorthand> Zurück zur Kurzschrift
\end_layout

\begin_layout Standard
Standardmässig wird für die Langschrift der Schrifttyp 1 verwendet.
 Weitere Schrifttypen können neu erstellt, mit dem TokenShifter skaliert
 und mit <@handwriting_marker=x> selektiert werden (x entspricht dem Schrifttyp)
\begin_inset Foot
status open

\begin_layout Plain Layout
Vordefiniert wurden die Typen '' = Basistyp gross (100%), 0 = Basistyp klein
 (50%), 1 = Standardtyp, passend zu Kurzschrift (Skalierung horizontal/vertikal
 = 50%/70%) .
 Der Basistyp gross wird mit <@handwriting_marker=''> (leer) definiert.
 Die Angabe des Langschrift-Schrifttyps ist auch im Eingabeformular MAXI
 unter 
\begin_inset Quotes eld
\end_inset

Zeichen
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Handwriting
\begin_inset Quotes erd
\end_inset

 möglich.
 
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Titel
\end_layout

\begin_layout Standard
Als wichtigste Grundeinstellung für ein Buch empfiehlt es sich im Eingabeformula
r Maxi die Optionen 
\begin_inset Quotes eld
\end_inset

Titel
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Einleitung
\begin_inset Quotes erd
\end_inset

 abzuwählen, da für ein Buch ein eigenes Cover generiert wird.
\end_layout

\begin_layout Subsubsection*
Hilfslinien
\end_layout

\begin_layout Standard
Ebenfalls empfiehlt es sich in einem Buch auf die Hilfslinien (Grundlinie
 sowie zusätzliche Linien oberhalb und unterhalb) zu verzichten.
\end_layout

\begin_layout Subsubsection*
Format
\end_layout

\begin_layout Standard
Das Standard-Druckformat eines aus dem Browser heraus generierten PDFs beträgt
 A4 (210x297mm).
 Falls später ein Buch im Format A5 (148x210mm) generiert werden soll, kann
 man die Standardeinstellungen verwenden (da die Seitenproportionen von
 A4 mit denen von A5 exakt identisch sind).
 Für andere typische Buchformate - z.B.
 dem klassichen Taschenbuchformat 120x190cm - empfiehlt es sich jedoch,
 den Druckbereich (Layoutgrössen und Ränder) so anzupassen, dass danach
 eine passende Verkleinerung erreicht werden kann.
 Mit anderen Worten: Obwohl der PDF-Export immer im Format A4 erfolgt, sollte
 dieses Dokument bereits die Stenogramme im passenden Format enthalten.
\end_layout

\begin_layout Standard
Für ein Buch im Format 120x190mm wurden z.B.
 folgende Einstellungen verwendet
\begin_inset Foot
status open

\begin_layout Plain Layout
Es werden nur die Einstellungen aufgeführt, welche von den Grundeinstellungen
 abweichen (die übrigen Einstellungen können also belassen werden).
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Layout: diese Option unter 
\begin_inset Quotes eld
\end_inset

Ausgabe
\begin_inset Quotes erd
\end_inset

 anwählen, zusätzlich 
\begin_inset Quotes eld
\end_inset

Vollseite
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

ohne Button
\begin_inset Quotes erd
\end_inset

 anwählen
\end_layout

\begin_layout Itemize
Breite: 680 / Höhe: 1020
\end_layout

\begin_layout Itemize
Ränder: L: 5 / R: 45 / O: 5 / U: 50
\end_layout

\begin_layout Standard
Anschliessend muss definiert werden, ob und wo die Seitenzahlen gedruckt
 werden sollen:
\end_layout

\begin_layout Itemize
Seitenzahlen: Position: x: 320 / y: 1020
\end_layout

\begin_layout Subsubsection*
Satzspiegel
\end_layout

\begin_layout Standard
Nun kann der Satzspiegel, d.h.
 die Links- und Rechtsverschiebung (Delta-X) des Textes in Abhängigkeit
 von der Seitenposition (links vs rechts bzw.
 gerade vs ungerade) definiert werden:
\end_layout

\begin_layout Itemize
Buch: diese Option anwählen
\end_layout

\begin_layout Itemize
Delta-X: gerade: 6 / ungerade: 40 
\end_layout

\begin_layout Standard
Ebenfalls kann hier angegeben werden, ob - und auf welchen Seiten - Zeilennummer
n gedruckt werden sollen.
 Besonders elegant ist es z.B.
 die Zeilennummern auf der linken Seite rechts (d.h.
 zum Bund hin) zu drucken:
\end_layout

\begin_layout Itemize
Zeilen: gerade: 
\begin_inset Quotes eld
\end_inset

ein
\begin_inset Quotes erd
\end_inset

 anwählen / ungerade: 
\begin_inset Quotes eld
\end_inset

ein
\begin_inset Quotes erd
\end_inset

 nicht anwählen
\end_layout

\begin_layout Itemize
Wert (Position): gerade: 660 / ungerade: 0
\end_layout

\begin_layout Standard
Die Idee dieser Optionen ist es, dass der weiter oben durch die Ränder definiert
e Textbereich auf geraden (= linken) Seiten um 6 Pixel nach rechts und auf
 ungeraden (= rechten) Seiten um 40 nach rechts verschoben wird.
 Zur Überprüfung kann abschliessend der Aussenrand (auf der ungeraden /
 rechten Seite rechts, auf der geraden / linken Seite links) gemessen werden:
 Diese Abstände sollten gleich sein! Ebenfalls zu beachten ist, dass der
 Text nur innerhalb des druckbaren Bereichs (unter Layout definiert) verschoben
 werden kann.
\end_layout

\begin_layout Subsubsection*
Strichdicke
\end_layout

\begin_layout Standard
Als letztes ist die Strichdicke der Zeichen zu definieren.
 Die Ausgangssituation ist auch hier, dass die Standard-Strichdicke (Wert:
 1.35) für das Format A4 (210x297mm) im doppelseitigen Querformat definiert
 wurde, d.h.
 eigentlich im Format A5 (148x210mm).
 Da das Taschenbuchformat (120x190mm) im Vergleich zu A5 höher ist als breit,
 wird für den Verkleinerungsfaktor die Seitenbreite ausschlagebend sein:
\end_layout

\begin_layout Standard
Verkleinerungsfaktor: 148mm => 120mm => Faktor: 81%
\end_layout

\begin_layout Standard
Mit anderen Worten: Da wir das PDF auf 81% verkleinern werden, müssen wir
 die Strichdicke vorgängig um Umkehrfaktor 1:0.81 = 1.23 vergrössern.
 Wir berechnen somit den Wert 1.35 * 1.23 = 1.66, runden diesen auf 1.70 und
 geben diesen unter 
\begin_inset Quotes eld
\end_inset

Zeichen
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Dicke
\begin_inset Quotes erd
\end_inset

 ein.
\end_layout

\begin_layout Subsubsection*
Schattierung
\end_layout

\begin_layout Standard
Wenn wir die Strichdicke erhöhen, dann korrigiert VSTENO automatisch auch
 die Schattierung proportional.
 Im Prinzip könnte man also einfach den Standard-Wert belassen.
 Dennoch ergeben sich etwas schönere Darstellungen, wenn wir den Wert nicht
 ganz proportional mitkorrigieren.
 Wenn wir unter 
\begin_inset Quotes eld
\end_inset

Zeichen
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Schattierung
\begin_inset Quotes erd
\end_inset

 den Wert 1 durch 0.85 ersetzen, bedeutet dies, dass die Schattierung nur
 mit einem Faktor von 85% mitskaliert wird (in absoluten Werten werden also
 statt 1:0.81 = 1.23 nur 1.23 * 0.85 = 1.046, also nur minim dicker als im Format
 A5).
 
\end_layout

\begin_layout Subsubsection*
Imponderabilien
\end_layout

\begin_layout Standard
All die angegebenen Werte können nur Richtangaben sein, da verschiedene
 weitere Faktoren, das Resultat verändern können: Browser können je nachdem
 eigene Druckränder festlegen und das generierte PDF ihrerseits skalieren
 oder nicht.
 Ebenfalls kann der gewählte Drucker oder Druckdienst einen wesentlichen
 Einfluss auf das Endresultat hat: Strichdicken, die beim einen Anbieter
 relativ 
\begin_inset Quotes eld
\end_inset

fett
\begin_inset Quotes erd
\end_inset

 gedruckt werden, kommen bei einem anderen Anbieter relativ dünn daher.
 Auch wenden diese Druckservice zum Teil ihrerseits wieder Druckoptimierungen
 an, welche das Resultat verfälschen können.
 Am besten ist es deshalb, einen ersten Probedruck zu bestellen und die
 Parameter dann weiter anzupassen.
\end_layout

\begin_layout Subsubsection*
Buchblock
\end_layout

\begin_layout Standard
Sobald das A4-Dokument generiert ist, kann man sich ans Erstellen des Buchblocks
 machen.
 Wie bereits erwähnt, enhält dieser in der Regel am Anfang zuerst mehrere
 leere Seiten oder einen zusätzlichen Buchtitel (oder eine Widmung).
 Es empfiehl sich, diese Seiten separat (z.B.
 mit OpenOffice) zu erstellen und sie dann mithilfe von GhostScript (gs)
 aneinanderzufügen.
 Der Buchblock zu 
\begin_inset Quotes eld
\end_inset

Der Widerspenstigen Zähmung
\begin_inset Quotes erd
\end_inset

 zum Beispiel enthält:
\end_layout

\begin_layout Itemize
2 leere Seiten zu Beginn
\end_layout

\begin_layout Itemize
1 Seite mit einem Titelblatt
\end_layout

\begin_layout Itemize
eine weitere leere Seite
\end_layout

\begin_layout Standard
Erst nach diesen 4 Seiten beginnt der eigentliche Stenotext (231 Seiten
 mit Seitennummerierung).
 Die letzte, ungerade Seite (mit der aufgedruckten Seiten 231, welche im
 Buchblock der Seite 235 entspricht) befindet sich auf der rechten Seite.
 Um nun noch das Impressum anzufügen, werden wiederum zusätzliche Seiten
 am Schluss angefügt:
\end_layout

\begin_layout Itemize
1 leere Seite (hintere Seite zu 231 bzw.
 235, die im Buch links erscheint)
\end_layout

\begin_layout Itemize
1 Seite Impressum
\end_layout

\begin_layout Standard
Je nach Bedarf werden nun noch weitere Seiten eingefügt.
 Wie viele hängt u.U.
 auch vom gewählten Buchtyp ab: Klebebindungen erlauben Buchblöcke, die
 durch 2 teilbar sein müssen.
 Fadenbindung hingegen erfordern Buchblöcke, die durch 4 teilbar sind.
\end_layout

\begin_layout Subsubsection*
GhostScript
\end_layout

\begin_layout Standard
Für die Erstellung des soeben skizzierten Buchblocks reichen die Mittel
 von VSTENO nicht mehr aus und wir greifen deshalb auf weitere, frei verfügbare
 Programme zurück.
 Einerseits ist dies OpenOffice (zur Erstellung von Titelblättern, Impressums,
 leeren Seiten etc.), andererseits GhostScript, ein sehr mächtiges Programm,
 das es uns erlaubt, PDF zu verändern.
 Im folgenden werden wir zwei Funktionen und die enstprechenden Kommandozeilenbe
fehle unter Linux vorstellen:
\end_layout

\begin_layout Standard
(1) PDFs susammenfügen: Als erstes fügen wir alle benötigten Seiten zum
 definitiven Buchblock zusammen.
 Diese Operation erfolgt im Format A4.
 Mit dem folgenden Befehl fügen wir die PDFs A und B (in dieser Reihenfolge)
 zu C zusammen:
\end_layout

\begin_layout LyX-Code
gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite 
\end_layout

\begin_layout LyX-Code
-sOutputFile=C.pdf A.pdf B.pdf
\end_layout

\begin_layout Standard
Diesen Vorgang mehrmals wiederholen bis der gesamte Buchblock im Format
 A4 vorliegt.
\end_layout

\begin_layout Standard
(2) PDF auf das Endformat (120x190mm) verkleinern: Wir verkleinern hier
 das Dokument buchblock_a4.pdf zum definitivem buchblock_120x190mm.pdf:
\end_layout

\begin_layout LyX-Code
gs -sDEVICE=pdfwrite -r600 -g2834x4488 -dPDFFitPage 
\end_layout

\begin_layout LyX-Code
-o buchblock_120x190mm.pdf buchblock_a4.pdf
\end_layout

\begin_layout Standard
Der Export erfolgt hier mit 600dpi (Option -r600), was einer Punktgrösse
 von 2834x4488 entspricht (Option -g2834x4488).
 Falls andere Druckqualitäten gewünscht werden, müssen diese Parameter entsprech
end angepasst werden (also die Hälfte für -r300 bzw.
 das Doppelte für -r1200).
 
\end_layout

\begin_layout Subsubsection*
Buchdeckel
\end_layout

\begin_layout Standard
Der Buchdeckel ist in der Regel eine weitere (zweite) PDF-Datei, welche
 eingereicht werden muss.
 Sie enhält in der Regel gleich die Vorderseite, den Buchrücken und die
 Rückseite mit folgenden Angaben:
\end_layout

\begin_layout Itemize
Vorderseite (rechts): Autor, Titel + allfällige weitere Angaben zum Buch
\end_layout

\begin_layout Itemize
Buchrücken (Mitte): Autor und - oder nur - Buchtitel
\end_layout

\begin_layout Itemize
Rückseite (links): Klappentext + allfällige Verkaufsnummern (BOD-Nummer,
 ISBN-Nummer)
\end_layout

\begin_layout Standard
Im Unterschied zum Buchblock gibt es hier je nach Anbieter verschiedene
 Varianten und das Format kann je nachdem etwas tricky sein: Zum Beispiel
 muss für die Breite der Buchrücken (= Dicke des Buches) miteinberechnet
 werden.
 Die Dicke des Buches wiederum hängt ab von der Seitenzahl und von der gewählten
 Papierart (z.B.
 80gr/m2 oder 90gr/m2) ab.
 Die meisten Anbieter liefern nach dem Hochladen des Buchblockes Angaben
 darüber, welche Masse das Buchcover haben muss.
 Manche vereinfachen die Sache auch dadurch, dass Sie einen Buchdeckel-Generator
 (oft sogar mit der Option von fixfertigen Design-Vorschlägen) zur Verfügung
 stellen.
\end_layout

\begin_layout Part*
Versionen
\end_layout

\begin_layout Section*
Entwicklung
\end_layout

\begin_layout Standard
Um den Überblick über die aktuelle Version und die dokumentierten (bzw.
 nicht dokumentierten) Funktionen zu gewährleisten, hier ein kurzer, historische
r Abriss über die Entwicklung von VSTENO:
\end_layout

\begin_layout Standard
VSTENO startete im April 2018 prinzipiell als Proof of Concept.
 Es sollte also erst einmal überprüft werden, wie und ob ein Stenografie-Satzsys
tem überhaupt umsetzbar wäre.
 In dieser Phase wurden grundsätzliche Konzepte festgelegt: Verwendung des
 Grafikformates SVG, Modellierung der Stenografiezeichen als Bezier-Kurven
 (Splines), Implementierung in PHP und Benutzung des Programmes via Webbrowser,
 spätere Integrierung einer Datenbank.
\end_layout

\begin_layout Standard
Im Mai 2018 gelangte eine erste Version auf Github
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno"

\end_inset


\end_layout

\end_inset

.
 Ziel fortan: Das Programm unter der GPL publik zu machen und sauber zu
 versionieren.
\end_layout

\begin_layout Standard
Im August 2018 war das Programm so weit fortgeschritten, dass eine erste
 offizielle Dokumentation geschrieben wurde
\begin_inset Foot
status open

\begin_layout Plain Layout
Anwender/innen-Tutorial (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset

) vom 11.
 August 2018 und Tutorial für Linguist/innen (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/tutorial_linguistinnen.pdf"

\end_inset

) vom 18.
 August 2018.
\end_layout

\end_inset

.
 Bereits damals konnten im Prinzip eigene Stenografie-Systeme umgesetzt
 werden, allerdings mussten die Daten direkt als Variablen in den PHP-Code
 integriert werden.
\end_layout

\begin_layout Standard
Bis zu diesem Zeitpunkt (August) konnte VSTENO nur regelmässige Stenogramme
 generieren, d.h.
 Wörter, die automatisiert von der Langschrift in die Kurzschrift übertragen
 werden.
 Ausnahmen - also Wörter, die von den Regeln abweichen - konnten nicht oder
 nur sehr rudimentär (mithilfe eines Trickster
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Trickster enthielt spezielle Regeln für unregelmässige Wörter.
 Regeln für Unregelmässiges - das scheint schon vom Prinzip her widersinnig.
 Kein Wunder also, dass der Trickster ein problematisches Konzept war und
 in VSTENO während geraumer Zeit sein (un)regelrechtes Unwesen trieb ...
\end_layout

\end_inset

) berücksichtigt werden.
 Aus diesem Grund erhielt VSTENO im September 2018 eine Datenbankanbindung.
 Abweichende Wörter konnten fortan in einem Wörterbuch hinterlegt werden.
\end_layout

\begin_layout Standard
Im November schliesslich konnte sich VSTENO endlich vom PHP-Code lösen:
 Eigene Stenografie-Systeme konnten nun mit einer eigenen Formelsprache
 definiert und als externe ASCII-Datei abgespeichert werden.
 Die Integration eines Parsers stellte einen wesentlichen Schritt in der
 Entwicklung einer abstrakten Steno Engine dar und legte den Grundstein
 für die Version 0.1.
\end_layout

\begin_layout Standard
Im Anschluss wäre es eigentlich möglich gewesen, diese Steno Engine weiterzuentw
ickeln, allerdings hatte sich im Laufe der Zeit gezeigt, dass der gewählte
 Ansatz auch Mängel aufwies: Schattierungen der Stenogramme waren nur durch
 abrupte Übergänge realisierbar (kein Anti-Aliasing, Treppenbildung), ebenso
 wurden gewisse Stenozeichen durch den Neigungsalgorithmus verformt.
 Es entstand deshalb die Idee, eine neue Steno Engine zu entwickeln: die
 Steno Engine 1 (SE1) sollte nur noch Bugfixes erhalten und später durch
 eine bessere Steno Engine 2 (SE2) ersetzt werden.
 
\end_layout

\begin_layout Standard
Man sagt gemeinhin, dass man in der Regel mit 20% Aufwand 80% Erfolg erreicht.
 Und genau dies traf auf den geplanten Sprung von der SE1 zur SE2 zu.
 Während dreier Monate (von November bis Januar) schrieb ich im Hinlick
 auf die SE2 zuerst an einem grafischen Zeichen-Editor namens VPAINT in
 JavaScript
\begin_inset Foot
status open

\begin_layout Plain Layout
VSTENO und etwaige Hilfsprogramme sollten unbedingt via Webbrowser benutzbar
 sein.
\end_layout

\end_inset

.
 Und je ausgefeilter VPAINT wurde, umso mehr begann die SE2 zu wuchern:
 Im Januar machte der Quellcode von VPAINT bereits die halbe Grösse des
 ursprünglichen PHP-Codes von VSTENO aus.
 Dabei war dies erst der Editor und die Implementierung der SE2 in PHP noch
 in weiter Ferne ...
 
\end_layout

\begin_layout Standard
Dies wurde insofern zu einem Dilemma, als dass jede linguistische Weiterentwickl
ung des Systems Stolze-Schrey blockiert war: Wenn die SE1 entfernt werden
 sollte, machte es keinen Sinn, die bereits vorhandenen Zeichen und Regeln
 weiterzuentwickeln (da sie für die SE2 nicht mehr gültig sein würden);
 andererseits konnten keine neuen Zeichen und Regeln definiert werden, solange
 die SE2 nicht fertig war.
\end_layout

\begin_layout Standard
Im Januar hielt ich es schliesslich für eine gute Idee, dem Dilemma durch
 die magischen Worte Backports und Rückwärtskompabilität zu entkommen: Es
 sollten also die wichtigsten Features der SE2 auf die SE1 rückportiert
 werden (damit insbesondere auch der Editor VPAINT für die SE1 verwendet
 werden könnte) und die neue SE1 (nun mit dem Namen SE1 rev1) sollte vollständig
 rückwärtskompatibel (zur ursprünglichen SE1 rev0) sein.
 Die SE1 rev1 sollte also das 
\begin_inset Quotes eld
\end_inset

Beste aus zwei Welten
\begin_inset Quotes erd
\end_inset

 vereinen - die aufgebretzelte eierlegende Wollmichsau, gewissermassen.
\end_layout

\begin_layout Standard
Aber schön ist bekanntlich (nur) die Theorie! Im Februar wurde klar, dass
 die Rückwärtskompatibilität sehr wackelig war und die zum Teil gewagten
 Backports die SE1 aus entwicklungstechnischer Sicht auf ein Alpha-Stadium
 zurückwarfen.
 Was nichts anderes bedeutete als: Mehr Zeit für Bugfixes zu investieren.
 Was nichts anderes bedeutete als: Wieder keine Zeit, um die Zeichen und
 Regeln für Stolze-Schrey weiterzuentwickeln.
 So traf ich Mitte Februar zwei Entscheidungen: (1) die SE2 und die SE1
 rev1 wurden mit sofortiger Wirkung komplett deaktiviert und die Entwicklung
 radikal und für unbestimmte Zeit auf Eis gelegt, d.h.
 und bis zur offiziellen Release der Version 0.1 soll nur noch - und ausschliessl
ich - die SE1 rev0 weiterentwickelt werden; (2) die SE1 rev0 wird nicht
 (auch in Zukunft nicht) aus VSTENO verschwinden: Dazu ist sie trotz ihrer
 Nachteile zu gut und zu 
\begin_inset Quotes eld
\end_inset

rock solid
\begin_inset Quotes erd
\end_inset

!
\end_layout

\begin_layout Standard
Im Juli 2019 wurde die erste Version 0.1 mit Namen 
\begin_inset Quotes eld
\end_inset

Hephaistos
\begin_inset Quotes erd
\end_inset

 veröffentlicht, welche die Funktionalitäten der SE1rev0 enthielt.
 In der entsprechenden Dokumentation wurden nur Funktionalitäten aus der
 SE1rev0 dokumentiert.
\end_layout

\begin_layout Standard
Im November 2019 wurde die Version 0.2 mit Namen 
\begin_inset Quotes eld
\end_inset

Ariadne
\begin_inset Quotes erd
\end_inset

 veröffentlicht, welche erstmals sämtliche Funktionalitäten der SE1rev1
 umsetzt.
 In der vorliegenden Dokumentation werden diese neuen Funktionalitäten beschrieb
en.
 Die SE1rev1 ist vollständig rückwärtskompatibel zur SE1rev0.
\end_layout

\begin_layout Standard
Das Programm VPAINT wird weiterhin nur als Hilfsinstrument zur visuellen
 und interaktiven Darstellung der Stenozeichen erläutert.
 Von der Verwendung von VPAINT zur Speicherung von Zeichen und der Nutzung
 von Funktionalitäten, die zur SE2 oder zur SE1 rev1 gehören,
\begin_inset Foot
status open

\begin_layout Plain Layout
Sofern sie nicht deaktiviert sind.
 Die meisten Funktionen der SE2 und der SE1 rev1 sind deaktiviert.
 Dennoch ist die Speicher-Funktion von VPAINT auch in der Version 0.1rc aktiv
 (da der Backport der SE1 rev1 indirekt funktioniert, d.h.
 die Zeichendefinitionen werden von VPAINT in den Text-Editor der rev0 exportier
t, von wo aus sie von der ursprünglichen SE1 rev0 abgespeichert werden,
 als handelte es sich um Daten der SE1 rev0 - da VSTENO in der Version 0.1rc
 nur Daten der SE1 rev0 versteht, wird davon DRINGEND abgeraten: Inkompatibiltät
en und korrupte Zeichendefinitionen sind garantiert).
\end_layout

\end_inset

 wird dringend abgeraten.
 VPAINT wird in Zukunft voraussichtlich nicht weiterentwickelt, da es grundsätzl
ich auf der SE2 basiert, die aufgrund verschiedener konzeptioneller Mängel,
 kaum umgesetzt werden wird.
\end_layout

\begin_layout Standard
Im März 2020 wird die Version 0.3 (Hyperion) veröffentlicht, die - wie bereits
 angekündigt - die voraussichtlich zweitletzte Version von VSTENO sein wird.
 Im Anschluss daran soll, wie im Vorwort dargelegt, die Entwicklung prinzipiell
 auf Eis gelegt und vor allem praktische Projekte mit VSTENO (stenografische
 Modelle, gedruckte Steno-Lektüre) weiterverfolgt werden.
\end_layout

\begin_layout Part*
Steno Engines
\end_layout

\begin_layout Standard
Wie bereits erläutert soll in dieser Dokumentation grundsätzlich nur auf
 die SE1 rev0 eingegangen werden.
 Dennoch hier ganz kurz die wesentlichen Unterschiede zwischen den Versionen
\begin_inset Foot
status open

\begin_layout Plain Layout
Weiteres wird im Dokument https://www.vsteno.ch/docs/stenoengines.pdf erläutert.
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Ursprüngliche Steno Engine 1 (SE1 rev0): Hier wird die Mittellinie der Zeichen
 anhand von aufeinanderfolgenden Bezier-Kurven (so genannte Splines) modelliert.
 Dickere und dünnere Stellen werden durch dickere und dünnere Striche dargestell
t.
 Der Übergang von einer Strichdicke zur nächsten erfolgt abrupt (diskontiuierlic
h), was je nachdem eine Treppenbildung zur Folge hat.
 Die SE1 neigt Zeichen ausschliesslich durch horizontale Punktverschiebung,
 was zu einer Änderung der Winkel führt, sodass die Zeichen - je nach Art
 und Beschaffenheit - verformt werden.
 Die einzige Möglichkeit, mit der SE1 rev0 schöne Zeichen zu modellieren,
 besteht darin, das Zeichen direkt in der vorgesehenen Neigung zu entwerfen
 (VSTENO verwendet im Fall der Grundschrift Stolze-Schrey 60 Grad).
\end_layout

\begin_layout Itemize
Steno Engine Revision 1 (SE1 rev1): Verwendet die gleiche Mittellinienmodellieru
ng und horizontale Punktverschiedbung wie die SE1 rev0.
 Zwei Features der SE2 wurden jedoch als Hacks rückportiert: (1) parallele
 Rotationsachsen, (2) orthogonale und proportionale Punktdrehung.
 Zusätzlich wurde in der Version 0.2 
\begin_inset Quotes eld
\end_inset

Ariadne
\begin_inset Quotes erd
\end_inset

 auch eine Umrissmodellierung (ähnlich der SE2) in die SE1rev1 integriert.
 Bei diesen Rückportierungen reden wir ganz klar von 
\begin_inset Quotes eld
\end_inset

Hacks
\begin_inset Quotes erd
\end_inset

: Die SE1 war nicht dafür ausgelegt, solche Funktionalitäten zu integrieren!
 Beispielsweise werden in der SE1 rev0 nicht einzelne Zeichen geneigt, sondern
 es werden zunächst alle benötigten Zeichen aneinandergefügt und danach
 das ganze Wort geneigt (unter Verwendung der horizontalen Punktverschiebung).
 Die einzige Möglichkeiten, die Funktionen (1) und (2) zu integrieren, besteht
 deshalb darin, (a) die Zeichen einzeln zu neigen (wobei die SE1 rev0 immer
 noch glaubt, es seien nicht geneigte Zeichen) und (b) die Zeichen dann
 zusammenzufügen und nicht mehr zu neigen (die SE1 rev0 wendet dann eine
 Neigung um 0 Grad an).
 Die Umsetzung von (a) und (b) impliziert weitere Komplikationen: Koordinaten
 für parallele Rotationsachsen und für neue Punkttypen müssen im starren
 Datengerüst der SE1 rev0 untergebracht werden.
 Da dort praktisch kein freier Platz mehr besteht, müssen die zusätzlichen
 Informationen zum Teil bitweise mit bestehenden Elementen verknüpft (und
 nachher wieder ausgelesen werden).
 
\end_layout

\begin_layout Itemize
Steno Engine 2: Hier wird ausgehend von einer Mittellinie (wie in der SE1)
 ein Umriss des Zeichens modelliert.
 Jedes Zeichen ist also eine Fläche, die von Bezier-Kurven (Splines) umschlossen
 wird.
 Dadurch können viel sauberere Übergänge gestaltet und die Treppenbildung
 wie in der SE1 vermieden werden (allerdings zum Preis einer wesentliche
 grösseren Komplexität).
 Ebenfalls bietet die SE2 nebst der horizontalen Punktverschiebung (wie
 in der SE1) zwei weitere Möglichkeiten, Zeichen zu neigen: so genannte
 (1) orthogonale und proportionale Knots (Punkte).
 Beide Punkte stehen vertikal auf einer Rotationsachse (und rotieren mit
 ihr), wobei bei den orthogonalen Knots die Abstände vom Rotationspunkt
 und zur Rotationsachse nicht korrigiert werden (das Zeichen verliert dann
 durch die Neigung an Höhe, ausserdem können sich gewisse Punkte durch die
 Drehung unter die Grundlinie verschieben).
 Proportionale Knots korrigieren den Abstand vom Rotationspunkt (das Zeichen
 wird bei der Drehung also länger, was z.B.
 bedeutet, dass der Kopfpunkt eines proportional modellierten Punktes exakt
 auf der Schreiblinie bleibt).
 Da bestimmte Teile gewisser Zeichen mehrere Rotationsachsen haben können,
 offeriert die SE2 auch die Möglichkeit für jeden orthogonalen oder proportional
en Knot eine parallele Rotationsachse zu definieren.
 Die Funktionalitäten der SE2 funktionieren in VPAINT zu ca.
 95%, dennoch ist die SE2 bis heute nicht als PHP-Code innerhalb von VSTENO
 implementiert.
 Leider zeigt sich, dass die SE2 ihre Erwartungen nicht erfüllt: Zum einen
 führt sie punkto Umrissmodellierung eine Komplexität ein, die schwierig
 zu handlen ist, zum anderen wirft sie Funktionalitäten (wie insbesonder
 TokenCombiner und TokenShifter) über Bord, die die Generierung von Zeichen
 wesentlich vereinfach.
 Die SE2 (und das Programm VPAINT) werden deshalb nicht (weiter)entwickelt,
 sondern 
\begin_inset Quotes eld
\end_inset

eingemottet
\begin_inset Quotes erd
\end_inset

.
 Stattdessen soll in einer Neuimplementierung eine SE3 ohne grafischen Editor
 angestrebt werden.
 
\end_layout

\begin_layout Part*
Linguistischer Teil
\end_layout

\begin_layout Standard
In diesem Teil geht es darum, wie Sie mithilfe von VSTENO ein eigenes Stenografi
e-System definieren können.
 VSTENO verwendet hierfür eine eigene Formelsprache: Einerseits müssen die
 Zeichen definiert werden, andererseits benötigt VSTENO auch Regeln, anhand
 derer es einen Langschrifttest zu einer Folge von Stenogrammen umschreiben
 kann.
 Wichtig: Sie müssen nicht programmieren können, um solche Regeln zu erstellen.
 Allerdings müssen sie die Formelsprache von VSTENO beherrschen: Diese besteht
 aus einer speziellen Syntax, um die Zeichen zu definieren, sowie einem
 an REGEX angelehnten Wenn-Dann-Parser (der jeden Text, Wort für Wort und
 Zeichen für Zeichen umschreibt).
\end_layout

\begin_layout Standard
Dies alles wird im Folgenden detailliert und anhand von Beispielen aus dem
 System Stolze-Schrey (welches der Grundversion von VSTENO standardmässig
 beiliegt) erklärt.
 Sie können die Beispiele auch selber ausprobieren, indem Sie auf der Webseite
 www.vsteno.ch ein Benutzerkonto anlegen und das Modell custom abändern oder
 neu erstellen.
\end_layout

\begin_layout Section*
Benutzerkonto
\end_layout

\begin_layout Standard
Gehen Sie auf die Seite www.vsteno.ch und wählen Sie aus der linken Navigationslei
ste Konto anlegen.
 Vervollständigen Sie die Angaben (Benutzername und Passwort müssen mindestens
 8 Zeichen lang sein) und lösen Sie das Captcha
\begin_inset Foot
status open

\begin_layout Plain Layout
Falls Sie das System Stolze-Schrey nicht kennen, melden Sie sich bei mir
 via E-Mail (m.maci@gmx.ch).
 Gerne erstelle ich Ihnen ein persönliches Konto, mit dem Sie anschliessend
 ihr eigenes Stenografie-System definieren können.
 Die Abfrage eines Captchas ist notwendig, damit nur stenokundige Benutzer/innen
 Zugang zu den Datenbanken erhalten.
\end_layout

\end_inset

.
 Wenn Sie zum ersten Mal ein Konto eröffnen, werden Sie anschliessend direkt
 eingeloggt und können zwischen dem Stenografie-System (in VSTENO Modell
 genannt) Standard und Custom wählen.
 Wählen Sie custom, indem Sie auf den Knopf standard ganz links unten klicken.
 Sie arbeiten nun mit dem custom Modell und können dieses editieren (im
 Unterschied zum Standard-Modell, das nicht editierbar ist).
\end_layout

\begin_layout Standard
Detailliertere Informationen zum Anlegen eines Kontos inklusive grafischer
 Screen\SpecialChar \-
shots finden Sie auch unter: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/mitmachen_bei_vsteno.pdf"

\end_inset

.
\end_layout

\begin_layout Subsection*
Bildschirm
\end_layout

\begin_layout Standard
Das Anlegen eines Benutzerkontos hat auch den Vorteil, dass Sie ab Version
 0.3 (Hyperion) die Yinyang-Funktion verwenden können, mit der zwischen schwarzer
 und weisser Schrift bzw.
 weissem und schwarzem Hintergrund umgeschaltet werden kann.
 Bei längerem Arbeiten ist der schwarze Modus sehr zu empfehlen, deshalb
 ist dies der Standard-Modus, wenn Sie sich einloggen.
 Zum Wechseln zwischen den zwei Modi können Sie anschliessend einfach auf
 den Navigations-Link Yinyang im linken Bereich klicken.
 Zum Ausdrucken muss zwingend der Standard-Modus (schwarze Schrift auf weissem
 Hintergrund verwendet werden).
\end_layout

\begin_layout Section*
Stenografische Zeichen
\end_layout

\begin_layout Standard
Sie sind also ein/e passionierte/r Stenograf/in, schreiben ein System, das
 VSTENO noch nicht beherrscht (z.B.
 DEK, Stiefografie oder Varianten von Stolze-Schrey wie Eil-/Redeschrift
 oder andere Sprachen wie Französisch, Spanisch, Englisch), und möchten
 gerne wissen, wie Sie VSTENO dazu bringen, Texte in diesem System auszugeben.
 
\end_layout

\begin_layout Standard
Als erstes müssen Sie VSTENO hierfür beibringen, wie die Zeichen in Ihrem
 System aussehen.
 Dies ist durchaus grafisch zu verstehen, das heisst: Sie müssen VSTENO
 beibringen, welche Linien es schreiben muss, damit ein Zeichen so aussieht,
 wie es aussehen soll.
 Auch können Zeichen unter Umständen (je nach System) schattiert werden
 können.
 
\end_layout

\begin_layout Standard
Dies alles müssen Sie VSTENO beibringen.
 In gewissem Sinne werden Sie also zu einem/r Stenografie-Lehrer/in - und
 VSTENO wiederum ist Ihr/e Stenografie-Schüler/in.
 Das einzige, was Sie nun noch brauchen für Ihren Unterricht, ist die (gemeinsam
e) Sprache: Also, wie bringen Sie VSTENO bei, wo es wann den Stift ansetzen
 und wie es ihn bewegen (und wie fest es 
\begin_inset Quotes eld
\end_inset

drücken
\begin_inset Quotes erd
\end_inset

) muss, damit die gewünschten Zeichen entstehen?
\end_layout

\begin_layout Standard
Vermutlich kennen Sie jene Kindermalbücher mit Zeichnungen, die aus vielen
 nummerierten Punkten bestehen.
 Die Punkte dienen dazu, dass ein Kind, das u.U.
 noch nicht so gut zeichnen kann, relativ simpel einen Elefanten, eine Giraffe
 (oder was immer vorgegeben ist) zeichnen kann.
 Die Zeichnung entsteht, indem man den Stift bei Punkt 1 ansetzt und dann
 alle folgenden Punkte verbindet.
 
\end_layout

\begin_layout Standard
Die gute Nachricht ist nun: VSTENO funktioniert im Prinzip genau gleich!
 Jedes Zeichen ist als eine 
\begin_inset Quotes eld
\end_inset

Folge von Punkten
\begin_inset Quotes erd
\end_inset

 definiert.
 Der einzige Unterschied zu den Kinderzeichnungen besteht darin, dass VSTENO
 die Punkte nicht einfach mit einer geraden Linie verbindet, sondern so
 genannte Bezier-Kurven durch diese Punkte legt - und zwar so, dass die
 Übergänge je nachdem möglichst 
\begin_inset Quotes eld
\end_inset

sanft
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

spitz
\begin_inset Quotes erd
\end_inset

 verlaufen.
\end_layout

\begin_layout Subsection*
Ein erstes Zeichen ...
\end_layout

\begin_layout Standard
Aber der Reihe nach.
 Beginnen wir mit einem ganz einfachen Zeichen: dem 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 in der Grundschrift Stolze-Schrey.
 Dieses besteht aus nur einem Strich 
\begin_inset Quotes eld
\end_inset

von oben nach unten
\begin_inset Quotes erd
\end_inset

.
 D.h.
 wir können zwei Punkte definieren - einen 
\begin_inset Quotes eld
\end_inset

oberen
\begin_inset Quotes erd
\end_inset

 und einen 
\begin_inset Quotes eld
\end_inset

unteren
\begin_inset Quotes erd
\end_inset

 - und diese dann durch eine gerade Linie verbinden.
 Der entsprechende Code hierfür sieht folgendermassen aus:
\end_layout

\begin_layout LyX-Code
"T" => { /*header*/ 6, 0.5, 0, 0, 3, 3, 0, "" 
\end_layout

\begin_layout LyX-Code
/**/ ,"","","","",0,0,0,0, 
\end_layout

\begin_layout LyX-Code
/**/ 0,0,0,0,0,0,0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Nun gut: Auf den ersten Blick sieht das vielleicht nun doch relativ verwirrlich
 aus, deshalb vereinfachen wir die Sache gleich noch etwas, indem wir das,
 was wir für das Verständnis nicht benötigen, weglassen.
 Ausserdem können Sie alles zwischen den Zeichen /* und */ ignorieren: Hierbei
 handelt es sich um Kommentare, die für VSTENO keine weitere Bedeutung haben
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine weitere Möglichkeit sind Kommentare mit //: diese sind im Unterschied
 zu /* und */ jedoch auf eine Zeile beschränkt.
\end_layout

\end_inset

.
 In diesem Fall weisen die Kommentare /*header*/ und /*data*/ darauf hin,
 dass es sich bei den folgenden Zahlen um Header-Informationen (= allgemeine
 Angaben zum Zeichen) und um eigentliche Daten (hier: Punkte oder 
\begin_inset Quotes eld
\end_inset

Knoten
\begin_inset Quotes erd
\end_inset

, die das Zeichen definieren) handelt.
 Wenn wir den Header vorerst mal weglassen, ergibt sich:
\end_layout

\begin_layout LyX-Code
"T" => { /*data*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Damit verbleiben also zwei so genannte Datentupel - eines nach /*data*/
 und eines nach /**/, die je aus 8 Werten bestehen.
 Das erste Datentupel, welches dem ersten Punkt entspricht, enthält die
 folgenden Werte:
\end_layout

\begin_layout LyX-Code
 0, 20,  0,  1, 1.0,  0,  0,  0
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1,  th, dr, d2, t2 
\end_layout

\begin_layout Standard
Auf der zweiten Zeile habe ich die Bedeutung der einzelnen Werte notiert.
 Wichtig sind für uns im Moment vor allem die Werte x1 und y1, welche die
 Koordinaten des ersten Punktes (0,20) markieren.
 Der Vollständigkeit halber dokumentieren wir aber gleich alle Bedeutungen
\begin_inset Foot
status open

\begin_layout Plain Layout
Nur, bitte, tun Sie mir den Gefallen und vergessen Sie Werte, die wir nicht
 benötigen, gleich wieder; wir haben später Gelegenheit, darauf zurückzukommen!
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
x1, y1: x- und y-Koordinate des Punktes
\end_layout

\begin_layout Itemize
t1, t2: Spannungen (tensions) im Anschluss an den Punkt (t1) und vor dem
 folgenden Punkt (t2)
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Bedeutung der tension wird später erklärt.
 Sie gibt bei einer Bezier-Kurve an, ob der Punkt 
\begin_inset Quotes eld
\end_inset

spitz
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

sanft
\begin_inset Quotes erd
\end_inset

 (rund) verbunden werden soll.
 Der Wert 0 gibt hier an, dass die Verbindung spitz sein soll, wie es das
 Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 verlangt.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
d1, d2: Art des Punktes (der Wert d1 = 1 bedeutet, dass es sich um einen
 so genannten entry-point handelt - also den ersten Punkt des Zeichens).
\end_layout

\begin_layout Itemize
th: Dicke (thickness) - dieser Wert wird vor allem für Schattierungen verwendet
 und hat im Moment keine weitere Bedeutung.
\end_layout

\begin_layout Itemize
dr: Der so genannte draw-Wert (Zeichnungswert), der bestimmt, ob der Punkt
 verbunden oder abgesetzt gezeichnet werden soll (der Wert 0 bedeutet, dass
 der Punkt verbunden wird).
\end_layout

\begin_layout Standard
Es mag sein, dass die vielen Informationen Ihnen im Moment wie etwas viele
 Bäume im Wald vorkommen, aber wie bereits erwähnt geht es im Moment nur
 um die x- und y-Koordinaten.
 Wie man sehen kann wird im ersten Datentupel der Punkt 1=(0,20) und im
 zweiten Datentupel der Punkt 2=(0,0) definiert.
 Dies bedeutet nichts anderes als die Umsetzung dessen, was wir weiter oben
 vermerkt haben: Das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ist die Verbindung zwischen einem 
\begin_inset Quotes eld
\end_inset

oberen
\begin_inset Quotes erd
\end_inset

 Punkt (0,20) und einem 
\begin_inset Quotes eld
\end_inset

unteren
\begin_inset Quotes erd
\end_inset

 Punkt (0,0).
\end_layout

\begin_layout Standard
An dieser Stelle weise ich gleich auf zwei weitere wichtige Aspekte hin:
 (1) Stenografie-Zeichen werden senkrecht (also ohne Neigung) definiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn sie, wie im System Stolze-Schrey, geneigt sein sollen, so kann VSTENO
 das geneigte Zeichen anhand des senkrechten selbständig berechnen.
\end_layout

\end_inset

 und (2) das Koordinatensystem von VSTENO verläuft auf der x-Achse von links
 nach rechts und auf der y-Achse von unten nach oben.
 Die Grösse der Zeichen können Sie als Linguist/in im Prinzip frei wählen
 (da es sich um Vektorkoordinaten handelt, lassen sich die Zeichen später
 beliebig und verlustfrei vergrössern oder verkleinern).
 Es wird aber empfohlen, eine gut lesbare und intuitiv verständliche Standardgrö
sse zu verwenden.
 Im vorliegenden Fall verwenden wir 10 Punkte für eine Stufe des Systems
 Stolze-Schrey.
 Da das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 zwei Stufen hoch ist, ergibt dies für die y-Koordinate den Wert 20.
 Beachten Sie, dass alle Werte Fliesskommazahlen sind, d.h.
 Sie können auch Koordinaten mit Kommastellen - z.B.
 19.5 oder 19.999999 - verwenden.
\end_layout

\begin_layout Standard
Wenn Sie sehen möchten, wie das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 aussieht, dann gehen Sie am besten zur Webseite www.vsteno.ch und geben Wörter
 mit 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ein, z.B.
 
\begin_inset Quotes eld
\end_inset

beten
\begin_inset Quotes erd
\end_inset

.
 Standardmässig ist eine Neigung von 60° voreingestellt, weshalb das Zeichen
 nicht senkrecht, sondern um 60 Grad geneigt erscheint.
 Wenn Sie das Zeichen so sehen möchten, wie wir es oben definiert haben,
 dann geben Sie im Formular unter Optionen 90° ein: Sowohl der Buchstabe
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 als auch 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 werden nun senkrecht dargestellt.
 Machen Sie sich im Moment noch keine Gedanken über den Vokal 
\begin_inset Quotes eld
\end_inset

E
\begin_inset Quotes erd
\end_inset

 oder die Endkürzung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

.
 Widmen wir uns nun als nächstes dem Buchstaben 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

.
 Dieser weist im Unterschied zu 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 eine Rundung am unteren Ende auf.
 
\end_layout

\begin_layout Subsection*
Rund oder spitzig?
\end_layout

\begin_layout Standard
Im ersten Abschnitt haben wir den denkbar einfachsten Fall behandelt: ein
 Zeichen, das mit zwei Punkten definiert wird, die spitzig miteinander verbunden
 werden sollen.
 Die Art und Weise, wie die Punkte verbunden werden sollen, ist im Datenfeld-Ten
sion definiert.
 Betrachten wir noch einmal die zwei Punkte von 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { 0, 20, /*p1t1*/ 0, 1, 1.0, 0, 0, /*p1t2*/ 0, 
\end_layout

\begin_layout LyX-Code
/**/ /*p2t1*/ 0, 0, 0, 0, 1.0, 0, 1, /*p2t2*/ 0 }
\end_layout

\begin_layout Standard
Zur Veranschaulichung habe ich Kommentare eingefügt.
 Wie man sieht, enthält jeder Punkt (p1 und p2) zwei Tensions (t1 und t2).
 Bevor wir über die Bedeutung dieser Tensions weiterreden, empfehle ich
 Ihnen am besten, die folgende Internet-Seite zu besuchen: Sie enthält eine
 interaktive Demo so genannter Splines.
 Ein Spline ist nichts anderes als eine Folge von Punkten (wie wir sie in
 unseren Zeichen, z.B.
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, definieren).
 Sie können nun mit den Tension der verschiedenen Punkte (im Englischen
 manchmal auch knots genannt) herumspielen und so ein intuitives Verständnis
 dafür bekommen, welchen Einfluss die Spannung auf den Verlauf von Bezier-Kurven
 haben:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset href
LatexCommand href
target "http://scaledinnovation.com/analytics/splines/aboutSplines.html"

\end_inset


\end_layout

\begin_layout Standard
Vereinfacht gesagt ergibt die Spannung mit dem Wert 0 eine spitze Verbindung,
 die Spannung mit dem Wert 0.5 eine runde Verbindung (es sind natürlich auch
 andere Werte - also 
\begin_inset Quotes eld
\end_inset

stärkere
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

schwächere
\begin_inset Quotes erd
\end_inset

 Spannungen - möglich).
 Wichtig zu wissen ist, dass die Kurve zwischen zwei Punkten P1 zu P2 durch
 zwei Spannungen definiert wird: Die Spannung p1t1 gibt die Spannung nach
 dem Punkt P1 (Richtung P2) an, die Spannung p1t2 gibt die Spannung vor
 dem Punkt P2 (aus Richtung P1) an.
 Wir verwenden diese Spannungen nun, um das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 zu definieren:
\end_layout

\begin_layout LyX-Code
"B" => { /*data p1*/ 0, 10, 0, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Wiederum haben wir aus Gründen der Übersichtlichkeit den Header weggelassen.
 Wenn wir nur die Koordinaten aus den Tupeln anschauen, wird das Zeichen
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit 4 Punkten definiert: P1(0,10), P2(0,2), P3(2.5,0), P4(5,2).
 Zur Veranschaulichung können Sie z.B.
 ein Blatt Papier nehmen, die Punkte auf einem Koordinatensystem eintragen
 und diese dann - wie eingangs anhand der Kinderzeichnungen erwähnt - verbinden.
 Beachten Sie, dass dieses Zeichen nur 10 Punkte hoch ist (im Unterschied
 zu 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ist 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 einstufig).
\end_layout

\begin_layout Standard
Der ganze mathematische Hokuspokus - bzw.
 die Magie ;-) - liegt nun in den Tensions.
 Sie betragen für die Punkte 1-4: T1(0,0.5), T2(0.5,0.5), T3(0.5,0.5), T4(0.5,0).
 Das bedeutet, dass beim Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 nur der erste Punkt spitz (Wert 0) verbunden wird.
 Alle anderen Punkte werden danach rund (mit der Spannung 0.5) verbunden.
 Die letzte Spannung T4 enthält in diesem Beispiel wieder den Wert 0: Dieser
 hat keine Bedeutung, denn wenn wir das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit einem weiteren Zeichen verbinden, so können wir nicht wissen, ob die
 Verbindung mit dem folgenden Zeichen rund oder spitzig sein muss (im Falle
 von 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 spitzig, im Falle von 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 hingegen rund).
 Anders gesagt: Dieser Wert hängt vom Folgezeichen ab - und es ist somit
 völlig egal, welchen Wert Sie hier eintragen (er wird später überschrieben).
\end_layout

\begin_layout Subsection*
Schattierungen
\end_layout

\begin_layout Standard
Bis jetzt haben wir Zeichen als Folge von Punkten definiert, die spitz oder
 rund miteinander verbunden werden.
 Damit lässt sich schon einiges machen! Allerdings verlangen gewisse Stenografie
-Systeme - darunter auch Stolze-Schrey -, dass man Zeichen schattieren kann.
 Auch diese Funktion können wir durch Setzen der entsprechenden Werte innerhalb
 der Datentupel erreichen.
 Nehmen wir noch einmal unser einfaches Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, wie wir es definiert haben:
\end_layout

\begin_layout LyX-Code
"T" => { /*data p1*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
An der 5.
 Stelle sehen wir hier den Wert 1.0.
 Dieser Wert entspricht der Dicke (thickness) und bedeutet also, dass das
 Zeichen immer mit der Standarddicke gezeichnet werden soll.
 Genau genommen ist der Wert 1.0 ein Multiplikationsfaktor in Bezug zu einer
 (vom/von der Nutzer/in vorgegebenen) Grunddicke: Werte >1.0 geben eine dickere,
 Werte <1.0 eine dünnere Linie an.
 Es können - wie für alle anderen Werte - Fliesskommazahlen verwendet werden
 (also auch 0.77 ist eine gültige Liniendicke).
 Wir passen diesen Wert nun an:
\end_layout

\begin_layout LyX-Code
"T" => { /*data p1*/ 0, 20, 0, 1, 2.5, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Wie man sieht, habe ich im ersten Datentupel (= Punkt 1) als Dicke den Wert
 2.5 eingetragen.
 Dies bedeutet nun Folgendes: Wenn das Zeichen schattiert werden soll, dann
 wird ausgehend vom ersten Punkt P1 die Linie (genauer: Bezier-Kurve) zum
 Punkt P2 mit der 2.5-fachen Dicke gezeichnet.
 Bitte beachten Sie: Für das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 genügt es, nur diesen einen Wert zu ändern, um das Zeichen zu schattieren.
 Würden wir auch im Punkt P2 den Wert auf 2.5 erhöhen, so würde dies bedeuten,
 dass auch die Verbindungslinie zum nächsten Zeichen schattiert würde (was
 wir nicht wollen).
 Sie können diese Schattierung sehen, indem Sie in der Demoversion das Wort
 
\begin_inset Quotes eld
\end_inset

Tat
\begin_inset Quotes erd
\end_inset

 eingeben: Das erste 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 wird normal gezeichnet, das zweite schattiert.
\end_layout

\begin_layout Standard
Leider ist es aber nicht immer so einfach mit den Schattierungen wie beim
 Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, das mit einem spitzen Punkt beginnt und endet.
 Speziell bei Zeichen, die mit Rundungen beginnen und/oder aufhören, sieht
 es unschön aus, wenn wir einfach ab einem bestimmten Punkt eine wesentlich
 dickere Linie definieren.
 Bei runden Zeichen empfiehlt es sich also, die Schattierung in mehrere
 Schritte abgestuft beginnen und/oder enden zu lassen.
 Zur Illustration zeigen wir dies an unserem zweiten Beispielzeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, welches einen spitzen Anfang und ein rundes Ende aufweist:
\end_layout

\begin_layout LyX-Code
"B" => { /*data p1*/ 0, 10, 0, 1, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 2, 0.5, 0, 1.75, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Da unser Zeichen mit einem spitzen Punkt beginnt, können wir hier problemlos
 direkt die Dicke 2.5 einsetzen.
 Die Kurve von P1 zu P2 wird also 
\begin_inset Quotes eld
\end_inset

maximal dick
\begin_inset Quotes erd
\end_inset

 gezeichnet.
 Danach setzen wir ab Punkt P2 eine mittlere Dicke von 1.75 ein.
 Die Kurve von P2 zu P3 wird also 
\begin_inset Quotes eld
\end_inset

weniger dick
\begin_inset Quotes erd
\end_inset

 gezeichnet.
 Schliesslich bleibt noch die Verbindung von P3 zu P4: Hier kehren wir zur
 
\begin_inset Quotes eld
\end_inset

normalen
\begin_inset Quotes erd
\end_inset

 Dicke von 1.0 zurück.
 
\end_layout

\begin_layout Subsection*
Intermediate shadow points
\end_layout

\begin_layout Standard
Die soeben dargestellte Abstufung der Schattierungen funktioniert relativ
 gut, wenn das Zeichen selbst bereits aus mehreren Punkten besteht, die
 eine abgestufte Definition der Schattierung zulassen.
 Schwieriger wird es, wenn das Zeichen als solches zu wenige Punkte enthält,
 um eine optisch einigermassen gelungene Abstufung zu erreichen.
 In diesem Fall besteht zwar die Möglichkeit, zusätzliche Punkte in die
 Zeichendefinition einzufügen, um mehr Zwischenschritte in der Schattierung
 zu erhalten.
 Diese Zwischenpunkte können jedoch den Nachteil haben, dass sie das optische
 Bild in der unschattierten Variante stören, da der kontinuierliche Lauf
 der Bezier-Kurve unterbrochen wird.
 Die von VSTENO verwendete Lösung besteht hier in so genannten 
\begin_inset Quotes eld
\end_inset

intermediate shadow points
\begin_inset Quotes erd
\end_inset

.
 Dies sind Zwischenpunkte, die nur dann gezeichnet werden, wenn das Zeichen
 schattiert dargestellt werden soll.
 In der normalen Zeichendarstellung werden diese Punkte ignoriert.
 Als Beispiel zeigen wir das Zeichen 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Da der Laut 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 im System Stolze-Schrey zwei Ausführungsvarianten hat, unterscheiden wir
 zwischen 
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

 (= Anlaut-R) und 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 (= vokalisches R).
 Das 
\begin_inset Quotes eld
\end_inset

vokalische R
\begin_inset Quotes erd
\end_inset

 ist somit jenes, das im Uhrzeigersinn ausgeführt wird und nach Vokal steht.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"VR" => { /*data*/  /*1*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*2*/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*3*/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*4*/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*5*/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*6*/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*7*/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*8*/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0 }
\end_layout

\begin_layout Standard
Der Einfachheit halber wurden die Punkte 1-9 innerhalb von Kommentaren nummerier
t.
 Für die Definition des nicht schattierten Zeichens 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 reichen im Prinzip die folgenden Punkte aus: 1=(2.5,5), 3=(5,2.5), 6=(2.5,0),
 7=(0,2.5), 8=(2.5,5).
 Wie man sehen kann, markieren diese 5 Punkte, die Eckpunkte eines geschlossenen
 Kreises, die jeweils rund - d.h.
 mit Tensions zwischen 0.5-0.7 - verbunden werden.
 Würde man allerdings nur diese 5 Punkte für das schattierte Zeichen verwenden,
 so stünden für die Schattierung lediglich die Strecken von Punkt 1 - 3
 und von Punkt 3 - 6 zur Verfügung.
 Aus diesem Grund wurden die übrigen Punkte - also 2, 4, 5 - als intermediate
 shadow points eingefügt.
 Erkennbar ist dies am Wert 5 an der 4.
 Stelle im Datatupel.
 Wie wir weiter oben schon angedeutet hatten, steht der Wert in der 4.
 Position für den 
\begin_inset Quotes eld
\end_inset

Typ
\begin_inset Quotes erd
\end_inset

 des Punktes.
 Wir haben hier schon den entry point (mit Wert 1) und den normalen Punkt
 (mit Wert 0) kennen gelernt.
 Der intermediate shadow point ist also einfach ein weiterer Typ, den ein
 Punkt annehmen kann.
\end_layout

\begin_layout Standard
Wie bereits erwähnt würde das Zeichen 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 unschön aussehen, wenn diese Zwischenpunkte auch für das unschattierte
 Zeichen verwendet werden (dies ist hier besonders deutlich, weil Kreise
 kontinuierliche Kurven sind, wo es besonders auffällt, wenn sie durch weitere
 Punkte unterbrochen werden).
 Aus diesem Grund lässt der Zeichenalgorithmus von VSTENO diese Zusatzpunkte
 weg, wenn das Zeichen nicht schattiert ist.
\end_layout

\begin_layout Subsection*
Punkttypen
\end_layout

\begin_layout Standard
An dieser Stelle ist es nun an der Zeit, die verschiedenen Punkttypen in
 ihrer Vollständigkeit vorzustellen.
 Wiederum: Vergessen Sie bitte sämtliche Punkttypen, die hier vorgestellt
 werden und die noch nicht anhand von Beispielen erklärt werden.
 Im Moment genügt es, wenn Sie ein erstes Mal gehört haben, dass diese Punkttype
n existieren.
\end_layout

\begin_layout Standard
Wichtig im Zusammenhang mit diesen Punkttypen ist zu wissen, dass es im
 Datentuplet zwei Stellen gibt, wo diese definiert werden.
 Hier noch einmal das Datentuplet des ersten Punktes, das wir für das Zeichen
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 definiert hatten:
\end_layout

\begin_layout LyX-Code
0,  20,  0,  1, 1.0,  0,  0,  0
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1,  th, dr, d2, t2 
\end_layout

\begin_layout Standard
Das Feld d1 steht für die Eingangs-Information (entry information), d.h.
 die Information, die angibt, wie das Zeichen verbunden wird.
 Es kann folgende Werte annehmen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
normaler Punkt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entry point (Anfangspunkt = erster Punkt des Zeichens)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pivot point (Drehpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conditional pivot point (bedingter Drehpunkt)
\begin_inset Foot
status open

\begin_layout Plain Layout
Wird in der jetzigen Version nicht unterstützt und deshalb nicht weiter
 dokumentiert.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
connecting point (Verbindungspunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intermediate shadow point (Zwischenschattierungspunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
late entry point (später Anfangspunkt)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Analog steht das Feld d2 für die Ausgangs-Information (exit information),
 d.h.
 die Information, die angibt, wie das Zeichen 
\begin_inset Quotes eld
\end_inset

beendet
\begin_inset Quotes erd
\end_inset

 wird.
 Die Werte sind ähnlich wie bei d1, aber mit einigen kleinen Unterschieden:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
normaler Punkt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exit point (Endpunkt = letzter Punkt des Zeichens)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pivot point (Drehpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conditional pivot point (bedingter Drehpunkt)
\begin_inset Foot
status open

\begin_layout Plain Layout
Wird in der jetzigen Version nicht unterstützt und deshalb nicht weiter
 dokumentiert.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
early exit point (früher Endpunkt)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Wie gesagt: Zerbrechen Sie sich nicht jetzt schon den Kopf über alle diese
 Punkttypen, wir werden sie einzeln mit Beispielen erläutern.
 Beginnen werden wir mit dem pivot point, also dem 
\begin_inset Quotes eld
\end_inset

Drehpunkt
\begin_inset Quotes erd
\end_inset

, mit dem Wert 2 in d1 oder d2.
\end_layout

\begin_layout Subsection*
Verbundene Rundungen
\end_layout

\begin_layout Standard
Zwei Stenozeichen mit spitzen Anfangs- und Endpunkten zu verbinden, ist
 trivial: Eine gerade Linie genügt! Schwieriger wird es jedoch, wenn eines
 - oder beide Zeichen - Rundungen als Anfangs- oder Endpunkt aufweisen.
 Möglich sind hier die Kombinationen spitz + rund (
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

Thema
\begin_inset Quotes erd
\end_inset

), rund + spitz (
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

beten
\begin_inset Quotes erd
\end_inset

) oder rund + rund (
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

Mumie
\begin_inset Quotes erd
\end_inset

).
 Zusätzlich kann im System Stolze-Schrey (das wir immer als Beispiel nehmen)
 das folgende Zeichen eng oder weit verbunden und hoch oder tiefgestellt
 werden.
 Während die Verbindung 
\begin_inset Quotes eld
\end_inset

eng
\begin_inset Quotes erd
\end_inset

 vs 
\begin_inset Quotes eld
\end_inset

weit
\begin_inset Quotes erd
\end_inset

 noch einigermassen überschaubar ist (2 Möglichkeiten) ergibt sich bei der
 Hoch- und Tiefstellung eine Vielzahl von Fällen: Zum einen bedeutet Hoch-
 und Tiefstellung nicht bei jedem Zeichen dasselbe (beim Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 bedeutet Hochstellung eine halbe Stufe höher, beim Zeichen 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

 hingegen beträgt der Unterschied eine ganze Stufe), zum anderen können
 Zeichen halb-, ein-, zwei- oder dreistufig sein, was zu einer Unzahl von
 Verbindungsarten (damit meinen wir vor allem Länge, Winkel und allenfalls
 Verlauf der Verbindung) führt.
\end_layout

\begin_layout Standard
Aus diesem Grund besteht die Möglichkeit bei gerundeten Zeichen einen Drehpunkt
 zu definieren.
 Dieser Drehpunkt sollte sich im Fuss- oder Scheitelpunkt des Zeichens befinden
 und somit so gelegen sein, dass er das Zeichen in 2 (Zeichen mit einer
 Rundung) oder 3 Teile (Zeichen mit 2 Rundungen) auftrennt.
 D.h.
 dass solche Zeichen über einen fixen Mittel- oder Kernteil verfügen, an
 den sich die variablen Rundungen anschliessen.
 Der Drehpunkt markiert also den Übergang zwischen dem fixen und dem Variablen
 Teil eines Zeichens.
 Wir illustrieren dies am Beispiel 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, welches eine Rundung am Fusse aufweist:
\end_layout

\begin_layout LyX-Code
"B" => { /*data*/ /*1*/0, 10, 0, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*2*/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*3*/ 2.5, 0, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Diese Definition ist identisch mit jener, die wir bereits weiter oben gegeben
 haben, mit dem einzigen Unterschied, dass der 3.
 Punkt als Drehpunkt definiert wird (Wert 2 im vorletzten Datentupel).
 Dies bedeutet nun, dass die Punkte 1-3 fix (also unveränderlich) sind,
 während der Punkt 4 (= exit point) variabel ist.
 Betrachten wir hier das Beispiel 
\begin_inset Quotes eld
\end_inset

Bohne
\begin_inset Quotes erd
\end_inset

: Hier trifft die Rundung von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit der Tiefstellung des einstufigen Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 zusammen, welches eng verbunden wird.
 Wie man leicht erkennen kann, befindet sich somit der Anschlusspunkt des
 Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 unterhalb (!) des Endpunktes des Zeichens 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 (in Koordinaten gesprochen: der Endpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 liegt bei y=2, der Anschlusspunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 liegt bei y=0).
 Mit anderen Worten: Würde das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 ohne Anpassung verbunden, dann entstünde ein hässlicher 
\begin_inset Quotes eld
\end_inset

Schnörkel
\begin_inset Quotes erd
\end_inset

 anstelle einer kontinuierlichen Linie.
\end_layout

\begin_layout Standard
VSTENO passt in diesem Fall die Endpunkte beider Zeichen (auch 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 ist ein Zeichen, welches mit einer Rundung beginnt) an, sodass ein 
\begin_inset Quotes eld
\end_inset

sanfter
\begin_inset Quotes erd
\end_inset

 Übergang entsteht.
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Anpassung erfolgt im Moment als simple Gerade, d.h.
 VSTENO nimmt den Drehpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 und den Drehpunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, zieht eine Gerade zwischen den beiden und passt den Endpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 und den Anfangspunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 so an, dass sie auf dieser Geraden liegen.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Early exit und late entry
\end_layout

\begin_layout Standard
Und es geht weiter mit einem neuen Punkttyp: dem early exit point oder dem
 vorzeitigen Endpunkt.
 Dieser wird im System Stolze-Schrey für Zeichen mit Unterschlaufe verwendet,
 die am Ende eines Wortes ohne Schlaufe geschrieben werden.
 Beispiele sind hier die Zeichen 
\begin_inset Quotes eld
\end_inset

NG
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 (als einstufige Variante) oder 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

SCHW
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 usw.
 (als zweistufige Variante).
 Der early exit point bedeutet also nichts anderes, als dass das Zeichen
 an diesem Punkt 
\begin_inset Quotes eld
\end_inset

vorzeitig
\begin_inset Quotes erd
\end_inset

 endet, wenn es am Ende eines Wortes steht.
 Hier das Zeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"NS" => { /*data*/ 0.75, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3.75, 8.5, 0.5, 2, 2.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2.65, 10, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 9, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 1, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*late entry point*/ 0.75, 0, 0.5, 0, 2.5, 0, 99, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 3, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Einen ähnlichen Fall gibt es bei Zeichen, die mit einer Rundung beginnen
 und wo in Verbindung mit anderen Zeichen ein Teil der Rundung zweimal gezeichne
t wird.
 Nehmen wir als Beispiel das Zeichen 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

: In Zusammensetzungen wie 
\begin_inset Quotes eld
\end_inset

davon
\begin_inset Quotes erd
\end_inset

 - wo das Zeichen vom Fusspunkt der Kürzung 
\begin_inset Quotes eld
\end_inset

DA
\begin_inset Quotes erd
\end_inset

 - von unten her verbunden werden muss, wird der oberste Teil des Zeichens
 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 zweimal gezeichnet (einmal beim Hochfahren, einmal beim Herunterfahren).
 Dies ist in diesem Fall - d.h.
 wenn das Zeichen verbunden ist - richtig und somit kein Problem.
 Nehmen wir nun aber nur die Kürzung 
\begin_inset Quotes eld
\end_inset

VON
\begin_inset Quotes erd
\end_inset

 (welche dem Zeichen 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 alleine entspricht).
 Auch hier würde VSTENO den obersten Teil des Zeichens zweimal zeichnen
 - was nicht schön ist (wenn die beiden Kurven beim Hoch- und Herunterfahren
 nicht exakt übereinander liegen, dann erscheint das Kopfende dunkler).
 Deshalb existiert auch hier der late entry point oder eben der 
\begin_inset Quotes eld
\end_inset

späte Eintrittspunkt
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"V" => { /*data*/ 1, 16, 0.5, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2, 18, 0.6, 2, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*late entry point*/ 6, 20, 0, 98, 0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2, 18, 0.6, 0, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1, 16, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 14, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 5, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3, 0, 0.5, 4, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3, 0, 0.5, 0, 1.5, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 5, 2, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Der Wert 98 bedeutet hier also, dass die Punkte 1 und 2 nicht gezeichnet
 werden, wenn das Zeichen am Anfang steht.
 In diesem Fall wird der late entry point (also der 3.
 Punkt) als Anfangspunkt gesetzt.
\end_layout

\begin_layout Subsection*
Header
\end_layout

\begin_layout Standard
Bei all unseren Definitionen haben wir bis jetzt den Header der Einfachheit
 halber weggelassen.
 Dieser enthält Informationen, die das ganze Zeichen (also nicht nur einzelne
 Punkte) betreffen.
 In der aktuellen Version ist der Header 24 Felder lang, welche folgende
 Bedeutungen haben:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
token width (Zeichenbreite)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delta-y before (Delta-Y vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delta-y after (Delta-Y nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tension before (Spannung vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional x before (zusätzliches x vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional x after (zusätzliches x nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional delta-y (zusätzliches Delta-Y)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 2nd parallel rotating axis
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Angaben mit Stern * sind nur für die SE1 rev1 gültig und wurden in Version
 0.1rc deaktiviert.
 Sie werden hier nur der Vollständigkeit halber erwähnt.
 Die erste Rotationsachse entspricht der Hauptachse, die durch den Ursprung
 (0,0) geht.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 3rd parallel rotating axis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 4th parallel rotating axis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Randvektor-Kompensation (x-Wert) bzw.
 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

/
\begin_inset Quotes erd
\end_inset

no
\begin_inset Quotes erd
\end_inset

 im Zweitzeichen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Randvektor-Kompensation (y-Wert)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
token type (Zeichentyp)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inconditional delta-y before (unbedingtes Delta-Y vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inconditional delta-y after (unbedingtes Delta-Y nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alternative exit point x (alternativer Endpunkt x)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alternative exit point y (alternativer Endpunkt y)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exit point to use (zu verwendender Endpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
interpretation y coordinates (Interpretation y-Koordinaten)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertical (vertikale Höher-/Tieferstellung)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
distance (horizontaler Abstand)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
shadowed (schattiert)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
don't connect (nicht verbinden)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
token group
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Beachten Sie bitte, dass wir die Feldnummer als Offset bezeichnen und mit
 der Nummerierung bei 0 beginnen.
 Auch hier werden wir wieder Schritt für Schritt vorgehen und die Bedeutung
 der einzelnen Werte anhand von Beispielen zeigen.
 Wir beginnen mit den Feldern 19-21, welche die Höher-/Tieferstellung (Offset
 19), den horizontalen Abstand (Offset 20) und die Schattierung (Offset
 21) betreffen.
\end_layout

\begin_layout Subsection*
Vokale
\end_layout

\begin_layout Standard
Diese drei Felder können wir verwenden, um im System Stolze-Schrey die Vokale
 zu definieren.
 Im Unterschied zu Konsonantenzeichen entsprechen diese nämlich keinen real
 geschriebenen Zeichen, sondern werden durch die Art, wie Zeichen verbunden
 werden, dargestellt.
 Mit anderen Worten: Ein Vokal entspricht im System Stolze-Schrey einem
 
\begin_inset Quotes eld
\end_inset

leeren Zeichen
\begin_inset Quotes erd
\end_inset

 (= keine Punkte im Data-Bereich), das nur aus einem Header besteht.
 Als Beispiel der Vokal 
\begin_inset Quotes eld
\end_inset

E
\begin_inset Quotes erd
\end_inset

, der aus einer weiten Verbindung ohne Hochstellung und ohne Schattierung
 besteht:
\end_layout

\begin_layout LyX-Code
"E" => { /*header0-7*/ 0, 0, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 2, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0,0,0,"no","wide","no",0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ }
\end_layout

\begin_layout Standard
Zunächst einmal weisen wir auf den Offset 12 hin, der dem Zeichentyp (token
 type) entspricht.
 Hier wurde der Wert 2 gesetzt, der 
\begin_inset Quotes eld
\end_inset

virtuelles Zeichen
\begin_inset Quotes erd
\end_inset

 bedeutet (dagegen bezeichnet der Wert 0 ein 
\begin_inset Quotes eld
\end_inset

normales
\begin_inset Quotes erd
\end_inset

 und der Wert 1 ein 
\begin_inset Quotes eld
\end_inset

unbedingt schattiertes
\begin_inset Quotes erd
\end_inset

 Zeichen, wie wir später sehen werden).
 
\begin_inset Quotes eld
\end_inset

Virtuell
\begin_inset Quotes erd
\end_inset

 bedeutet in diesem Fall nichts anderes, als dass das Zeichen keine grafische
 Entsprechung (als 
\begin_inset Quotes eld
\end_inset

Punktezeichnung
\begin_inset Quotes erd
\end_inset

) hat, sondern nur aus einem Header besteht.
\end_layout

\begin_layout Standard
Weiter weisen wir im Header-Untertupel 16-23 auf die Werte 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (Offset 19), 
\begin_inset Quotes eld
\end_inset

wide
\begin_inset Quotes erd
\end_inset

 (Offset 20) und 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (Offset 21) hin.
 Diese entsprechen somit der Angabe 
\begin_inset Quotes eld
\end_inset

keine Höher-/Tieferstellung
\begin_inset Quotes erd
\end_inset

 (also horizontale Verbindung), 
\begin_inset Quotes eld
\end_inset

weite Verbindung
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

nicht schattiert
\begin_inset Quotes erd
\end_inset

.
 Anbei die Liste der Werte, die Felder annehmen können:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert & Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (horizontale Verbindung), 
\begin_inset Quotes eld
\end_inset

up
\begin_inset Quotes erd
\end_inset

 (Höherstellung), 
\begin_inset Quotes eld
\end_inset

down
\begin_inset Quotes erd
\end_inset

 (Tieferstellung)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

wide
\begin_inset Quotes erd
\end_inset

 (weite Verbindung), 
\begin_inset Quotes eld
\end_inset

narrow
\begin_inset Quotes erd
\end_inset

 (enge Verbindung), 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (kein Abstand)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (keine Schattierung), 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 (Schattierung)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Ein weiteres Beispiel: Der Diphtong 
\begin_inset Quotes eld
\end_inset

AU
\begin_inset Quotes erd
\end_inset

 wird als 
\begin_inset Quotes eld
\end_inset

enge Verbindung
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hochgestellt
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

schattiert
\begin_inset Quotes erd
\end_inset

 definiert:
\end_layout

\begin_layout LyX-Code
"AU" => { /*header0-7*/ 0, 0, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 2, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0,0,0,"up","narrow","yes",0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ } 
\end_layout

\begin_layout Standard
Bitte beachten Sie, dass in beiden Fällen der Data-Bereich leer bleibt:
 Die Vokale enhalten also wie bereits erwähnt keine Punkte!
\end_layout

\begin_layout Subsection*
Hochstellung
\end_layout

\begin_layout Standard
Mit den Offsets 19-21 im Header können wir also die Verbindung von Zeichen
 und insbesondere deren Hoch- oder Tiefstellung (Offset 19) bestimmen.
 Allerdings bedeutet 
\begin_inset Quotes eld
\end_inset

Hochstellung
\begin_inset Quotes erd
\end_inset

 nicht in allen Fällen dasselbe: Bei den meisten Zeichen im System Stolze-Schrey
 bedeutet es, dass das Folgezeichen eine halbe Stufe höher (d.h.
 dass sich die y-Koordinate sich um den Wert 5 erhöht) geschrieben wird.
 Es gibt jedoch auch Zeichen - z.B.
 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 etc.
 -, welche eine ganze Stufe (als 10 Punkte) höher geschrieben werden müssen.
 Ausserdem unterscheiden sich diese Zeichen darin, wie ein weiteres Folgezeichen
 angeschlossen wird: Bei den meisten Zeichen werden weitere Folgezeichen
 ebenfalls eine halbe Stufe höher geschrieben, bei 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 etc.
 hingegen, muss nach der Hochstellung wieder zur Grundlinie zurückgekehrt
 werden.
 All dies kann im Header mit den Offsets 1 (delta-y before) und 2 (delta-y
 after) definiert werden:
\end_layout

\begin_layout LyX-Code
"SCH" => { /*header0-7*/ 9, 1,-1, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ /*...*/ }
\end_layout

\begin_layout Standard
Hier wird also im Offset 1 ein delta-y before mit dem Wert 1 (= 1 Stufe
 höher) und im Offset 2 ein delta-y after mit dem Wert -1 (= eine Stufe
 tiefer) definiert.
 Mit anderen Worten: Nachdem das Zeichen 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

 eine Stufe höher an das Vorzeichen angeschlossen wird, wird die Schreiblinie
 danach wieder um den Wert -1 auf die ursprüngliche Linie zurückgesetzt.
 Im Vergleich dazu das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"B" => { /*header0-7*/ 5, 0.5, 0, 0, 1, 1, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ /*...*/ }
\end_layout

\begin_layout Standard
Hier wird die Schreiblinie vor dem Zeichen um eine halbe Stufe (Wert 0.5)
 erhöht und danach gleich belassen (der Wert 0 bedeutet, dass keine Veränderung
 vorgenommen wird).
\end_layout

\begin_layout Subsection*
Zeichenbreite
\end_layout

\begin_layout Standard
Bis jetzt haben wir Zeichen definiert, ohne uns Gedanken über deren Breite
 zu machen.
 Das sollten wir nun tun, denn es ist offensichtlich, dass jedes Zeichen
 eine Breite hat bzw.
 haben muss, um eine vernünftige und saubere Aneinanderreihung zu erreichen.
 Betrachten wir zum Beispiel noch einmal unser allererstes Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, das aus einem einzigen senkrechten Strich besteht:
\end_layout

\begin_layout LyX-Code
"T" => { /*header0-7*/ 6, 0.5, 0, 0, 3, 3, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Da dieses Zeichen nur aus einem senkrechten Strich besteht, der in einer
 bestimmten Dicke gezeichnet wird, ist es per se nur so breit wie der Strich
 dick ist.
 Das macht aber wenig Sinn, da das Zeichen so unmittelbar auf ein vorhergehendes
 oder ein nachfolgendes Zeichen angeschlossen wird.
 Selbst bei 
\begin_inset Quotes eld
\end_inset

engem
\begin_inset Quotes erd
\end_inset

 bzw.
 
\begin_inset Quotes eld
\end_inset

keinem
\begin_inset Quotes erd
\end_inset

 Abstand zwischen den Zeichen, sollten sie ein Minimum voneinander entfernt
 sein.
 Dies können wir durch die Werte in den Offsets 4 (additional x before)
 und Offset 5 (additional x after), sowie dem Offset 1 (token width) erreichen.
 Der Wert in Offset 4 entspricht dabei dem 
\begin_inset Quotes eld
\end_inset

linken
\begin_inset Quotes erd
\end_inset

, Offset 5 dem 
\begin_inset Quotes eld
\end_inset

rechten
\begin_inset Quotes erd
\end_inset

 Leerraum, der auf das Zeichen folgt.
 Im obigen Beispiel wurde hier 3 Pixel für den linken und 3 Pixel für den
 rechten Abstand definiert, was für das Zeichen eine Gesamtbreite von 6
 Pixeln (Offset 0) ergibt.
\end_layout

\begin_layout Standard
Bitte beachten Sie, dass die Werte in den Offsets 4 und 5 zusätzlich zur
 jener Breite addiert werden muss, welche sich aus den Punkten, die das
 Zeichen definieren, ergibt:
\end_layout

\begin_layout LyX-Code
"Y" => { /*header0-7*/ 14, 0.5, 0, 0, 2, 2, 0, ""
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 10, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 10, 0, 0, 0, 1.0, 0, 1, 0 /**/ } 
\end_layout

\begin_layout Standard
Das Zeichen 
\begin_inset Quotes eld
\end_inset

Y
\begin_inset Quotes erd
\end_inset

 - in Stolze-Schrey als gerader Strich von links oben P1(0,10) nach rechts
 unten P2(10,0) definiert, ist - rein von den Punkten her - bereits 10 Pixel
 breit.
 Wird nun in Offsets 4 und 5 ein zusätzlicher Leerabstand links und rechts
 von 2 Pixeln (also insgesamt 4 Pixel) definiert, so ist das Zeichen insgesamt
 14 Pixel breit.
\end_layout

\begin_layout Standard
Es empfiehlt sich, beim Erstellen neuer Zeichen, mit diesen Möglichkeiten
 etwas herumzuspielen, um optimale Werte zu finden, die in Verbindungen
 mit anderen Zeichen am besten aussehen
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Laufe der Entwicklung der SE1 hat sich gezeigt, dass dieses Konzept der
 fixen Abstände (mit Vor/Nachbreite der Zeichen) ungenügend ist.
 Es ist zwar sinnvoll für Zeichen, die effektiven einen fixen Abstand haben
 (wie z.B.
 Buchstaben in handschriftlicher Blockschrift, die mit VSTENO ebenfalls
 umgesetzt werden können).
 Stenografie-Zeichen benötigen jedoch je nach Zeichen und Verbindung (eng/weit,
 hoch/tief) verschiedene Abstände.
 Dies wurde gelöst, indem für Stenografie-Zeichen prinzipiell nur noch eine
 
\begin_inset Quotes eld
\end_inset

Nettobreite
\begin_inset Quotes erd
\end_inset

 (Offset 0) und keine Vor/Nachbreite (Offsets 4/5) mehr angegeben wird.
 Die individuellen Abstände werden danach via REGEX-Regeln eingesetzt.
 Damit dies funktionierte, musste ein weiterer Zeichentyp (Offset 12 im
 Header) definiert werden.
 Der Wert 3 in Offset 12 bedeutet somit 
\begin_inset Quotes eld
\end_inset

spacer
\begin_inset Quotes erd
\end_inset

: VSTENO wird in diesem Fall nur die Breite (Offset 0) dieses Zeichens berücksic
htigen.
 Zu sehen ist das in den Spacer-Zeichen #1, #2, #3, ..., #9 in https://github.com/ma
rcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Schreiblinienverschiebung
\end_layout

\begin_layout Standard
Es gibt auch Zeichen, bei welchen sich die Schreiblinie in jedem Fall -
 also unabhängig von Hoch- oder Tiefstellung - verschiebt.
 Im System Stolze-Schrey ist dies z.B.
 bei 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 der Fall: Hier müssen Folgezeichen eine Stufe höher angeschlossen werden.
 Wir erreichen dies durch Setzen der Offsets 13 (inconditional y before)
 und 14 (inconditional y after):
\end_layout

\begin_layout LyX-Code
"RR" => { /*header0-7*/ 10, 0.5, 0, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 1, 7.75, 0.5, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 5, 10, 0.7, 0, 3.0, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 10, 5, 0.8, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 0, 5, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1, 7.75, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p7*/ 5, 10, 0.5, 0, 1.0, 0, 1, 0.5, /**/ }
\end_layout

\begin_layout Standard
In diesem Zeichen sehen wir gleich zwei Phänomene: (1) Die Schreiblinie
 verschiebt sich nach dem Zeichen in Normalstellung um 1 Stufe nach oben
 (Offset 14 mit Wert 1) und (2) Wird das Zeichen höher gestellt, so beträgt
 die Höherstellung eine halbe Stufe (Wert 0.5 im Offset 1) und die Schreiblinie
 liegt 1.5 (d.h.
 die Summe aus Offset 1 und Offset 14) höher!
\begin_inset Foot
status open

\begin_layout Plain Layout
Falsch wäre hier, die Schreiblinienverschiebung in Offset 3 - z.B.
 mit dem Wert 0.5 - zu definieren: Dies würde zwar für höher gestellte 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 gelten, normal gestellte 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 würden jedoch falsch geschrieben, da sich bei 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 die Schreibline in jedem Fall um eine Stufe erhöht!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Unbedingte Schattierung
\end_layout

\begin_layout Standard
Und weiter geht's mit Besonderheiten des Systems Stolze-Schrey.
 Nebst allen präsentierten Anforderungen an stenografische Zeichen, gibt
 es auch Abkürzungen, in jedem Fall eine Schattierung verlangen.
 Ein Beispiel dafür ist die Abkürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

, welche aus einem höher gestellt, schattierten 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 besteht:
\end_layout

\begin_layout LyX-Code
"AUCH" => { /*header0-7*/ 5, 1,-1, 0.5, 0.5, 0.5, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 1, 1, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 5, 7, 0.8, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 3, -10, 0.5, 0, 2, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p7*/ 0, -7, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p8*/ 5, 0, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Definiert wird die Schattierung hier im Offset 12 durch den Wert 1.
 Wie wir bereits bei den Vokalen gesehen haben, steht der Offset 12 für
 den Zeichentyp (token type).
 Bei Vokalen haben wir hier den Wert 2 (virtuelles Zeichen) gesetzt, für
 alle anderen Zeichen den Wert 0 (normales Zeichen).
 Der Wert 1 nun bedeutet für VSTENO, dass das Zeichen in jedem Fall schattiert
 werden soll (also unabhängig davon, welcher Vokal oder welches Zeichen
 vorausgeht).
\end_layout

\begin_layout Standard
Bitte beachten Sie in diesem Zeichen 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 eine weitere Besonderheit: Da 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 einem hoch gestellten 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 entspricht, konnte hier einfach die Definition von 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 kopiert und in den Offsets 13 und 14 (inconditional y before/after), die
 wir bereits gesehen haben, der Wert +1 gesetzt werden (was bedeutet, dass
 das ursprüngliche Zeichen 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 einfach um eine Stufe nach oben verschoben wird).
 Definitionen dieser Art sind sehr effizient, da man bereits definierte
 Zeichen wiederverwenden (und wie hier für eine Kürzung gebrauchen) kann.
 Wir werden später noch weitere Möglichkeiten sehen, um aus bereits definierten
 Zeichen zusätzliche - kombinierte oder verschobene - Zeichen zu erstellen.
\end_layout

\begin_layout Standard
Das Kopieren eines Zeichens hat aber auch den Nachteil, dass die Definition
 u.U.
 nicht optimal ist: Im Falle von 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 verwendet das urprüngliche Zeichen 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 z.B.
 einen early exit point in Punkt P6 (Wert 99 an vorletzter Stelle im Datentupel).
 Da die Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 immer alleine steht, kann man den early exit point auch durch einen normalen
 Endpunkt ersetzen und die Punkte P7 und P8 löschen:
\end_layout

\begin_layout LyX-Code
"AUCH" => { /*header0-7*/ 5, 1,-1, 0.5, 0.5, 0.5, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 1, 1, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 5, 7, 0.8, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 3, -10, 0.5, 0, 2, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1.5, -9, 0.5, 0, 1.5, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Eine letzte Bemerkung zur Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

: Es ist VSTENO vollkommen egal, ob Sie nun eine Kürzung oder ein Zeichen
 definieren.
 VSTENO betrachtet alles, was gezeichnet werden kann, als Zeichen.
 Die Namen der Zeichen können einen oder beliebig viele Buchstaben lang
 sein (auch die Kürzung 
\begin_inset Quotes eld
\end_inset

VIELLEICHT
\begin_inset Quotes erd
\end_inset

 wird - obwohl es in der Langschrift 10 Buchstaben lang ist - von VSTENO
 als 1 Zeichen betrachtet).
 Auch das Aneinanderreihen von Buchstaben und/oder Kürzungen macht für VSTENO
 keinen Unterschied: Das Wort 
\begin_inset Quotes eld
\end_inset

dafür
\begin_inset Quotes erd
\end_inset

 zum Beispiel wird von VSTENO als zwei Kürzungen betrachtet, welche als
 zwei Zeichen (schattiertes D + normales F) aneinandergereiht wird.
 Wir werden später bei den Regeln sehen, wie Kürzungen - und die Übertragung
 derselben aus der Langschrift - definiert werden können.
\end_layout

\begin_layout Subsection*
Alternative exit points
\end_layout

\begin_layout Standard
Man würde nun vielleicht denken, dass wir langsam alle Besonderheiten stenografi
scher Zeichen abgedeckt haben, aber dem ist nicht so: Es gibt weitere Zeichen,
 die nach Spezialfunktionen verlangen und dazu gehören jene, welche Folgezeichen
 auf zwei verschiedene Arten anschliessen können: entweder (1) 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

: also auf der gleichen Schreiblinie wie bei 95% der Fälle) oder aber (2)
 
\begin_inset Quotes eld
\end_inset

anders
\begin_inset Quotes erd
\end_inset

: in ganz wenigen Fällen.
 Zu diesen Zeichen gehört z.B.
 das vokalische R 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

, welches Folgezeichen normalerweise auf der Grundlinie anschliesst (vgl.
 
\begin_inset Quotes eld
\end_inset

gern
\begin_inset Quotes erd
\end_inset

: die Zeichen r und n stehen auf der gleichen Linie), die Endungskürzungen
 
\begin_inset Quotes eld
\end_inset

(D)EN
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

(D)EM
\begin_inset Quotes erd
\end_inset

 hingegen am oberen Ende anschliesst (vgl.
 
\begin_inset Quotes eld
\end_inset

äusseren
\begin_inset Quotes erd
\end_inset

: das Zeichen r steht auf der Grundlinie, die Endung en hingegen eine halbe
 Stufe höher.
 Dies können wir mit dem Offset 16 alternative exit point (alternativer
 Endpunkt) im Header definieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Einfachkeit halber werden in der Definition die intermediate shadow
 points weggelassen.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"VR" => { /*header0-7*/ 5, 0.5, 0, 0.5, 2, 2, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 2.5, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 5, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0 }
\end_layout

\begin_layout Standard
Wie wir sehen können, enthält der Header im Offset 16 den Wert 5.
 Dies bedeutet nun, dass der 
\begin_inset Quotes eld
\end_inset

alternative Endpunkt
\begin_inset Quotes erd
\end_inset

 auf der y-Achse 5 Pixel höher liegen soll.
 Dies entspricht dem y-Wert des letzten Punktes P5 - also dem Kopfende des
 Zeichens 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

.
 Die Definition einer x-Koordinate ist nicht nötig, da diese automatisch
 beim Aneinanderfügen der Zeichen errechnet wird.
 
\end_layout

\begin_layout Standard
Die Frage ist nun: Wann kommt dieser alternative Endpunkt zum Einsatz.
 Hierzu sehen wir uns die Definition der Endung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 an:
\end_layout

\begin_layout LyX-Code
"EN" => { /*header0-7*/ 5, 0, 0, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 1, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ 5, 0, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 5, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Der entscheidende Wert steht hier im Offset 17 des Headers: Dieser Wert
 entspricht dem exit point to use (zu verwendender Endpunkt).
 VSTENO handhabt dies nun folgendermassen: Verlangt ein Zeichen - wie in
 diesem Fall die Kürzung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 - nach einem alternativen Endpunkt, so prüft VSTENO, ob das vorhergehende
 Zeichen einen solchen definiert.
 Ist dies der Fall (wie beim Zeichen 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

), dann wird er verwendet.
 Bietet das vorhergehende Zeichen keinen alternativen Endpunkt an, so wird
 der normale Endpunkt verwendet (was das richtige Ergebnis liefert, vgl.
 z.B.
 
\begin_inset Quotes eld
\end_inset

laufen
\begin_inset Quotes erd
\end_inset

: hier wird die Endung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 auf der Grundlinie angeschlossen).
\end_layout

\begin_layout Standard
Bietet ein Zeichen einen alternativen Endpunkt an und das Folgezeichen verlangt
 nicht danach, so wird der alternative Endpunkt ignoriert.
\end_layout

\begin_layout Subsection*
Absolute Koordinaten
\end_layout

\begin_layout Standard
Eine weitere Frage betrifft die Koordinaten: Wie werden diese von VSTENO
 gehandhabt? Prinzipiell können diese als absolute oder relative Werte betrachte
t werden.
 Deshalb muss VSTENO angegeben werden, wie es die Koordinaten verrechnen
 soll.
 Dies geschieht im Offset 18, der für die 
\begin_inset Quotes eld
\end_inset

Interpretation y-Koordinate
\begin_inset Quotes erd
\end_inset

 steht.
 Das Feld kann zwei Werte annehmen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y-Koordinaten sind relativ (standard)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y-Koordinaten sind absolut
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Diese Einstellung tut genau das, was der Name sagt: Sämtliche Zeichen, die
 wir bis jetzt definiert haben, verwenden relative Koordinaten (Standardeinstell
ung, Wert 0), was bedeutet, dass die Zeichen bei Höher- oder Tieferstellung
 automatisch 
\begin_inset Quotes eld
\end_inset

mitverschoben
\begin_inset Quotes erd
\end_inset

 werden.
 Wird hier der Wert 1 gesetzt, so wird die y-Koordinaten in den Punkten
 absolut gesetzt.
 Dies kann verwendet werden, wenn Zeichen unter keinen Umständen verschoben
 werden sollen
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir fügen hier kein Beispiel an, weil das Phänomen in der Grundschrift kaum
 vorkommt.
 In der Eilschrift hingegen gibt es die Kürzung 
\begin_inset Quotes eld
\end_inset

Ding(e)
\begin_inset Quotes erd
\end_inset

, welche dem Zeichen 
\begin_inset Quotes eld
\end_inset

NG
\begin_inset Quotes erd
\end_inset

 in unschattierter Höherstellung entspricht.
 Dieses Zeichen muss unbedingt abgetrennt und in Höherstellung geschrieben
 werden.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Unverbundene Zeichen
\end_layout

\begin_layout Standard
Zeichen können verbunden (mit Vorzeichen) oder unverbunden sein.
 Dies trifft zum Beispiel auf Zahlen zu.
 Diese werden - auch in einem stenografischen Text - als normale Zahlen
 in Blockschrift geschrieben (und dürfen somit nicht an das vorangehende
 Zeichen angeschlossen werden).
 Als Beispiel hier die Definition der Zahl 1 (die wir wiederum deshalb wählen,
 weil sie nur aus zwei geraden Strichen besteht und damit sehr einfach ist):
\end_layout

\begin_layout LyX-Code
"1" => { /*header0-7*/ 7, 0, 0, 0, 4, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 1, 0, 0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 11, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 7, 19, 0, 0, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 7, 1, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Der Wert 1 im Offset 22 bedeutet also 
\begin_inset Quotes eld
\end_inset

dieses Zeichen nicht verbinden
\begin_inset Quotes erd
\end_inset

 (der Wert 0 - den wir bis jetzt immer verwendet haben - bedeutet hingegen
 
\begin_inset Quotes eld
\end_inset

dieses Zeichen verbinden
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
Alternativ können Sie auch das Feld dr (draw) im Datentupel des ersten Punktes
 P1 auf den Wert 5 (= don't connect) setzen:
\end_layout

\begin_layout LyX-Code
"1" => { /*header0-7*/ 7, 0, 0, 0, 4, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 1, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 11, 0, 1, 1.0, 5, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 7, 19, 0, 0, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 7, 1, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Zu guter Letzt: Wenn Sie auf Nummer sicher gehen wollen, können Sie sowohl
 1 im Header also auch 5 im draw-Feld des Punktes eintragen ...
 ;-)
\begin_inset Foot
status open

\begin_layout Plain Layout
Zu bevorzugen ist in diesem Fall die Variante 
\begin_inset Quotes eld
\end_inset

Header
\begin_inset Quotes erd
\end_inset

: Es handelt sich hier ja um eine Information, die das ganze Zeichen betrifft.
 Das draw-Feld des Punktes hingegen sollte verwendet werden, wenn INNERHALB
 eines Zeichens gewisse Punkte nicht miteinander verbunden werden.
 WICHTIGER HINWEIS: Mit der SE1 rev1 wurde das dr-Feld neu definiert: Grundsätzl
ich wurde der Integer-Wert innerhalb des 8er-Datentupels umgedeutet.
 Der alte dr-Wert der SE1 rev0 entspricht nun den bits 0-3.
 Die höheren Bits (4-15) werden dazu verwendet, Informationen bzgl.
 orthogonal und proportional Knots (sowie deren dazugehörigen parallelen
 Rotationsachsen) unterzubringen.
 Diese Lösung war deshalb nötig, weil innerhalb des 8er-Tupels nirgendwo
 mehr Platz war, um weitere Informationen unterzubringen.
 Da die Rückwärtskompatibilität aufgrund der Komplexität der SE1 (in der
 zusätzlichen Interaktion mit VPAINT) nur teilweise erreicht wurde, bleiben
 diese Funktionen in der Version 0.1rc deaktiviert (sie werden hier somit
 nur der Vollständigkeit halber erwähnt).
 Eine genaue Dokumentation der Verwendung der einzelnen dr-Bits findet sich
 als Kommentar im File https://github.com/marcelmaci/vsteno/blob/master/php/se1_b
ackports.php.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Anfangsspannung
\end_layout

\begin_layout Standard
Wie wir gesehen haben, müseen bei Bezier-Kurven für den Anfangs- und Endpunkt
 je zwei Spannungen (tensions) definiert werden: eine Eingans- und eine
 Ausgangsspannung.
 Die Spannungen stehen in den Felder t1 und t2 der 8er-Datentupel: 
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1, th, dr, d2, t2
\end_layout

\begin_layout Standard
Hierbei bezeichnet t1 die Ausggangsspannung des Punktes und t2 die Eingangsspann
ung des folgenden Punktes.
 Logischerweise fehlt bei dieser Art der Datenspeicherung die Eingangsspannung
 des ersten Punktes.
 Um diesen Mangel zu beheben wird deshalb die Eingangsspannung des allerersten
 Punktes in den Offset 3 des Headers geschrieben.
\end_layout

\begin_layout Standard
Die Standardregel für diesen Wert lautet: Zeichen, die mit einer Rundung
 beginnen (z.B.
 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

), sollten hier den Wert 0.5 (oder ähnlich) enthalten, Zeichen die spitz
 beginnen (z.B.
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

), den Wert 0.
\end_layout

\begin_layout Subsection*
Zeichenteile
\end_layout

\begin_layout Standard
Ursprunglich konnten in der SE1 nur einzelne Zeichen definiert werden.
 Es kann jedoch auch Sinn machen, Zeichen als eine Folge (Aneinanderreihung)
 von einzelnen (und für verschiedene Zeichen verwendbare) Teile zu definieren.
 Dies wird erreicht, indem im Header im Offset 12 (Zeichentyp) der Wert
 4 gesetzt wird: Die nachfolgenden Daten werden dann als 
\begin_inset Quotes eld
\end_inset

Zeichenteile
\begin_inset Quotes erd
\end_inset

 betrachtet.
 Zeichenteile unterscheiden sich von Zeichen dadurch, dass sie miteinander
 verbunden (joined) werden können.
\end_layout

\begin_layout Standard
Nehmen wir z.B.
 das Zeichen SP in Stolze-Schrey: Wir könnten dieses als Zeichen mit drei
 Einzelteilen betrachten: SP1 = runder Anfangsbogen, SP2 = gerader Strich
 (direkt auf den Bogen folgend) und SP3 = runder Endbogen (direkt auf den
 geraden Strich folgend).
 Wenn wir diese Bestandteile nun als 
\begin_inset Quotes eld
\end_inset

Teile
\begin_inset Quotes erd
\end_inset

 (Wert 4 in Offset 12) definieren, so wird VSTENO sie nahtlos aneinanderfügen.
 Das heisst zum Beispiel, dass der Endpunkt von SP1 und der Anfangspunkt
 von SP2 nur einmal eingefügt wird (da sie zusammenfallen, genau gleich
 bei SP2 und SP3).
 Der verbundene (joined) Punkt zwischen SP1 und SP2 erhält die Eingangsspannung
 von SP1 und die Ausgangsspannung von SP2.
\end_layout

\begin_layout Standard
Der Punkttyp wurde eingefügt in der Annahme, dass sich Zeichenverbindungen
 einfacher und präziser modellieren lassen (indem der Parser z.B.
 genau weiss, wie ein Zeichen endet oder anfängt, da Anfänge und Enden als
 separate Zeichenteile definiert sind).
 Allerdings verkompliziert dies den Parser und es zeigte sich auch, dass
 die Zeichenabstände durch Kategorisierung der Zeichen bereits relativ präzis
 definiert werden können.
\end_layout

\begin_layout Standard
Die Funktion, Zeichenteile aneinanderfügen zu können, kann dennoch für den
 einen oder anderen Fall nützlich sein und wird drum in der SE1 rev0 belassen.
\end_layout

\begin_layout Subsection*
Stenofont
\end_layout

\begin_layout Standard
Nachdem wir nun gesehen haben, wie man ein Zeichen definiert, stellt sich
 die Frage: Wohin mit diesen Informationen, damit VSTENO sich auch verarbeiten
 kann? Betrachten wir noch einmal die komplette Definition des Zeichens
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Sie weicht von den obigen leicht ab: z.B.
 verwendet sie als Vor/Nachbreite des Zeichens den Wert 0 (da der Abstand
 zwischen den Zeichen später von der Funktion 
\begin_inset Quotes eld
\end_inset

Spacer
\begin_inset Quotes erd
\end_inset

 eingefügt wird)
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { /*h*/ 0, 0.5, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/**/ "", "", "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*d*/ 0, 20, 0, 1, 3, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1, 0, 1, 0,
\end_layout

\begin_layout LyX-Code
/**/ 0, 2.5, 0, 4, 1, 0, 0, 0.5 } 
\end_layout

\begin_layout Standard
Diese Definition ist somit eines von vielen Zeichen, die wir zu einem so
 genannten Font (Schriftart) zusammenfassen.
 Ein Font wiederum ist Teil eines so genannten Modells (das einem Stenografische
n System entspricht).
 Ein Modell enthält nebst dem Font (Zeichendefinitionen) auch Regeln (rules),
 die angeben, wie die Zeichen verwendet werden sollen, sowie einen Header
 (Kopf), der allgemeine Informationen zum Modell enthält
\begin_inset Foot
status open

\begin_layout Plain Layout
In der SE1 rev0 ist der Header prinzipiell leer, kann aber dazu verwendet
 werden, Kommentare zum Modell zu machen.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
VSTENO liest die Angaben für ein Modell - also das Font und die Regeln -
 aus der Datenbank.
 Wenn Sie ein eigenes Font (Modell) erstellen wollen, benötigen Sie deshalb
 als erstes ein Benutzer/innen-Konto.
 Loggen Sie sich mit diesem Konto ein und wählen Sie das Modell custom,
 indem Sie links unten auf den Button standard klicken.
 Zur Erinnerung: Das Modell custom ist jener Datenbank-Eintrag, den Sie
 für Ihr persönliches Modell verwenden können (das Modell Standard hingegen
 kann nicht überschrieben werden).
\end_layout

\begin_layout Standard
Wählen Sie nun, wenn Sie das Modell custom gewählt haben, unter dem Punkt
 Edit (nur sichtbar, wenn Sie eingeloggt sind) jenen Bereich des Modells
 aus, den Sie editieren wollen:
\end_layout

\begin_layout Itemize
Header: Enthält allgemeine Informationen zum Modell.
\end_layout

\begin_layout Itemize
Zeichen: Enhält das Font, bestehend aus Zeichen (base), kombinierten Zeichen
 (combiner) und verschobener Zeichen (shifter).
\end_layout

\begin_layout Itemize
Regeln: Enhält die Rules, also die Regeln mit denen VSTENO einen Langsschrifttex
t in Kurzschrift umschreibt.
\end_layout

\begin_layout Standard
Wenn Sie auf einen dieser Bereich klicken, dann öffnet VSTENO einen Texteditor
 mit den Informationen (Definitionen) aus dem entsprechenden Bereich.
 Wichtig ist nun, dass diese Bereiche in Sections und SubSections eingeteilt
 sind, die mit den Schlüsselwörtern #BeginSection() - #EndSection() und
 #BeginSubSection() - #EndSubSection() abgetrennt sind.
 Innerhalb der Klammern wird angegeben, um welchen Teil des sich handelt:
 
\end_layout

\begin_layout Itemize
Die Sections entsprechen den oben genannten Teilen, also: #BeginSection(header)
 - #EndSection(header); #BeginSection(font) - #EndSection(font); #BeginSection(r
ules) - #EndSection(rules)
\end_layout

\begin_layout Itemize
Die SubSections wiederum bedeutet:
\end_layout

\begin_deeper
\begin_layout Itemize
Innerhalb der Section font: den Teilen base, combiner und shifter, die durch
 #BeginSubSection(base) - #EndSubSection(base); #BeginSubSection(combiner)
 - #EndSubSection(combiner); #BeginSubSection(shifter) - #EndSubSection(shifter)
 abgegrenzt sind.
\end_layout

\begin_layout Itemize
Innerhalb der Section rules: jeweils einer sogenannten function (Funktion),
 also Regelteilen, die als logische Einheiten betrachtet und abgerbeitet
 werden (z.B.
 #BeginSubSection() - #EndSubSection(bundler); für jene Regeln, die mehrere
 Zeichen zu einem Zeichen bündeln).
\end_layout

\end_deeper
\begin_layout Standard
Am besten, Sie werfen einen Blick auf das Modell der Grundschrift Stolze-Schrey
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt"

\end_inset


\end_layout

\end_inset

.
 Sie sehen dort, wie die Subsections abgetrennt werden.
\end_layout

\begin_layout Standard
Die Zeichendefinitionen, die wir bis jetzt angeschaut haben, gehören somit
 in die Section font, und innerhalb der Section font in die Subsection base
 (da es sich um Basisdefinitionen handelt, also Zeichen, die als Grundzeichen
 definiert werden).
\end_layout

\begin_layout Standard
Wir werden nun sehen, wie diese Grundzeichen mithilfe des Combiners und
 Shifters verwendet werden können, um weitere kombinierte und verschobene
 Zeichen zu generieren.
\end_layout

\begin_layout Subsection*
Kombinierte Zeichen
\end_layout

\begin_layout Standard
Nachdem wir nun die Struktur eines Modells in den grossen Zügen kennen (und
 wissen, wohin wir die Definitionen speichern müssen, damit sie von VSTENO
 verwendet werden können), widmen wir uns noch einmal den Zeichen (also
 dem Font), um ein paar weitere, sehr hilfreiche Funktionen zu erläutern.
\end_layout

\begin_layout Standard
Im System Stolze-Schrey gibt es bekanntlich Zeichen, welche sich mit anderen
 
\begin_inset Quotes eld
\end_inset

kombinieren
\begin_inset Quotes erd
\end_inset

 können.
 Es sind dies vor allem R und L in Verbindung mit verschiedenen Konsonantenzeich
en wie z.B.
 T, B etc.
 Wir könnten nun für diese Kombinationen einfach neue Zeichen definieren.
 D.h.
 in unserer Gesamtliste an Zeichen würden wir zuerst ein Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 definieren, dann ein Zeichen 
\begin_inset Quotes eld
\end_inset

T+R
\begin_inset Quotes erd
\end_inset

 und schliesslich ein Zeichen 
\begin_inset Quotes eld
\end_inset

T+L
\begin_inset Quotes erd
\end_inset

.
 Das Problem hierbei: Wir betreiben damit doppelt und dreifachen Aufwand!
 Es wäre viel effizienter, wenn VSTENO eine Funktion anböte, um gewisse
 Zeichen automatisch zu kombinieren - und eine solche Funktion existiert
 in der Tat: Sie nennt sich TokenCombiner.
\end_layout

\begin_layout Standard
Damit der TokenCombiner zwei Zeichen verbinden kann, muss er jedoch wissen,
 wo (d.h.
 an welcher Stelle) Zeichen miteinander verbunden werden können und auf
 welche Zeichen dies angewandt werden soll.
 VSTENO stellt hier die Funktion so genannter connection points (Verbindungspunk
te) zur Verfügung: Ein Verbindungspunkt ist ein Punkt eines Zeichens, der
 im Datentupel-Feld d1 (= Offset 3) den Wert 4 enthält.
 Als Beispiel zeigen wir wieder unser Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { /*header*/ 0, 0.5, 0, 0,4,2.5, 0, "",
\end_layout

\begin_layout LyX-Code
/**/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/  0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 20, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 } 
\end_layout

\begin_layout Standard
Wir haben hier das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 also um einen zusätzlichen dritten Punkt P3 ergänzt, welcher die Koordinanten
 (0,2.5) aufweist.
 Dieser Punkt liegt also auf halber Höhe eines halbstufigen Zeichens - und
 ist somit der ideale Ansatzpunkt, um ein 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 einzufügen.
\end_layout

\begin_layout Standard
Das Problem ist hier jedoch, dass wir nicht die bereits definierten r (d.h.
 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

) verwenden können, da diese entweder oben bzw.
 bei 12 Uhr (
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

) oder unten bzw.
 bei 6 Uhr (
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

) beginnen.
 Deshalb definieren wir hier ein spezielles R, welches bei 3 Uhr - also
 rechts auf Viertelhöhe, d.h.
 genau bei der Koordinate (0,2.5) - beginnt:
\end_layout

\begin_layout LyX-Code
"@R" => { /*header0-7*/ 5, 0.5, 0, 0.5, 0, 1, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 0, 0.7, 0, 1.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p2*/ -2, 2, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ -4, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ -2, -2, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 0, 0, 0.5, 0, 1.0, 0, 1, 0.7 }
\end_layout

\begin_layout Standard
Beachten Sie nun, dass wir dieses spezielle R - das wir 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

 nennen, nun nicht an der Koordinate (0,2.5) - wo das Zeichen letztlich eigentlic
h hinkommen soll -, sondern an der Ursprungskoordinate (0,0) beginnen.
 Mit anderen Worten: Sämtliche Koordinaten dieses 
\begin_inset Quotes eld
\end_inset

Verbundzeichens
\begin_inset Quotes erd
\end_inset

 sind als relativ zu verstehen.
 Beim Einfügen werden hier also jeweils die Koordinaten des connection point
 - im dem Falle also (0,2.5) - dazuaddiert.
 Die Punkte P1-P5 definieren einen Kreis im Gegenuhrzeigersinn, der im Ursprung
 endet (wo er begonnen hat).
 Beachten Sie auch, dass der Punkt P4 als Drehpunkt definiert wird: Dadurch
 wird sichergestellt, dass Zeichen, die tiefergestellt werden (wie z.B.
 in 
\begin_inset Quotes eld
\end_inset

Thron
\begin_inset Quotes erd
\end_inset

) später elegant angeschlossen werden.
\end_layout

\begin_layout Standard
Nachdem wir unsere beiden Einzel-Zeichen nun definiert haben, brauchen wir
 VSTENO nur noch zu sagen, dass wir die Zeichen kombinieren wollen.
 Wir tun dies, indem wir dem TokenCombiner vier Informationen übergeben:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout Standard
Die 4 Informationen, die der TokenCombiner benötigt sind somit: (1) erstes
 Zeichen: 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, (2) zweites Zeichen: 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, (3) Vorgängiges Delta-y: 0, (4) Nachträgliches Delta-y: 0.
\end_layout

\begin_layout Standard
Diese Zeile genügt also, um das neue Zeichen 
\begin_inset Quotes eld
\end_inset

T@R
\begin_inset Quotes erd
\end_inset

 zu generieren.
 Beachten Sie hierbei, dass der Name des kombinierten Zeichens immer die
 Zusammenfügung von 
\begin_inset Quotes eld
\end_inset

Zeichen1
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

Zeichen2
\begin_inset Quotes erd
\end_inset

 ist (hier also 
\begin_inset Quotes eld
\end_inset

T@R
\begin_inset Quotes erd
\end_inset

).
 Die Werte vorgängiges und nachträgliches Delta-y werden in den Header des
 neuen Zeichens geschrieben.
 Genauer gesagt: Der TokenCombiner verwendet den Header des ersten Zeichens
 als Basis und ersetzt dann nur diese beiden Felder durch die angegebenen
 Werte.
 Ebenfalls passt der TokenCombiner die Breite des neuen Zeichens automatisch
 an (die Breite des neuen Zeichens entspricht der Summe der beiden Zeichenbreite
n).
 Zu guter Letzt: Wenn wir zwei Zeichen kombinieren, besteht natürlich die
 Gefahr, dass das neue Zeichen mehrere Anfangs- und Endpunkte hat.
 Der TokenCombiner analysiert deshalb das neue Zeichen, löscht überflüssige
 Anfangs- oder Endpunkte (indem er sie in 
\begin_inset Quotes eld
\end_inset

normale
\begin_inset Quotes erd
\end_inset

 Punkte umwandelt) und behält nur den ersten und letzten Punkt des Zeichens
 als Anfangs- und Endpunkt.
\end_layout

\begin_layout Standard
Der TokenCombiner ist ein ungemein praktisches Werkzeug, um im Handumdrehen
 neue Zeichenkombinationen zu generieren.
 Z.B.
 genügt es, beim Zeichen 
\begin_inset Quotes eld
\end_inset

D
\begin_inset Quotes erd
\end_inset

 einen Verbindungspunkt P3 = 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 wie im Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 einzusetzen und den TokenCombiner zu ergänzen:
\end_layout

\begin_layout Standard
In #SubSection(base):
\end_layout

\begin_layout LyX-Code
     "D" => { /*header*/ 0, 0.5, 0, 0, 2 ,3, 0, "",
\end_layout

\begin_layout LyX-Code
     /**/ "","","","",0,0,0,0, 
\end_layout

\begin_layout LyX-Code
     /*++*/ 0,0,0,0,0,0,0,0, 
\end_layout

\begin_layout LyX-Code
     /*data*/ 0, 10, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
     /**/ 0, 0, 0, 0, 1.0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
     /*connection point*/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 }   // neue Zeile
\end_layout

\begin_layout Standard
In #SubSection(combiner):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 => {
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

D
\begin_inset Quotes erd
\end_inset

 => {
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout Standard
Zwei Zeilen genügen somit, um das neue Zeichen 
\begin_inset Quotes eld
\end_inset

D@R
\begin_inset Quotes erd
\end_inset

 zu generieren.
 Da dieses - wie die übrigen Grundzeichen - ins Hauptfont von VSTENO geschrieben
 wird, können Sie es danach ohne Einschränkung wie jedes andere Zeichen
 verwenden!
\end_layout

\begin_layout Subsection*
Punktschlingen
\end_layout

\begin_layout Standard
Der TokenCombiner funktioniert in den meisten Fällen recht gut.
 Allerdings zeigte sich, dass bei der Verbindung mit sehr kleinen Zeichen
 - in Stolze-Schrey zum Beispiel - das Punktschlingen-L das Problem entstehen
 kann, dass das zweite Zeichen aufgrund der Schattierung des ersten Zeichens
 kaum sichtbar ist.
 Mit anderen Worten: Die Schattierung ist so breit, dass sie einen Teil
 des kombinierten Zeichens überdeckt.
\end_layout

\begin_layout Standard
Als Lösung empfahl es sich hier, den TokenCombiner um einen so genannten
 Randvektor (border vector) zu ergänzen.
 Der Randvektor ist jener Wert der angibt, wo bei einem schattierten Zeichen
 der Aussenrand der Schreiblinie verläuft.
 Zur Illustration zeigen wir hier die Kombination des Zeichens 
\begin_inset Quotes eld
\end_inset

P
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
"P" => { 
\end_layout

\begin_layout LyX-Code
   /*header*/ 4, 0.5, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
         /**/ "", "", 0.0, 0.75, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
         /**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
   /*data*/ 0, 20, 0, 1, 3, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
       /**/ 0, 2.5, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
       /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,    // Verbindungspunkt
\end_layout

\begin_layout LyX-Code
       /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,    // Weiterführungspunkt
\end_layout

\begin_layout LyX-Code
       /**/ 4, 2, 0, 0, 1, 0, 1, 0
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
mit dem Punktschlingen-L 
\begin_inset Quotes eld
\end_inset

@L
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
"@L" => { 
\end_layout

\begin_layout LyX-Code
    /*header*/ 0, 0, 0, 0.5, 2, 2, 0, "", 
\end_layout

\begin_layout LyX-Code
          /**/ "", "yes", "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
          /**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
    /*data*/ 0, 0, 1, 0.5, 1, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
        /**/ 1, 1, 0.5, 0, 1, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
        /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
        /**/ -1, 1, 0.5, 0, 1, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
        /**/ 0, 0, 0.5, 0, 1, 0, 1, 0.5 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
die wie gewohnt über den TokenCombiner verbunden werden:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(combiner)
\end_layout

\begin_layout LyX-Code
    "B" => { "@L", 0, 0 } 
\end_layout

\begin_layout LyX-Code
#EndSubSection(combiner)
\end_layout

\begin_layout Standard
Der entscheidende Unterschied liegt hier in den Offsets 10 und 11 des Headers:
 Die Werte bvectx = 0.0 und bvecty = 0.75 entsprechen hier dem besagten Randvektor
 R(0.0/0.75).
 Was aber bedeuten diese Werte genau?
\end_layout

\begin_layout Standard
Wie wir sehen liegt der Verbindungspunkt (Wert 4 im Offset 3 des Datentupels)
 im Punkt V(2,0), was dem Fusspunkt des Zeichens B entspricht.
 Normalerweise würde nun genau hier (d.h.
 mit diesen Koordinaten) das zweite Zeichen mit dem ersten verbunden.
 Allerdings beträgt die Dicke des Zeichens bei Schattierung an dieser Stelle
 1.5.
 Dieser Wert ist relativ (relative_thickness) und gibt die Strichdicke im
 Vergleich zur Grunddicke an, die im Formular unter Dicke bzw.
 mit der Session-Variable 'token_thickness' angegeben werden.
 Ausserdem kann die Schattierung des Zeichens ihrerseits mit dem Wert Schattieru
ng im Formular bzw.
 der Session-Variablen 'token_shadow' weiter differenziert werden.
 Die endgültige Strichdicke D berechnet sich also wie folgt:
\end_layout

\begin_layout LyX-Code
D = relative_thickness * token_size * token_shadow
\end_layout

\begin_layout Standard
Der genaue Wert von D braucht uns aber nicht zu kümmern.
 Uns interessiert hier nur der relative Wert (relative_thickness) und 1.5
 bedeutet in dem Fall 
\begin_inset Quotes eld
\end_inset

eineinhalb mal dicker
\begin_inset Quotes erd
\end_inset

 als die Grunddicke (ganz egal, welche zusätzlichen Werte der/die Benutzer/in
 hier wählt).
 Da das von uns definierte Punktschlingen-L rund 3 Einheiten hoch ist (von
 y=+2 bis y=-1) wird es folglich zur Hälfte durch die Schattierung des Grundzeic
hens verdeckt.
\end_layout

\begin_layout Standard
Der Randvektor R(0.0/0.75) bedeutet nun, dass wir dies korrigieren, indem
 wir die Koordinaten des zweiten Zeichens 
\begin_inset Quotes eld
\end_inset

@L
\begin_inset Quotes erd
\end_inset

 relativ um 0.75 auf der y-Achse nach oben verschieben (die Modellierung
 erfolgt hier bei 90 Grad, also am aufrecht stehenden Zeichen).
 Dadurch wird also nur noch ein Viertel (0.75 von 3) durch die Schattierung
 verdeckt, wodurch das Zeichen besser lesbar wird.
\end_layout

\begin_layout Standard
Allerdings ergibt sich ein Problem: Das Grundzeichen 
\begin_inset Quotes eld
\end_inset

P
\begin_inset Quotes erd
\end_inset

 wurde so definiert, dass zuerst der Verbindungspunkt (2,0), danach das
 Verbundzeichen 
\begin_inset Quotes eld
\end_inset

@L
\begin_inset Quotes erd
\end_inset

 und schliesslich ein Weiterführungspunkt (2,0) eingefügt wird.
 Da der Verbindungspunkt vom TokenCombiner durch den Eintrittspunkt des
 Verbundzeichens ersetzt wird, ergäbe sich hier die Situation, dass dieser
 nicht - wie benötigt - bei (2,0) zu liegen käme, sondern bei (2,0.75) -
 eben um den Vektor R(0.0,0.75) nach oben verschoben.
 Dadurch würde das Grundzeichen B 
\begin_inset Quotes eld
\end_inset

verbogen
\begin_inset Quotes erd
\end_inset

.
 Um dies zu verhindern, wird der Eintrittspunkt des Verbundzeichens nicht
 relativ verschoben.
 Auch dies hat negative Effekte: Da nun der Eintrittspunkt - im Unterschied
 zu allen anderen Punkten des Verbundzeichens - nicht verschoben wird, stimmen
 nun die Relationen der Punkte im Folgezeichen untereinander nicht mehr
 ganz (und somit wird das Folgezeichen verbogen).
 Dieser Fehler ist innerhalb kleiner Verbundzeichen (wie eben das Punktschlingen
-L) nicht störend und kann somit als 
\begin_inset Quotes eld
\end_inset

pragmatische
\begin_inset Quotes erd
\end_inset

 und brauchbare Lösung gelten.
 Allerdings kann er in Verbundzeichen (zum Beispiel dem Verbund-R) unschöne
 Effekte habe (das R wirkt dann nicht mehr rund, sondern 
\begin_inset Quotes eld
\end_inset

eiert
\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Standard
Deshalb besteht die Möglichkeit, über das zweite Zeichen festzulegen, ob
 eine Kompensation verwendet werden will oder nicht.
 Dieser Wert wird in Offset 10 und ist oben bei 
\begin_inset Quotes eld
\end_inset

@L
\begin_inset Quotes erd
\end_inset

 als 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 erkennbar:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 bedeutet also: Es soll eine Randvektor-Kompensation vorgenommen werden,
 FALLS das Grundzeichen eine solche anbietet (d.h.
 Werte in Offset 10 und 11 =/= 0).
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 bedeutet: Es wird in jedem Fall auf eine Kompensation verzichtet (auch
 wenn das Grundzeichen eine Kompensation anbietet).
\end_layout

\begin_layout Standard
Durch Setzen des Wertes 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 in Offset 10 des Zeichens 
\begin_inset Quotes eld
\end_inset

@R6
\begin_inset Quotes erd
\end_inset

 können also auch Verbundzeichen wie 
\begin_inset Quotes eld
\end_inset

P@R6
\begin_inset Quotes erd
\end_inset

 korrekt dargestellt werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Aus Gründen der Rückwärtskompatibilität mit bereits erstellten Modellen
 gilt hier sogar: Jeder Wert in Offset 10, der nicht 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 ist, wird als 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 betrachtet.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Verschobene Zeichen
\end_layout

\begin_layout Standard
Ähnlich wie der TokenCombiner funktioniert auch der TokenShifter: Dieser
 ermöglicht es, Zeichen horizontal oder vertikal zu verschieben.
 Im System Stolze-Schrey kann dies z.B.
 dazu verwendet werden, Anschlüsse von Zeichen an ein Aufstrich-T zu definieren,
 ohne das entsprechende Zeichen noch einmal neu eingeben zu müssen.
 Wir tragen in die #Subsection(shifter) also folgende Zeile ein:
\end_layout

\begin_layout LyX-Code
"N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout Standard
Der TokenShifter benötigt 6 Informationen, die folgendes bedeuten: (1) zu
 verschiebendes Zeichen: 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, (2) Name des neuen Zeichens: 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

, (3) Verschiebung auf x-Achse: 4 Pixel nach rechts, (4) Verschiebung auf
 y-Achse: 15 Pixel (= 1.5 Stufen) nach oben, (5) vorgängiges Delta-y: 0 (Schreibz
eile verschiebt sich nicht), (6) nachträgliches Delta-y: 15 (Schreibzeile
 verschiebt sich um 15 Pixel bzw.
 1.5 Stufen nach oben).
 Das Grundzeichen 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 wird durch diese Anweisung also um 1.5 Stufen nach oben und 4 Pixel nach
 rechts verschoben.
 Das neue Zeichen heisst 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

 und die Schreiblinie verschiebt sich nach dem Zeichen um 1.5 nach oben.
 Wenn nun dieses Zeichen im Wort 
\begin_inset Quotes eld
\end_inset

Zentner
\begin_inset Quotes erd
\end_inset

 vom Grundlinien-N aus verbunden wird, so entspricht 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

 einem Aufstrich-T.
 Die neue Schreiblinie befindet sich am Fusspunkt des Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Auch dies ist eine sehr effiziente Art, neue Zeichen zu generieren.
 Für das neue Zeichen 
\begin_inset Quotes eld
\end_inset

&TENS
\begin_inset Quotes erd
\end_inset

, welches einem Aufstricht-T verbunden mit dem Grundzeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 entspricht, genügt z.B.
 die folgende zusätzliche Zeile in #SubSection(shifter):
\end_layout

\begin_layout LyX-Code
    "N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout LyX-Code
    "NS" => { "&TENS", 4, 10, 0, 1 }    
\end_layout

\begin_layout Standard
Soll statt dem Aufstrich-T die Kürzung 
\begin_inset Quotes eld
\end_inset

HEIT
\begin_inset Quotes erd
\end_inset

 verwendet werden, genügt eine grössere Verschiebung auf der x-Achse:
\end_layout

\begin_layout LyX-Code
    "N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout LyX-Code
    "NS" => { "&TENS", 4, 10, 0, 1 } 
\end_layout

\begin_layout LyX-Code
    "NS" =>{ "&EITENS", 18, 10, 0, 1 } 
\end_layout

\begin_layout Standard
Beachten Sie dass die vertikale Verschiebung hier nur 10 Pixel beträgt,
 da das Zeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 im Unterschied zu 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 einstufig ist.
 Aus diesem Grund kommt auch die neue Schreiblinie nur 1 Stufe höher zu
 liegen (also eine halbe Stufe tiefer als bei 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

)
\begin_inset Foot
status open

\begin_layout Plain Layout
Abschliessend ist zu erwähnen, dass dies nur eine Möglichkeit ist, das Aufstrich
-T mit anschliessendem Zeichen zu definieren.
 Wenn die Stenozeichen nur noch mit einer Nettobreite (also ohne Vor/Nachbreite)
 definiert werden, kann auf die Kreierung eines weiteren Zeichens via Shifter
 vollständig verzichtet werden.
 Stattdessen wir einfach ein Aufstrich-T definiert, welches nur den Punkt
 (18,10) als Eingangs- und Endpunkt enhält.
 Aufgrund der 
\begin_inset Quotes eld
\end_inset

Nettobreite
\begin_inset Quotes erd
\end_inset

 der Zeichen, wird das Folgezeichen nun unmittelbar angeschlossen.
 Man muss dann einzig noch darauf achten, dass die Schreibzeilenverschiebung
 richtig gehandhabt wird (kann z.B.
 direkt über verschiedene Definitionen des Aufstrich-T mit verschiedenen
 Schreiblinien erreicht werden).
 Dies ist inzwischen auch das Schöne an VSTENO: Die SE1 rev0 bietet hinsichtlich
 des Parsers (Regeln) und der Zeichendefinitionen z.T.
 mehrere Möglichkeiten, um die eine oder andere spezifische Eigenschaft
 eines Stenosystems umzusetzen.
 Gleiches gilt hier z.B.
 für die Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

: wir haben diese weiter oben mithilfe der Header-Felder inconditional_y_before
 realisiert.
 Es wäre aber u.U.
 auch möglich gewesen, hier den Shifter zu verwenden (einziges Problem das
 hier zusätzlich zu betrachten ist, wäre hier die Endschlaufe).
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Mit Version 0.3 (Hyperion) erhält der TokenShifter eine zusätzliche Funktionalitä
t.
 Im Normalfall löscht der TokenShifter die Gruppeninformation (Offset 23)
 des Basiszeichens.
 Dadurch wird erreicht, dass an gewisse Zeichen (wie typischerweise das
 Aufstrich-T) direkt angeschlossen werden kann.
 Für die Eilschrift Stolze-Schrey wäre es aber praktisch, wenn man Zeichen
 so verschieben könnte, dass sie ihre Gruppeninformation (und somit auch
 ihren Abstand für den Spacer) bewahren.
 Dies kann erreicht werden, indem das letzte Argument (= vertikale Verschiebung)
 in Anführungszeichen (= Stringformat) gesetzt wird:
\end_layout

\begin_layout LyX-Code
"TT" => { "TT1", 0, -10, 0, "-1" }
\end_layout

\begin_layout Standard
Generiert ausgehend vom Grundzeichen 
\begin_inset Quotes eld
\end_inset

TT
\begin_inset Quotes erd
\end_inset

 ein neues Zeichen 
\begin_inset Quotes eld
\end_inset

TT1
\begin_inset Quotes erd
\end_inset

.
 Die Verschiebung auf der x-Achse beträgt 0, auf der y-Achse -10 (d.h.
 das Zeichen wird um eine ganze Stufe nach unten versetzt).
 Das vorgängige Delta-y beträgt 0, das nachträgliche Delta-y beträgt -1
 (d.h.
 die Schreibzeile verschiebt sich um eine Zeile nach unten, nachfolgende
 Zeichen werden also eine Zeile tiefer angeschlossen).
 Gleichzeitig bleibt - wegen der Anführungszeichen - die Gruppeninformation
 des ursprünglichen Zeichens 
\begin_inset Quotes eld
\end_inset

TT
\begin_inset Quotes erd
\end_inset

 erhalten (wird also nach 
\begin_inset Quotes eld
\end_inset

TT1
\begin_inset Quotes erd
\end_inset

 kopiert), sodass auf TT1 folgende Zeichen den gleichen Abstand haben wie
 auf TT folgende Zeichen.
 Mit anderen Worten: 
\begin_inset Quotes eld
\end_inset

TT
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

TT1
\begin_inset Quotes erd
\end_inset

 verhalten sich absolut gleich, nur dass 
\begin_inset Quotes eld
\end_inset

TT
\begin_inset Quotes erd
\end_inset

 auf der Grundlinie steht und 
\begin_inset Quotes eld
\end_inset

TT1
\begin_inset Quotes erd
\end_inset

 eine Zeile tiefer
\begin_inset Foot
status open

\begin_layout Plain Layout
Dieses Zeichen wird zum Beispiel in der Eilschrift-Variante der Wörter 
\begin_inset Quotes eld
\end_inset

tatsächlich
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Tatsache
\begin_inset Quotes erd
\end_inset

 verwendet (das schattierte Zeichen 
\begin_inset Quotes eld
\end_inset

TT1
\begin_inset Quotes erd
\end_inset

 steht für die Abkürzung {TAT}).
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Diakritische Zeichen
\end_layout

\begin_layout Standard
Diakritische Zeichen sind Zeichen, welche Wörtern, einzelnen Zeichen oder
 Vokalen hinzugefügt werden, um Zweifelsfälle (also zum Beispiel gleichlautende
 oder gleichgeschriebene) Wörter oder Silben (insbesondere zum Beispiel
 Präfixe) mit mehrfacher Bedeutung voneinander zu unterscheiden.
 Beispiele in Stolze-Schrey sind: das Aufheben von Kürzungen (kleiner, schräger
 Strich unterhalb von b oder g zur Aufhebung der Vorsilben be- und ge-),
 Unterscheidung Gross/Kleinschreibung (flacher Strich unterhalb b bedeutet
 Grossschreibung), Unterscheidung ai/ei (Punkt oberhalb der weiten, hochgestellt
en, nicht-schattierten Verbindung bedeutet ai), Unterscheidung lange/kurze
 Vokale (u-förmiges Böglein oder Strich oberhalb der Vokalverbindung).
\end_layout

\begin_layout Standard
Solche diakritische Zeichen lassen sich hinsichtlich des Schreibvorgangs
 dadurch charakterisieren, dass der Stift jeweils kurz abgesetzt wird, um
 diese Zeichen unter- oder oberhalb einzufügen.
 Da sich Stenografie prinzipiell dadurch auszeichnet, dass - in Hinblick
 auf eine höhere Schreibgeschwindigkeit - der Stift nicht abgesetzt wird,
 müssen Sie innerhalb von VSTENO speziell umgesetzt werden.
 Als Beispiel: Ein/e menschliche/r Stenograf/in hat zwei Möglichkeiten,
 Stenogramme mit diakritischen Zeichen zu verfassen: (1) Er/Sie schreibt
 das Wort bis zu jener Stelle, wo ein diakritisches Zeichen eingefügt werden
 muss, unterbricht dann kurz, fügt das Zeichen ein und schreibt anschliessend
 das Wort zu Ende; (2) Er/Sie schreibt zuerst das Ganze Wort zu Ende und
 fügt erst am Schluss das diakritische Zeichen dort ein, wo es benötigt
 wird.
 Der menschliche Geist ist in dem Sinne bemerkenswert, als dass es ihm leicht
 fällt, diese beiden Methoden beliebig zu verwenden:
\end_layout

\begin_layout Itemize
Im ersten Fall (Absetzen) fällt es ihm leicht, den Stift nach dem Einfügen
 des diakritischen Zeichens wieder dort anzusetzen, wo er den Schreibfluss
 unterbrochen hat und den Rest des Stenogrammes - inklusive eventueller
 
\begin_inset Quotes eld
\end_inset

Bögen
\begin_inset Quotes erd
\end_inset

, die begonnen wurden - zu Ende zu führen.
\end_layout

\begin_layout Itemize
Im zweiten Fall (Einfügen am Schluss) fällt es ihm leicht, im Nachhinein
 jene genaue Stelle im Stenogramm zu finden, wo das diakritische Zeichen
 hingehört.
\end_layout

\begin_layout Standard
Computer verfügen nicht über eine derartige 
\begin_inset Quotes eld
\end_inset

Intuition
\begin_inset Quotes erd
\end_inset

 und somit muss VSTENO sehr präzise Anweisungen erhalten, wie diakritische
 Zeichen eingefügt werden sollen.
 Ähnlich wie im Fall (2) schreibt VSTENO zuerst das gesamte Stenogramm (als
 eine durchgehende Folge von Bezierkurven, die in einem Spline definiert
 sind) und fügt dann - in einer zweiten (elektronischen) 
\begin_inset Quotes eld
\end_inset

Handbewegung
\begin_inset Quotes erd
\end_inset

 gewissermassen - ein diakritisches Zeichen ein, indem es einen zweiten,
 separaten Spline zeichnet (der wiederum eine durchgehende Linie bzw.
 eine Folge von Bezier-Kurven darstellt).
 
\end_layout

\begin_layout Standard
Wie aber 
\begin_inset Quotes eld
\end_inset

merkt
\begin_inset Quotes erd
\end_inset

 sich (bzw.
 
\begin_inset Quotes eld
\end_inset

weiss
\begin_inset Quotes erd
\end_inset

) VSTENO an welcher Stelle ein diakritisches Zeichen eingefügt werden muss?
 Ganz einfach: Diakritische Zeichen werden als kombinierte Zeichen gehandhabt,
 d.h.
 es kann wiederum der TokenCombiner verwendet werden, um ein diakritisches
 Zeichen mit einem Basiszeichen zu verbinden.
 Hier ein Beispiel für das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

: wir wollem diesem einen diakritischen Schrägstrich unterhalb einfügen,
 um die Vorsilbe be- nach Bedarf aufgheben zu können.
 Hierfür definieren wir zunächst unser Grundzeichen: 
\end_layout

\begin_layout LyX-Code
"B" => { 
\end_layout

\begin_layout LyX-Code
  /*header*/ 4.5, 0.5, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
        /**/ "", "", "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
        /**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
  /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
      /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
      /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
      /**/ 2.25, 0, 0.5, 0, 1.5, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
      /**/ 4.5, 2, 0.5, 0, 1, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
      /**/ 2, -5, 0, "@#/", 0, 0, 0, 0 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Wir erkennen hier das letzte Datentupel { 2, -5, 0, "@#/", 0, 0, 0, 0 },
 welches an vierter Stelle den Wert 
\begin_inset Quotes eld
\end_inset

@#/
\begin_inset Quotes erd
\end_inset

 enthält.
 Wir erinnern uns: Die Information an vierter Stelle (= Offset 3, = Datenfeld
 1, = d1) bezeichnet den Eintritts-Punkttyp (mit möglichen Werten wie 1=entry
 knot, 2=pivot point oder 4=kombiniertes Zeichen).
 Der Wert 
\begin_inset Quotes eld
\end_inset

@#/
\begin_inset Quotes erd
\end_inset

 gibt nun an, dass sich das Basiszeichen B mit dem diakritischen Zeichen
 
\begin_inset Quotes eld
\end_inset

@#/
\begin_inset Quotes erd
\end_inset

 verbinden kann.
\end_layout

\begin_layout Standard
Diese diakritische Zeichen 
\begin_inset Quotes eld
\end_inset

@#/
\begin_inset Quotes erd
\end_inset

 definieren wir nun ebenfalls:
\end_layout

\begin_layout LyX-Code
"@#/" => { 
\end_layout

\begin_layout LyX-Code
  /*header*/ 4.5, 0.5, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
        /**/ "", "", "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
        /**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
  /*data*/ 0, 0, 0.0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
      /**/ -5, -4, 0.0, 0, 1.0, 0, 1, 0.0 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Wie wir sehen enthält es im Datenteil (data) nur 2 Punkte: P1(0,0) und P2(-5/-4).
 Beide Punkte haben ausserdem einen Eintritts- und Austrittsspannung von
 0.0 (was einer spitzen - bzw.
 hier: geraden - Verbindung entspricht).
 Dies ist das, was wir wollen: eine gerade Linie von links unten P2(-5,-4)
 nach rechts oben P1(0,0)
\begin_inset Foot
status open

\begin_layout Plain Layout
In der Beschreibung 
\begin_inset Quotes eld
\end_inset

von links unten nach rechts oben
\begin_inset Quotes erd
\end_inset

 wurde natürlich die Reihenfolge der Punkte P1 und P2 vertauscht.
 VSTENO ist es egal, in welche Richtung die Linie gezeichnet wird (in diesem
 Fall also von rechts oben nach links unten - was wohl am ehesten der natürliche
n Ausführung eines/r menschlichen Stenografen/in entspricht.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Wo aber steht nun dieser Schrägstrich? Oder anders gesagt: Wie werden die
 Koordinaten der Punkte P1 und P2 interpretiert? Da sich diakritische Zeichen
 mit verschiedenen Zeichen verbinden können (und folgedessen unter Umständen
 auch an verschiedenen Positionen eingefügt werden müssen) verwendet VSTENO
 hier eine relative Koordinatenangabe.
 Die Punkte P1(0,0) und P2(-5,-4) werden ausgehend vom Ursprungspunkt aus
 berechnet, die in der Definition von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 angegeben sind: Grundpunkt G(2/-5).
 Die absoluten Koordinaten ergeben in diesem Fall P1'(2,-5) und P2'(-3,-9).
 Der Grundpunkt gibt also an, in welchem Abstand zum Basiszeichen das diakritisc
he Zeichen steht, in unserem Fall also G(2,-5) was bedeutet, dass der Schrägstri
ch halbstufig unterhalb und etwa in der Mitte des Grundzeichens 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 beginnen soll.
 
\end_layout

\begin_layout Standard
Bitte beachten Sie bei der Definition diakritischer Zeichen zwei Dinge:
 (1) diakritische Zeichen werden nicht geneigt, sondern mit den Koordinaten
 eingefügt, die Sie angeben (diakritische Zeichen sehen somit unabhängig
 von der Neigung immer gleich aus); (2) Der Grundpunkt hingegen wird mit
 dem Grundzeichen mitgeneigt, d.h.
 diakritische Zeichen unterhalb der Grundlinie verschieben sich z.B.
 bei einer Zeichenneigung von 60 Grad nach links, diakritische Zeichen oberhalb
 der Grundlinie nach rechts (je höher umso weiter nach rechts).
\end_layout

\begin_layout Standard
Um das Grundzeichen und das diakritische Zeichen miteinander zu verbinden,
 verwenden wir schliesslich den TokenCombiner:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(combiner)
\end_layout

\begin_layout LyX-Code
    "B" => { "@#/", "", "" } 
\end_layout

\begin_layout LyX-Code
#EndSubSection(combiner)
\end_layout

\begin_layout Standard
Entscheidend ist hier, dass wir an zweiter und dritter Stelle, dass wir
 einen leeren String 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 verwenden: VSTENO erkennt daran, dass es sich nicht um eine Zeichenverbindung
 mithilfe eines Verbindungspunktes (connection point, Typ 4) handelt, sondern
 um ein Zeichen, das als separaten Spline gezeichnet werden soll
\begin_inset Foot
status open

\begin_layout Plain Layout
Zur Erinnerung: Die 
\begin_inset Quotes eld
\end_inset

klassische
\begin_inset Quotes erd
\end_inset

 Form des TokenCombiners lautet "B" => { "@R6", 0, 0 }.
 Hier wird das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit 
\begin_inset Quotes eld
\end_inset

@R6
\begin_inset Quotes erd
\end_inset

 (= R mit Fusspunkt bei 6 Uhr) verbunden.
 Die Zahlen-Werte 0 und 0 stehen hier für die zusätzliche Zeichenbreite
 vor und nach dem kombinierten Zeichen stehen.
\end_layout

\end_inset

.
 Das neue entstandene, kombinierte Zeichen lautet auch hier: Grundzeichen
 + diakritisches Zeichen, also 
\begin_inset Quotes eld
\end_inset

B@#/
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Der TokenCombiner ordnet das Zeichen 
\begin_inset Quotes eld
\end_inset

B@#/
\begin_inset Quotes erd
\end_inset

 derselben Spacer-Gruppe zu wie das Grundzeichen.
 Durch die Verwendung diakritischer Zeichen wird die Abstandsberechnung
 noch einmal komplizierter, da weitere Zeichen entstehen, die die möglichen
 Kombinationen (Permutationen) weiter in die Höhe treiben.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Zeichenskalierung
\end_layout

\begin_layout Standard
In VSTENO können Zeichen über verschiedene Parameter, insbesondere die die
 Session-Variable token_size, global skaliert werden.
 Zwar kann die Variable token_size mit Inline-Option-Tags on-the-fly geändert
 werden:
\end_layout

\begin_layout LyX-Code
<@token_size=1.6>gross
\end_layout

\begin_layout LyX-Code
<@token_size=0.8>klein
\end_layout

\begin_layout Standard
Die Wörter 
\begin_inset Quotes eld
\end_inset

gross
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

klein
\begin_inset Quotes erd
\end_inset

 werden auch tatsächlich in verschiedenen Grössen geschrieben, allerdings
 ergibt sich das Problem, dass sie bezüglich der Grundlinie nicht richtig
 platziert werden.
 Diese werden nämlich von VSTENO nur einmal - zu Beginn der Dokumentgenerierung
 anhand der globalen Variable token-size festgelegt.
\end_layout

\begin_layout Standard
Will man also Zeichen verschiedener Grösse so verwenden, dass alle auf der
 bestehenden Grundlinie zu liegen kommen, müssen die Zeichen individuell
 skaliert werden.
 Sinn macht dies zum Beispiel bei handgeschriebenen Zeichen.
 Angenommen, wir haben ein Zeichen A in grossen Blockbuchstaben folgendermassen
 definiert:
\end_layout

\begin_layout LyX-Code
"#A+" => { /*header*/     10,  0,  0,  0,  4, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
                           0,  0, "", "",  0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
                           0,  0,  1,  0,  0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
           /*data*/   0,   0,  0,  1,  1,  5, 0, 0, 
\end_layout

\begin_layout LyX-Code
               /**/   5,  19,  0,  0,  1,  0, 0, 0, 
\end_layout

\begin_layout LyX-Code
               /**/  10,   0,  0,  0,  1,  0, 0, 0, 
\end_layout

\begin_layout LyX-Code
               /**/ 2.5, 9.5,  0,  0,  1,  5, 0, 0, 
\end_layout

\begin_layout LyX-Code
               /**/ 7.5, 9.5,  0,  0,  1,  0, 1, 0 } 
\end_layout

\begin_layout Standard
Dieses Zeichen besteht im Wesentlichen also aus drei geraden Strichen: (0,0)-(5,
19), (5,19)-(10,0) und (2.5,9.5)-(7.5,9.5).
 Bitte beachten Sie, dass für die Zeichenbezeichnung die Folge #A+ gewählt
 wurde: # = Blockschrift, A = Zeichen, + = Grossbuchstabe.
 Diese Schreibweise sollte für den Zeichetyp (token_type) Handschrift (handwriti
ng) zwingend verwendet werden, da der Parser diese Zeichenfolge dann automatisch
 generiert.
\end_layout

\begin_layout Standard
Im Vergleich zu den Stenozeichen, erscheint dieses zweistufige Blockschrift-A
 nun sehr gross.
 Wir möchten es deshalb auf die Hälfte verkleinern.
 Wir können dies erreichen, indem wir den TokenShifter verwenden.
 Nebst dem Verschieben von Zeichen, kann der TokenShifter die Zeichen also
 auch vergrössern oder verkleinern (skalieren) und ausserdem die Strichdicke
 anpassen (was beim Skalieren von Zeichen prinzipiell erforderlich ist,
 damit die Schriftproportionen optisch in verschiedenen Grössen aufeinander
 abgestimmt sind).
\end_layout

\begin_layout Standard
Um ein Zeichen zu skalieren verwenden wir innerhalb des TokenShifters anstelle
 von Zahlen nun Strings für die letzten beiden Argumente:
\end_layout

\begin_layout LyX-Code
"#A+" => { "#A+0", 0.5, 0.5, "", "" } 
\end_layout

\begin_layout Standard
Bedeutet also: Verwende das Basiszeichen #A+, skaliere dieses um den Faktor
 0.5 (= halbe Grösse) und gebe dem neuen Zeichen den Namen #A+0.
 Der Wert 0.5 wird hier zwei Mal angegeben, einmal für den x-Faktor und einmal
 für den y-Faktor (es ist also z.B.
 möglich, ein Zeichen nur in der Höhe, nicht aber in der Breite zu verändern).
\end_layout

\begin_layout Standard
Für das neue Zeichen verwenden wir den gleichen Namen wie für das alte Zeichen
 (also #A+), fügen am Schluss aber einen Marker (hier 0) hinzu.
 Dies ist deshalb nützlich, weil VSTENO die Session-Variable handwriting_marker
 verwendet, mit der wir nach der Generierung der Zeichen ganz einfach zwischen
 den verschiedenen Grössen wählen können:
\end_layout

\begin_layout LyX-Code
<@token_type=handwriting> 
\end_layout

\begin_layout LyX-Code
<@handwriting_marker=''>gross
\end_layout

\begin_layout LyX-Code
<@handwriting_marker=0>klein
\end_layout

\begin_layout Standard
Hier wird also mittels Inline-Option zuerst die Blockschrift aktiviert,
 danach der Marker auf leer gesetzt (wodurch das normal grosse Grundzeichen
 verwendet wird) und schliesslich der Marker mit einer weiteren Inline-Option
 auf 0 gesetzt (wodurch das kleiner, mit dem TokenShifter generierte Zeichen
 verwendet wird).
\end_layout

\begin_layout Standard
Die beiden so generierten Zeichen verwenden dieselbe Strichdicke.
 Dies kann geändert werden, indem der zweitletzte Parameter angepasst wird:
\end_layout

\begin_layout LyX-Code
"#A+" => { "#A+0", 0.5, 0.5, "a:2.0!", "" }
\end_layout

\begin_layout Standard
Die drei Angaben entsprechen der Selektion (= auf welche Strichdicken die
 Operation angewandt wird), der Strichdicke (= Faktor) und der Zeichenart
 (schattierte oder unschattierte Zeichen).
 
\end_layout

\begin_layout LyX-Code
Selektion: 
\end_layout

\begin_layout LyX-Code
- a (all): es sollen alle Strichdicken angepasst werden
\end_layout

\begin_layout LyX-Code
- p (partial): es werden nur Strichdicken > 1 angepasst
\end_layout

\begin_layout LyX-Code
- n (none): es werden keine Strichdicken angepasst (Standardwert)
\end_layout

\begin_layout LyX-Code
Strichdicke:
\end_layout

\begin_layout LyX-Code
- 2.0 (beliebige Fliesskommazahl): Multiplikationsfaktor für die Strichdicke
\end_layout

\begin_layout LyX-Code
- sx/sy: es wird der gleiche Faktor (x, y wie für das Skalieren verwendet
\end_layout

\begin_layout LyX-Code
- sf: wie sx/sy aber es wird der Mittelwert verwendet
\end_layout

\begin_layout LyX-Code
Zeichenart
\end_layout

\begin_layout LyX-Code
!: die Strichdicke soll unbedingt verwendet werden (schattiertes Zeichen)
\begin_inset Foot
status open

\begin_layout Plain Layout
Ein schattiertes Zeichen bedeutet, dass der Wert 1 im Offset 12 des Headers
 gesetzt wird.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(nichts): die Strichdicke wird nur verwendet, wenn das Zeichen schattiert
 wird
\end_layout

\begin_layout Standard
Mit diesen Funktionen lassen sich somit neue, skalierte Versionen als modifizier
te Kopien von Basiszeichen erstellen.
 Gleichzeitig ist es aber auch möglich, bestehende Zeichen zu modifizieren:
\end_layout

\begin_layout LyX-Code
"#A+" => { "#A+", 1.0, 1.0, "a:2.0!", "" }
\end_layout

\begin_layout Standard
In diesem Beispiel ist die Bezeichnung des Ursprungszeichens und des neuen
 Zeichens identisch #A+.
 Das Basiszeichen wird somit ersetzt durch eine Kopie, die mit dem Faktor
 1.0 skaliert (= keine Grössenänderung) und deren Strichdicke mit dem Faktor
 2.0 multipliziert wird.
 Prinzipiell gilt, dass VSTENO bestehende Zeichen immer nur neuere Kopien
 ersetzt, wenn solche mit dem TokenShifter erstellt werden.
\end_layout

\begin_layout Subsection*
Proportionale und orthogonale Punkte
\end_layout

\begin_layout Standard
Zur Realisierung der Zeichenneigung (Gehrung) bot die SE1 rev0 lediglich
 die horizontale Punkteverschiebung an.
 Dies hat den Nachteil, dass sich die Zeichen mit zunehmender Neigung verziehen
 und Winkel bzw.
 Rundungen nicht mehr korrekt dargestellt werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Vergleiche hierzu: https://www.vsteno.ch/docs/stenoengines.pdf
\end_layout

\end_inset

.
 Mit der Version 0.2 (Ariadne) setzt VSTENO nun erstmals die SE1 rev1 um
 und bietet damit verschiedene Punkttypen an:
\end_layout

\begin_layout Itemize
horizontal: bisherige horizontale Punktverschiebung (nach SE1 rev0)
\end_layout

\begin_layout Itemize
orthogonal: orthogonale Punktverschiebung (Drehung) anhand einer (parallelen)
 Rotationsachse (SE1 rev1)
\end_layout

\begin_layout Itemize
proportional: wie orthogonal, zusätzlich werden die Zeichen aber gestreckt,
 damit die Höhe auch in geneigten Zeichen erhalten bleibt (SE1 rev1)
\end_layout

\begin_layout Standard
Der wichtigste neue Punkttyp ist proportional, da hier die Punkte - dank
 proportionaler Streckung - auch bei geneigten Zeichen exakt auf die Schreiblini
en zu liegen kommen.
 Wir erläutern diesen Punkttyp anhand des Zeichens SP.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename sp_vertical.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Dieses Zeichen besteht aus 6 Punkten, welche 2 Bögen und eine mittlere gerade
 Strecke definieren.
 Ziel ist es nun, dass bei Neigungen insbesondere die Bögen richtig (d.h.
 proportional korrekt) modelliert werden.
 Hierfür werden 2 parallele Rotationsachsen definiert: die erste hat den
 Wert x = 2 und verläuft durch die Mitte des ersten Bogens; die zweite liegt
 bei x = 6 und verläuft durch die Mitte des zweiten Bogens.
 Nun sollen die Punkte 1 und 3 als proportional definiert und mit der ersten
 Rotationsachse verbunden werden.
 Ebenso sollen die Punkte 4 und 6 mit der zweiten Rotationsachse verbunden
 werden.
 Dies soll letztlich dazu führen, dass die Punkte so geneigt werden, wie
 in der folgenden Darstellung ersichtlich.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename sp_60degrees.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Gezeigt wird hier eine Neigung von 60 Grad (= 30 Grad Rechtsdrehung von
 der Vertikalen), die proportionalen Punkte sind als Sterne markiert.
 Die Scheitelpunkte 2 und 5 werden nach wie vor als horizontal Punkte belassen.
 Da diese direkt auf den Rotationsachsen liegen, würde es hier keinen Unterschie
d machen, wenn sie ebenfalls als proportionale Punkte definiert würden.
 Der Einfachheit halber werden sie jedoch horizontal belassen.
 Erkennbar ist dies daran, dass sie als Kreise markiert sind.
\end_layout

\begin_layout Standard
Die Frage ist nun: Wie werden die Punkte 1, 3, 4 und 6 als proportional
 definiert und wie können wir Rotationsachsen festlegen und diese mit den
 Punkten verbinden? Da die ursprüngliche SE1 rev0 keine solchen Punkte anbot,
 musste dafür etwas in die Trickkiste gegriffen werden.
 Ziel war es, bei der SE1 rev1 (a) die ursprüngliche Funktionalität vollständig
 zu erhalten und (b) möglichst wenige Parameter der SE1 rev0 zu verändern.
\end_layout

\begin_layout Standard
Beginnen wir mit den Rotationsachsen.
 Diese können in den Offsets 7 - 9 des Zeichens festgelegt werden:
\end_layout

\begin_layout LyX-Code
Offset 7: parallele Rotationsachse 1
\end_layout

\begin_layout LyX-Code
Offset 8: parallele Rotationsachse 2
\end_layout

\begin_layout LyX-Code
Offset 9: parallele Rotationsachse 3
\end_layout

\begin_layout Standard
Zusammen mit der Standart-Rotationsachse, die durch den Ursprung verläuft,
 stehen in der SE1 rev1 somit 4 Rotationsachsen zur Verfügung.
 Für das Zeichen SP benötigen wir zwei davon und tragen somit den Wert x
 = 2 (erste Rotationsachse) und x = 6 (zweite Rotationsachse) in den Offsets
 7 und 8 der Header-Definition ein:
\end_layout

\begin_layout LyX-Code
"SP" => { 
\end_layout

\begin_layout LyX-Code
/*header*/ 8, 0.5,  0, 0.5, 0, 0, 0, 2, 
\end_layout

\begin_layout LyX-Code
           6,   0, "",  "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
           0,   0,  0,   0, 0, 0, 0, "LNA:LN:RND", 
\end_layout

\begin_layout LyX-Code
/*data*/ etc.
 } 
\end_layout

\begin_layout Standard
Den Punkttypen und die Verbindung mit der entsprechenden Rotationsachse
 tragen wir nun im Data-Teil der Zeichen ein.
 Hierfür erinnern wir uns, dass jeder einzelne Punkt durch ein Datentupel
 mit 8 Werten definiert wird:
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1, th, dr, d2, t2
\end_layout

\begin_layout Standard
Diese Werte entsprechen den Koordinaten (x1, y1) den Tensions (t1, t2),
 der Dicke (th) dem Entry-/Exit-Typ (d1, d2) und dem so genannten Zeichenwert
 (dr = draw) des Punktes.
 Da verschiedene Felder (t1, d1, d2, t2) bei der Berechnung der Splines
 (Bezier-Kurven) zur Speicherung von Kontrollpunkten verwendet wird und
 th (Dicke) ebenfalls benötigt wird, bleibt einzig und allein das dr-Feld,
 um weitere Daten in die SE1 zu integrieren.
 Das dr-Feld enthielt in der SE1 rev0 einzig drei Ganzzahl-Werte:
\end_layout

\begin_layout LyX-Code
0 = normaler, verbundener Punkt
\end_layout

\begin_layout LyX-Code
2 = Vernüpfungspunkt für diakritische Zeichen
\end_layout

\begin_layout LyX-Code
5 = normaler, nicht verbundener Punkt
\end_layout

\begin_layout Standard
Um nun diese Werte und die zusätzlich benötigten Informationen für proportionale
 Punkte im gleichen dr-Feld abzulegen, wird dieses in 3 Bitbereiche aufgeteilt:
\end_layout

\begin_layout LyX-Code
Bits 0-3: ursprünglicher dr-Wert
\end_layout

\begin_layout LyX-Code
          0000 (0): normaler, verbundener Punkt
\end_layout

\begin_layout LyX-Code
          0010 (2): Verknüpfungspunkt für diakritische Zeichen
\end_layout

\begin_layout LyX-Code
          0101 (5): normaler, nicht verbundener Punkt
\end_layout

\begin_layout LyX-Code
Bits 4-5: Punkttyp
\end_layout

\begin_layout LyX-Code
          00 (0): horizontaler Punkt (default aus SE1 rev0)
\end_layout

\begin_layout LyX-Code
          01 (1): orthogonaler Punkt
\end_layout

\begin_layout LyX-Code
          10 (2): proportionaler Punkt
\end_layout

\begin_layout LyX-Code
Bits 6-7: zugewiesene Rotationsachse
\end_layout

\begin_layout LyX-Code
          00 (0): Hauptachse (Ursprung, default)
\end_layout

\begin_layout LyX-Code
          01 (1): erste Rotationsachse (Header Offset 7)
\end_layout

\begin_layout LyX-Code
          10 (2): zweite Rotationsachse (Header Offset 8)
\end_layout

\begin_layout LyX-Code
          11 (3): dritte Rotationsachse (Header Offset 9)
\end_layout

\begin_layout Standard
Angegeben wird hier der Binärwert und der Dezimalwert (in Klammer).
\end_layout

\begin_layout Standard
Ein proportionaler oder orthogonaler Punkt mit entsprechender Rotationsachse
 wird nun definiert, indem die Binärwerte aneinandergefügt werden:
\end_layout

\begin_layout LyX-Code
Bits 0-3: 0000 = verbundener Punkt
\end_layout

\begin_layout LyX-Code
Bits 4-5: 10 = proportional
\end_layout

\begin_layout LyX-Code
Bits 6-7: 01 = erste Rotationsachse
\end_layout

\begin_layout LyX-Code
Ergibt: 01100000 (96)
\end_layout

\begin_layout Standard
Für die erste Rotationsachse (Punkte 1 und 3) und
\end_layout

\begin_layout LyX-Code
Bits 0-3: 0000 = verbundener Punkt
\end_layout

\begin_layout LyX-Code
Bits 4-5: 10 = proportional
\end_layout

\begin_layout LyX-Code
Bits 6-7: 10 = erste Rotationsachse
\end_layout

\begin_layout LyX-Code
Ergibt: 10100000 (160)
\end_layout

\begin_layout Standard
Für die zweite Rotationsachse (Punkte 4 und 6).
\end_layout

\begin_layout Standard
Die komplette Zeichendefinition für SP lautet somit:
\end_layout

\begin_layout LyX-Code
"SP1" => { 
\end_layout

\begin_layout LyX-Code
/*header*/ 8, 0.5,  0, 0.5,   0,   0, 0, 2,   // Offset 7: erste Achse (x
 = 2)
\end_layout

\begin_layout LyX-Code
           6,   0, "",  "",   0,   0, 0, 0,   // Offset 8: zweite Achse
 (x = 6)
\end_layout

\begin_layout LyX-Code
           0,   0,  0,   0,   0,   0, 0, "LNA:LN:RND", 
\end_layout

\begin_layout LyX-Code
 /*data1*/ 0,  18, 0.5,  1, 1.5,  96, 0, 0.5, // proportional, erste Achse
\end_layout

\begin_layout LyX-Code
     /*2*/ 2,  20, 0.5,  2,   2,   0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
     /*3*/ 4,  18, 0.0,  0, 2.5,  96, 0, 0.0, // idem
\end_layout

\begin_layout LyX-Code
     /*4*/ 4,   2, 0.5,  0,   2, 160, 0, 0.5, // proportional, zweite Achse
\end_layout

\begin_layout LyX-Code
     /*5*/ 6,   0, 0.5,  0, 1.5,   0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
     /*6*/ 8,   2, 0.5,  0,   1, 160, 1, 0    // idem
\end_layout

\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard
Da der die Standardwerte (horizontaler Punkt, Ursprungsachse) null sind,
 ist das dr-Feld zu 100% rückwärtskompatibel mit der SE1 rev0.
 Zeichen, welche ursprünglich für die SE1 rev0 definiert wurden, können
 somit innerhalb der SE1 rev1 weiterhin genutzt und mit Zeichen gemischt
 werden, welche erweiterte Funktionen der SE1 rev1 nutzen.
\end_layout

\begin_layout Subsection*
Shared Fonts
\end_layout

\begin_layout Standard
Mit der Version 0.2 (Ariadne) von VSTENO kann eine stenografische Schrift
 (Font) zwischen verschiedenen Modellen geteilt werden.
 Dies macht Sinn, weil sich die Regeln für Phonetik, Morphologie (Kürzungen)
 je nach Sprache unterscheiden, die verwendeten Zeichen sind jedoch bis
 auf wenige kleine Abweichung dieselben sind.
\end_layout

\begin_layout Standard
Aus Gründen der Effizienz wurde das Teilen von Fonts so implementiert, dass
 sich Modelle die benötigten Zeichen und Definitionen gegenseitig ausleihen
 / borgen können.
 Ein Font unterscheidet sich somit prinzipiell nicht von einem Modell bzw.
 stellt ein Font einen Teil (Untermenge) eines Modells dar, welches vom
 ausleihenden Modell ausgelesen und verwendet wird.
\end_layout

\begin_layout Standard
Aus 
\begin_inset Quotes eld
\end_inset

historischen
\begin_inset Quotes erd
\end_inset

 Gründen befinden sich die fontspezifischen Informationen an verschiedenen
 Bereichen innerhalb des Modells und weisen auch verschiedenen Formate auf:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Header
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Font
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rules
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Session-Variablen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zeichen-Definitionen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spacer-Regeln
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Im einzelnen gehören folgende Daten zu einem 
\begin_inset Quotes eld
\end_inset

Font
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
Session-Variablen: klassische Variablen wie token_distance_wide, spacer_tokens_c
ombinations, spacer_vowel_groups, spacer_rules_list sowie die spezifischen
 Variablen font_exportable/importable_yesno, font_borrow_yesno, font_borrow_mode
l_name, font_load_from_file_yesno, welche das Teilen von Fonts kontrollieren.
\end_layout

\begin_layout Itemize
Zeichen-Definitionen: die SubSections base, combiner und shifter.
\end_layout

\begin_layout Itemize
Spacer-Regeln: diese Definieren den Abstand zwischen den Zeichen; wenn Fonts
 ausgeliehen oder geborgt werden sollen, muss das Modell zwingend drei Regel-Sub
Sections mit den fixen Bezeichnungen prespacer, spacer und postspacer enthalten.
\end_layout

\begin_layout Standard
Fonts können sowohl aus der Datenbank als auch aus einem ASCII-File geladen
 werden.
 Aus Sicherheitsgründen (damit keine sensiblen Daten aus der Datenbank oder
 von der Harddisk des Servers gelesen werden können), muss der Zugriff beim
 Font-Sharing beschränkt werden.
 Deshalb können nur Fonts aus folgenden Quellen verwendet werden:
\end_layout

\begin_layout Itemize
Datenbank: offizielle Modelle (die im Eingabeformular erscheinen) und persönlich
e User-Modelle (falls der/die User/in eingeloggt ist)
\end_layout

\begin_layout Itemize
Files: nur Modelle, die in der Whitelist $font_files_list in constants.php
 erfasst sind
\end_layout

\begin_layout Standard
Zusätzlich müssen in den Modellen die Kontroll-Variablen für das Font-Sharing
 im Header-Teil gesetzt werden:
\end_layout

\begin_layout Itemize
font_exportable_yesno: Wert 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 im ausleihenden Modell
\end_layout

\begin_layout Itemize
font_importable_yesno: Wert 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 im borgenden Modell
\end_layout

\begin_layout Standard
Die restlichen Variablen kontrollieren dann, ob und welches Font ausgeliehen
 und woher es geladen werden soll:
\end_layout

\begin_layout Itemize
font_borrow_yesno: das Modell lädt das Font eines anderen Modells
\end_layout

\begin_layout Itemize
font_borrow_model_name: Name des Modells aus dem das Font geladen werden
 soll
\end_layout

\begin_layout Itemize
font_load_from_file_yesno: wenn 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 wird der Fontname mit der Dateierweiterung .txt von der Harddisk geladen
\end_layout

\begin_layout Standard
Wenn ein Modell nur als Font verwendet werden soll, können sämtliche Definitione
n, die für das Font nicht benötigt werden aus dem Modell entfernt werden.
 Bitte kontrollieren Sie bei einem Font-Sharing unbedingt die Debug-Ausgaben
 von VSTENO: da das Font-Sharing eine delikate Angelegenheit ist (weil viele
 Parameter korrekt sein müssen, damit ein Font in verschiedenen Modellen
 richtig funktioniert) führt VSTENO vorgängig diverse Tests durch.
 Falls auch nur einer der Parameter nicht korrekt (und somit eine Voraussetzung
 nicht erfüllt) ist, wird das fremde Font nicht geladen.
 Speziell zu beachten ist inbesondere die Verwendung korrekter Spacing-Regeln.
 Das Spacing wird über die Session-Variables spacer_token_combinations /
 spacer_rules_list / spacer_vowel_groups kontrolliert, welche ihrerseits
 von RX-GEN zur Generierung von REGEX-Regeln verwendet werden.
 Diese Regeln können entweder manuell oder via die Option autospacing verwendet
 werden.
 Es wird empfohlen, wenn möglich die manuelle Variante zu verwenden (und
 das autospacing nur während der Fontentwicklung zu verwenden).
 Falls unbeabsichtigte Resultate auftauchen, wird empfohlen, die Session-Variabl
en zurückzusetzen bzw.
 das Font ein zweites Mal zu laden (dadurch werden die Session-Variablen
 ebenfalls zurückgesetzt).
\end_layout

\begin_layout Standard
Weitere Einblicke in das Font-Sharing gibt das Modell DESSBAS (Stolze-Schrey
 Deutsch), welches das Font GESSBAS aus der Datei GESSBAS.txt verwendet.
\end_layout

\begin_layout Subsection*
Modelle importieren / exportieren
\end_layout

\begin_layout Standard
Mit Version 0.3 (Hyperion) stehen Funktionen für den Import und den Export
 von Modellen als Datein zur Verfügung.
 Gehen Sie für den Export folgendermassen vor:
\end_layout

\begin_layout Standard
Nachdem Sie sich eingeloggt haben, wählen Sie die Funktion MDUMP (= model
 dump) in der linken Navigationsspalte.
 Sie gelangen auf die MDUMP-Informationsseite, auf der alle Modelle aufgeführt
 werden, die auf die Harddisk (des Servers) gespeichert werden.
 Es sind dies die Standard-Modelle, sowie ihr eigenes CUSTOM-Model (z.B.
 [XM0000002]).
 Klicken Sie anschliessend auf 
\begin_inset Quotes eld
\end_inset

bestätigen
\begin_inset Quotes erd
\end_inset

.
 Sie gelangen auf eine Bestätigungsseite, auf welcher der Zielpfad der Dateien
 (normalerweise ../ling/) und die Form der Dateinamen (MODELLNAME.dmp) angezeigt
 wird.
 Sie können nun in das Verzeichnis ../ling/ wechseln und von dort die Dateien
 weiterverwenden.
 Mit der Funktion MDUMP werden ALLE Standard- und Custom-Modell gespeichert
 (es können keine einzelnen Modelle ausgewählt werden).
\end_layout

\begin_layout Standard
Zum Importieren einer Datei gehen Sie wie folgt vor: Klicken Sie in der
 linken Navigationsspalte auf MLOAD (= model load).
 Sie gelangen auf die MLOAD-Seite, wo Sie die Modelle markieren können,
 die Sie importieren möchten.
 Die Modelle müssen die Endung (Dateierweiterung) .txt aufweisen.
 Wenn Sie also vorgängig ein Modell mit MDUMP gespeichert haben (z.B.
 XM00000002.dmp), dann müssen Sie diese Datei zuerst nach XM00000002.txt umbenenne
n / kopieren.
 Wählen Sie danach unter MLOAD das Modell XM00000002 zum Importieren aus
 und klicken Sie auf 
\begin_inset Quotes eld
\end_inset

bestätigen
\begin_inset Quotes erd
\end_inset

.
 Auf der nächsten Seite erhalten Sie eine Status-Meldung, ob der Import
 geklappt hat oder eine Fehlermeldung aufgetreten ist.
\end_layout

\begin_layout Standard
Mit Version 0.3 (Hyperion) bleibt das manuelle Übertragen eines Modells (via
 Webformular) nach wie vor möglich.
 Die Funktionen MDUMP und MLOAD sind einfach schnellere und einfachere Möglichke
iten, wenn Sie mehrere Fonts (zum Beispiel von einem Server zum anderen)
 übertragen möchten
\begin_inset Foot
status open

\begin_layout Plain Layout
VSTENO holt sich die Liste der Modelle aus der Variablen $standard_models_list
 in constants.php.
 Es ist zusätzlich zu beachten: Da das Laden und Speichern von Dateien auf
 dem Server sicherheitsrelevant sein kann, können mit MDUMP und MLOAD nur
 jene Fonts verwendet werden, die in der Variablen $font_files_list in constants.
php enthalten sind.
 Diese Variable muss also vorgängig manuell angepasst werden.
\end_layout

\end_inset

.
\end_layout

\begin_layout Part*
Regeln
\end_layout

\begin_layout Standard
Nach den Zeichendefinitionen kommen wir nun zu den so genannten Regeln,
 welche einzelne Wörter der Langschrift Schritt um Schritt so umwandeln,
 dass sie am Schluss durch Aneinanderfügen der definierten Zeichen als Stenogram
me dargestellt werden können.
 Diese 
\begin_inset Quotes eld
\end_inset

Übertragung
\begin_inset Quotes erd
\end_inset

 findet in mehreren Schritten statt und um diese sichtbar zu machen, können
 Sie in der Demoversion die Funktion 
\begin_inset Quotes eld
\end_inset

Debug
\begin_inset Quotes erd
\end_inset

 anwählen.
 Für das Wort 
\begin_inset Quotes eld
\end_inset

baten
\begin_inset Quotes erd
\end_inset

 sehen Sie dann
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Angaben können leicht von der aktuellen Version abweichen, da das Modell
 für Stolze-Schrey ständig angepasst wird.
 Wichtig ist hier einfach das Prinzip, dass VSTENO mehrere (z.T.
 recht viele) Regeln sequentiell anwendet, um ein Stenogramm zu generieren.
 Ebenfalls wichtig: Die Debug-Funktion! Nutzen Sie diese unbedingt, wenn
 Sie eigene Stenografie-Systeme erstellen wollen.
 Sie hilft Ihnen dabei herauszufinden, welche Regeln angewandt wurden und
 welche nicht, und Sie können damit Fehler in Ihren Regeln - und zum Beispiel
 in der Abarbeitung derselben - leichter finden!
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
ORIGINAL: baten 
\end_layout

\begin_layout LyX-Code
[1] WORD: bat{EN} FROM: rule: (?<!(^[Ww])|i)en$ => {EN}
\end_layout

\begin_layout LyX-Code
[2] WORD: bAt{EN} FROM: rule: a => A 
\end_layout

\begin_layout LyX-Code
[3] WORD: BAt{EN} FROM: rule: b => B 
\end_layout

\begin_layout LyX-Code
[4] WORD: BAT{EN} FROM: rule: t => T 
\end_layout

\begin_layout LyX-Code
NUMBER OF RULES APPLIED: 4
\end_layout

\begin_layout Standard
Beim Wort 
\begin_inset Quotes eld
\end_inset

baten
\begin_inset Quotes erd
\end_inset

 wird also zuerst die Endkürzung -en erkannt und durch {EN} markiert (Schritt
 1), danach wird der Vokal a erkannt und mit dem Grossbuchstaben A markiert
 (Schritt 2).
 Analog dazu werden auch die Konsonanten b und t erkannt und mit den Grossbuchst
aben B und T markiert (Schritte 3+4).
 Die so entstanden Folge - die VSTENO intern als TokenList (Zeichenliste)
 bezeichnet - kann danach sehr simpel zu einem Stenogramm verarbeitet werden,
 indem die Zeichendefinitionen aus der Variable $steno_tokens_master ausgelesen
 und die einzelnen Zeichen aneinandergefügt werden.
\end_layout

\begin_layout Standard
Das obige Beispiel ist natürlich relativ simpel, da alle Zeichen ohne grosse
 Veränderungen verwendet werden können.
 Gewisse Zeichen müssen aber je nach Kontext anders geschrieben werden.
 So z.B.
 das Aufstrich-T, wie es in 
\begin_inset Quotes eld
\end_inset

bunt
\begin_inset Quotes erd
\end_inset

 vorkommt:
\end_layout

\begin_layout LyX-Code
ORIGINAL: bunt 
\end_layout

\begin_layout LyX-Code
[1] WORD: bun[&T] FROM: rule: ([bcdfghjklmnpqrvwxyz])t => $1[&T] 
\end_layout

\begin_layout LyX-Code
[2] WORD: bUn[&T] FROM: rule: u => U 
\end_layout

\begin_layout LyX-Code
[3] WORD: BUn[&T] FROM: rule: b => B 
\end_layout

\begin_layout LyX-Code
[4] WORD: BUN[&T] FROM: rule: n => N 
\end_layout

\begin_layout LyX-Code
NUMBER OF RULES APPLIED: 4
\end_layout

\begin_layout Standard
Alle diese Dinge müssen VSTENO anhand von Regeln genauestens 
\begin_inset Quotes eld
\end_inset

erklärt
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn man dieses Verb im Zusammenhang mit einem Computer verwenden kann ...
 ;-) Aber wir haben VSTENO weiter oben ja in der Tat als unseren digitalen
 Stenoschüler definiert und in diesem Sinne ist die Analogie triftig: Der
 Computer bzw.
 das Programm VSTENO ist unser Discipulus, dem wir als Linguisten Stenografie
 beibringen (und 
\begin_inset Quotes eld
\end_inset

erklären
\begin_inset Quotes erd
\end_inset

).
\end_layout

\end_inset

 bzw.
 beigebracht werden.
 Damit VSTENO die Anweisungen versteht, müssen müssen sie in einer klar
 definierten Formelsprache abgefasst werden.
 Im Falle von VSTENO ist dies REGEX, eine Formelsprache die standardmässig
 in PHP integriert ist.
 Regex ist ein sehr mächtiges Instrument, das einige Tücken aufweist ...
 das aber - richtig angewandt - sämtlichen linguistischen Bedürfnissen gerecht
 werden kann.
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass Regeln nach dem Format 
\begin_inset Quotes eld
\end_inset

Wenn A, dann B
\begin_inset Quotes erd
\end_inset

 funktionieren.
 In den obigen Beispielen bedeutet 
\begin_inset Quotes eld
\end_inset

b => B
\begin_inset Quotes erd
\end_inset

 also: 
\begin_inset Quotes eld
\end_inset

Wenn du innerhalb des Wortes den Kleinbuchstaben b findest, dann erstetze
 ihn durch den Grossbuchstaben B
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
REGEX
\end_layout

\begin_layout Standard
Die Möglichkeiten von REGEX (Abkürzung für so genannte 
\begin_inset Quotes eld
\end_inset

regular expressions
\begin_inset Quotes erd
\end_inset

) auch nur ansatzweise darzustellen, würde den Rahmen dieses Tutorial sprengen
 - schliesslich gibt es ganze Bücher, die sich ausschliesslich mit REGEX
 beschäftigen! Wir werden uns also damit begnügnen, hier nur einige wesentliche
 Elemente zu erklären.
 Für den Rest verweisen wir Sie auf die folgenden Seiten, die Ihnen weiterhelfen
 können:
\end_layout

\begin_layout Standard
Ein guter Start, um einen Überblick zu REGEX zu erhalten, sind die beiden
 Wikipedia-Seiten auf Deutsch und auf Englisch:
\end_layout

\begin_layout Itemize
Deutsch: 
\begin_inset CommandInset href
LatexCommand href
target "https://de.wikipedia.org/wiki/Regul%C3%A4rer_Ausdruck"

\end_inset


\end_layout

\begin_layout Itemize
Englisch: 
\begin_inset CommandInset href
LatexCommand href
target "https://en.wikipedia.org/wiki/Regular_expression"

\end_inset


\end_layout

\begin_layout Standard
Ebenfalls sehr zu empfehlen ist der folgende REGEX-Tester:
\end_layout

\begin_layout Itemize
Online-REGEX-Tester: 
\begin_inset CommandInset href
LatexCommand href
target "https://regex101.com/"

\end_inset


\end_layout

\begin_layout Standard
Er erlaubt es Ihnen, einzelne REGEX-Ausdrücke direkt im Webbrowser zu testen
 und so Fehler in bzw.
 falsch forumlierte Formeln zu finden und zu korrigieren.
\end_layout

\begin_layout Standard
REGEX kann man durchaus als 
\begin_inset Quotes eld
\end_inset

learning by doing
\begin_inset Quotes erd
\end_inset

 lernen: Spielen Sie also mit den Elementen die wir im Folgenden vorstellen
 im REGEX-Tester etwas herum und Sie werden bald ein relativ intuitives
 Verständnis dafür erlangen, wie REGEX funktioniert!
\end_layout

\begin_layout Subsection*
Wortgrenzen und Lookaround-Expressions
\end_layout

\begin_layout Standard
Hier nun also einige wenige Grundregeln und Prinzipien von REGEX, die Sie
 für linguistische Regeln mit Sicherheit benötigen werden.
 Beginnen wir mit den Zeichen ^ und $.
 Sie markieren den Anfang und das Ende eines Wortes:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^hab$
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Bedeutet also: Falls das Wort genau der Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 entspricht (bzw.
 sich vor 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 der Wortanfang und nach 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 das Wortende befindet), dann ersetze die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 durch 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

.
 Beachten Sie, dass die Ausdrücke ^hab$ und {HAB} innerhalb von Anführungszeiche
n 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 gesetzt werden müssen, da es sich dabei um Strings (Zeichenfolgen) handelt.
 Diese Regel kann also verwendet werden, um die Kürzung HAB zu definieren.
 Sie ist allerdings schlecht formuliert: Sie berücksichtigt z.B.
 nicht, dass das Verb 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 auch am Wortanfang stehen kann (was bedeutet, dass 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 dann mit einem Grossbuchstaben beginnt).
 Ausserdem wird die Kürzung HAB auch in längeren Wörtern angewendet (wie
 z.B.
 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

habt
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 etc.).
 Auch diese Fälle würden nicht berücksichtigt, da die Regel verlangt, dass
 das Wort nach 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 zu Ende ist.
 Wir formulieren die Regel deshalb um:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Beachten Sie bitte gleich hier, dass 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset


\backslash
[Hh
\backslash
]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

 nicht dasselbe ist.
 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 bedeutet 
\begin_inset Quotes eld
\end_inset

H oder h
\begin_inset Quotes erd
\end_inset

, es könnte in REGEX auch 
\begin_inset Quotes eld
\end_inset

(H|h)ab
\begin_inset Quotes erd
\end_inset

 geschrieben werden.
 Das 
\begin_inset Quotes eld
\end_inset

escapte
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset


\backslash
[Hh
\backslash
]ab
\begin_inset Quotes erd
\end_inset

 hingegen würde bedeuten: das Zeichen [ und ] muss vorhanden sein (würde
 also auf 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 zutreffen).
 Kurzum: REGEX ist ebenso effizient wie heimtückisch; kleine Zeichen - besonders
 wenn es ums Escaping mit 
\backslash
 geht - können eine ganz andere Bedeutung haben ...
 Ebenfalls zu beachten ist die Tatsache, dass in PHP Zeichen nur auf der
 IF-Seite escaped werden müssen!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die eckige Klammer [] bedeutet hier: 
\begin_inset Quotes eld
\end_inset

einer der aufgelisteten Buchstaben
\begin_inset Quotes erd
\end_inset

 (die Liste kann beliebig lang sein - z.B.
 [aeiou] für die 5 Grundvokale - oder man kann auch weitere Ausdrücke verwenden
 wie z.B.
 [a-z] oder [A-Z] für Kleinbuchstaben und Grossbuchstaben, [0-9] für Ziffern
 etc.).
 Da wir die Zeichen ^ und $ (Wortanfang und Wortende) entfernt haben, trifft
 diese Regel nun auf die oben genannten Fälle zu: 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

habt
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 werden zum Beispiel in 
\begin_inset Quotes eld
\end_inset

In{HAB}er
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

{HAB}t
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

{HAB}en
\begin_inset Quotes erd
\end_inset

 umgewandelt.
 Allerdings ist auch diese Regel zu ungenau formuliert, da auch Wörter wie
 
\begin_inset Quotes eld
\end_inset

schaben
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Wir meinen hier das umganssprachliche Wort für 
\begin_inset Quotes eld
\end_inset

Hafer
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset

 in 
\begin_inset Quotes eld
\end_inset

sc{HAB}en
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

{HAB}er
\begin_inset Quotes erd
\end_inset

 umgewandelt werden, was wiederum falsch ist ...
\end_layout

\begin_layout Standard
Dies können wir korrigieren, indem wir eine so genannte Lookaround-Expression
 (zu Deutsch etwa: Schau-dich-um-Ausdruck) verwenden.
 Es gibt zwei Arten von Lookaround-Expressions: die Lookbehind-Expression
 (sie sucht nach Zeichenfolgen vor dem Wort) und die Lookahead-Expression
 (für Zeichenfolgen nach dem Wort).
 Ausserdem können Lookaround-Expressions positiv (= die Zeichenfolge muss
 vorkommen) oder negativ (= die Zeichenfolge darf nicht vorkommen) sein.
 Im Folgenden verwenden wir eine negative Lookbehind-Expression.
 Diese steht in einer runden Klammer vor dem Wort und beginnt mit ?<!:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel bedeutet also: Ersetze 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 - egal ob mit Gross- oder Kleinbuchstaben beginnend - an einer beliebigen
 Stelle des Wortes durch {HAB}, sofern nicht 
\begin_inset Quotes eld
\end_inset

sc
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

Sc
\begin_inset Quotes erd
\end_inset

 vorausgeht.
 Oder anders formuliert: Ersetze 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 nur dann, wenn das H nicht Teil von SCH ist.
 Diese Regel löst also das Problem von 
\begin_inset Quotes eld
\end_inset

schaben
\begin_inset Quotes erd
\end_inset

, nicht aber jenes von 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset

.
 Wir könnten natürlich auch hier eine negative Lookahead-Expression verwenden:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Hh]ab(?=!er)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Allerdings würde dann das Wort 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

 ebenfalls nicht mehr in 
\begin_inset Quotes eld
\end_inset

In{HAB}er
\begin_inset Quotes erd
\end_inset

 umgewandelt.
\end_layout

\begin_layout Standard
Man sieht also: Das Formulieren von präzisen linguitischen Regeln - die
 wirklich nur auf jene Wörter angewandt wird, auf die die Regel wirklich
 zutrifft - ist zum Teil recht anspruchsvoll.
 Es lohnt sich aber, hier Zeit zu investieren, denn je präziser die Regel
 ist, umso weniger 
\begin_inset Quotes eld
\end_inset

Ausnahmen
\begin_inset Quotes erd
\end_inset

 müssen später zusätzlich (in einem Wörterbuch beispielsweise) definiert
 werden.
\end_layout

\begin_layout Subsection*
Klammern, Quantoren und Variablen
\end_layout

\begin_layout Standard
Quantoren sind Zeichen, welche angeben, wie oft ein Zeichen vorkommen muss.
 REGEX kennt hier z.B.
 die Zeichen ? (= 0 oder 1 Mal vorkommend), + (= mindestens 1 Mal vorkommen),
 * beliebig oft vorkommend.
 Diese können auf einzelne Zeichen angewandt werden oder es können mehrere
 Zeichen zu einer Gruppe zusammengefasst werden, für die der Quantor gilt.
 Als Beispiel betrachten wir folgende Regel:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Uu]n)?[Zz]uver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1{ZU}{VER}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Hier wurde also der Ausdruck [Uu]n durch die Klammern () zu einer Gruppe
 zusammengefasst.
 Der Quantor ? nach ([Uu]n) bedeutet, dass die Vorsilbe un- (die am Anfang
 des Wortes - markiert durch das Zeichen ^ - gross oder klein geschrieben
 werden kann) 0 oder 1 Mal vorkommen kann.
 Dieses 
\begin_inset Quotes eld
\end_inset

Muster
\begin_inset Quotes erd
\end_inset

 (oder pattern, wie es auf Englisch genannt wird) trifft z.B.
 auf Wörter wie 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 zu (hier kommt un- 1 Mal vor), aber auch auf Wörter wie 
\begin_inset Quotes eld
\end_inset

zuverlässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Zuversichtlichkeit
\begin_inset Quotes erd
\end_inset

 usw.
 
\end_layout

\begin_layout Standard
Auf der rechten Seite (der Folge-Seite der Regel) steht der Ausdruck $1
 für die 
\begin_inset Quotes eld
\end_inset

Variable in der ersten Position
\begin_inset Quotes erd
\end_inset

.
 Mit Position ist gemeint: 
\begin_inset Quotes eld
\end_inset

Der x-te Klammerausdruck von links beginnend
\begin_inset Quotes erd
\end_inset

, in unserem Fall also ([Uu]n).
 
\end_layout

\begin_layout Standard
Diese Regel nimmt somit folgende Ersetzungen vor: 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

un{ZU}{VER}lässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Un{ZU}{VER}lässigkeit
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Zuversicht
\begin_inset Quotes erd
\end_inset

 => {ZU}{VER}sicht, 
\begin_inset Quotes eld
\end_inset

zuverlässig
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{ZU}{VER}lässig.
 Beachten Sie hierbei, dass die Variable $1 den Klammerausdruck exakt so
 wiedergibt, wie er im Wort vorgefunden wird, als 
\begin_inset Quotes eld
\end_inset

Un
\begin_inset Quotes erd
\end_inset

 (mit grossem Anfangsbuchstaben) im Substantiv 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

un
\begin_inset Quotes erd
\end_inset

 (mit Kleinbuchstaben) im Adjektiv 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

.
 Nicht so hingegen beim Ausdruck 
\begin_inset Quotes eld
\end_inset

[Zz]u
\begin_inset Quotes erd
\end_inset

 (wo wir keine Variable verwenden): Hier wird also sowohl 
\begin_inset Quotes eld
\end_inset

Zu
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 durch 
\begin_inset Quotes eld
\end_inset

{ZU}
\begin_inset Quotes erd
\end_inset

 ersetzt.
\end_layout

\begin_layout Standard
Da Variablen nummeriert sind, kann man auch mehrere hintereinander verwenden:
 
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Uu]n)?([Zz]u)ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1$2{VER}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
In dieser Regel z.B.
 wird nur das Präfix ver- durch {VER} ersetzt.
 Wie bei un- weiter oben wird nun auch in diesem Beispiel die zweite Vorsilbe
 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 exakt so übertragen, wie sie im Wort steht (also 
\begin_inset Quotes eld
\end_inset

Zu
\begin_inset Quotes erd
\end_inset

 bei einem Substantiv, 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 bei klein geschriebenen Wörtern).
 
\end_layout

\begin_layout Standard
Im Unterschied zu ? bezeichnet der Quantor + einen Ausdruck der mindestens
 1 Mal (oder mehr) vorkommen muss.
 Die Regel
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Zz]u)+
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1|
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Trennt eine oder mehrere Vorsilben zu- durch einen vertikalen Strich vom
 Rest des Wortes ab: 
\begin_inset Quotes eld
\end_inset

zugeben
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

zu|geben
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

zuzugeben
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

zuzu|geben
\begin_inset Quotes erd
\end_inset

.
 Bitte beachten Sie, dass dies wiederum eine linguistisch zu unpräzis formuliert
e Regel ist, da sie auch auf Wörter wie 
\begin_inset Quotes eld
\end_inset

Zuzug
\begin_inset Quotes erd
\end_inset

 zutrifft (hier findet die Regel 2 Vorsilben zu-, dabei enthält das Wort
 nur 1 Vorsilbe - der zweite Teil gehört zum Stamm des Wortes).
 Auch trifft die Regel theoretisch auf inexistente Wörter zu wie 
\begin_inset Quotes eld
\end_inset

zuzuzukumi
\begin_inset Quotes erd
\end_inset

 (hier fände die Regel 3 Vorsilben).
 
\end_layout

\begin_layout Subsection*
Wildcards und Greediness
\end_layout

\begin_layout Standard
REGEX definiert den Punkt .
 als so genannte Wildcard
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir auch Joker genannt.
\end_layout

\end_inset

: Dieses Zeichen kann also für 
\begin_inset Quotes eld
\end_inset

irgend ein
\begin_inset Quotes erd
\end_inset

 Zeichen stehen.
 Auch den Punkt können wir mit Quantoren kombinieren, wobei hier ein neuer
 Aspekt ins Spiel kommt: die so genannte greediness (zu Deutsch in etwa:
 Gefrässigkeit).
 Quantoren können also 
\begin_inset Quotes eld
\end_inset

greedy
\begin_inset Quotes erd
\end_inset

 (gefrässig) oder non-greedy (ungefrässig oder genügsam) sein.
 Im ersten Fall versucht REGEX den Ausdruck auf die grösstmögliche Zeichenfolge
 anzuwenden, im letzten Fall hingegen wird der kürzeste Ausdruck gesucht,
 der auf das Muster zutrifft.
\end_layout

\begin_layout LyX-Code
[1] Bett(.*)en => Bett$1{EN}
\end_layout

\begin_layout LyX-Code
[2] Bett(.*?)en => Bett$1{EN}
\end_layout

\begin_layout Standard
Im Wort 
\begin_inset Quotes eld
\end_inset

Bettenkapazitäten
\begin_inset Quotes erd
\end_inset

 (welches 2 x die Endung -en enthält), findet die erste Regel (mit dem 
\begin_inset Quotes eld
\end_inset

gefrässigen
\begin_inset Quotes erd
\end_inset

 Ausdruck *) die LETZTE Endung und ersetzt das Wort somit durch 
\begin_inset Quotes eld
\end_inset

Bettenkapazität{EN}
\begin_inset Quotes erd
\end_inset

.
 In der zweiten Regel (mit dem 
\begin_inset Quotes eld
\end_inset

genügsamen
\begin_inset Quotes erd
\end_inset

 Ausdruck *?) findet REGEX hingegen der ERSTEN Ausdruck, sodass das Resultat
 hier 
\begin_inset Quotes eld
\end_inset

Bett{EN}kapazitäten
\begin_inset Quotes erd
\end_inset

 lautet.
\end_layout

\begin_layout Standard
Passen Sie deshalb mit Quantoren besonders auf: Sie können eine total andere
 Bedeutung haben als man - von einer intuitiven, sprachlichen Logik her
 denkend - glauben würde ...
\end_layout

\begin_layout Subsection*
Logisches Oder
\end_layout

\begin_layout Standard
Wir haben bereits die eckigen Klammern [] kennengelernt, welche eine Reihe
 von Zeichen zusammenfasst, von denen wenigtens eines zutreffen muss.
 In der Logik entspricht dieses einem Oder: Im Ausdruck [abcd] muss also
 entweder a oder b oder c oder d vorkommen.
 Ein weiterer Ausdruck um ein logisches Oder wiederzugeben ist der vertikale
 Strich:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(ck|kk)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[CK]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel bedeutet also, dass 
\begin_inset Quotes eld
\end_inset

Zucker
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Zu[CK]er
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Mokka
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Mo[CK]a
\begin_inset Quotes erd
\end_inset

 wird.
 Beachten Sie in diesem Zusammenhang unbedingt, dass die eckige Klammer
 auf der linken Seite (Bedingung) der Regel nicht die gleiche Bedeutung
 hat wie auf der rechten Seite (Folge):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Ää]
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[Ä]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(Ä|ä)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[Ä]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese beiden Regeln sind gleichbedeutend!
\begin_inset Foot
status open

\begin_layout Plain Layout
...
 theoretisch.
 Aus irgendeinem unerfindlichen Grund - vermutlich hat es mit dem Sonderzeichen
 Ä zu tun - funktioniert, zumindest in meiner Systemkonfiguration, nur die
 Variante (Ä|ä).
 Dasselbe gilt auch für Üü, Öö, ÄU ...
 Ich empfehle deshalb, für diese Sonderzeichen, die Variante in runden Klammern
 zu verwenden.
\end_layout

\end_inset

 Die eckige Klammer auf der linken Seite bedeutet also wie erwähnt 
\begin_inset Quotes eld
\end_inset

eines dieser Zeichen
\begin_inset Quotes erd
\end_inset

 (also Ä oder ä) auf der rechten Seite bedeutet es jedoch 
\begin_inset Quotes eld
\end_inset

ersetzen durch das Klammerzeichen
\begin_inset Quotes erd
\end_inset

 (offen oder geschlossen).
 Diese Regel transformiert die Wörter 
\begin_inset Quotes eld
\end_inset

Kläger
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

KlÄger
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Kl[Ä]ger
\begin_inset Quotes erd
\end_inset

!
\end_layout

\begin_layout Standard
Wenn Sie auf der linken Seite nach einer eckigen Klammer suchen möchten,
 dann müssen Sie das Zeichen 
\begin_inset Quotes eld
\end_inset

escapen
\begin_inset Quotes erd
\end_inset

 (wir übersetzen mal frei: 
\begin_inset Quotes eld
\end_inset

seiner REGEX-Bedeutung entheben
\begin_inset Quotes erd
\end_inset

).
 Dies geschieht indem der Backslash 
\backslash
 vorangestellt wird:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset


\backslash
[Ää
\backslash
]
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{Ää}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel würde die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

ABC[Ää]XYZ
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

ABC{Ää}XYZ
\begin_inset Quotes erd
\end_inset

 umschreiben!
\end_layout

\begin_layout Standard
Auch hier: Passen Sie bei Zeichen, die in REGEX eine spezielle Bedeutung
 haben, sehr gut auf, ob Sie sie wörtlich (als Literal oder Buchstabe) oder
 in der Bedeutung von Regex verwenden wollen.
 Dies trifft prinzipiell auf alle Zeichen zu, die in REGEX eine spezielle
 Bedeutung haben.
 Sicherheitshalber listen wir die wichtigsten im Folgenden noch einmal auf.
\end_layout

\begin_layout Subsection*
Escaping
\end_layout

\begin_layout Standard
Folgende Zeichen MÜSSEN in PHP-Regex 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden, wenn Sie 
\begin_inset Quotes eld
\end_inset

wörtlich
\begin_inset Quotes erd
\end_inset

 (= als genau dieses Zeichen) verwendet werden sollen: 
\end_layout

\begin_layout LyX-Code
.
 als 
\backslash
.
\end_layout

\begin_layout LyX-Code
^ als 
\backslash
^
\end_layout

\begin_layout LyX-Code
$ als 
\backslash
$
\end_layout

\begin_layout LyX-Code
* als 
\backslash
*
\end_layout

\begin_layout LyX-Code
+ als 
\backslash
+
\end_layout

\begin_layout LyX-Code
? als 
\backslash
?
\end_layout

\begin_layout LyX-Code
( als 
\backslash
(
\end_layout

\begin_layout LyX-Code
) als 
\backslash
)
\end_layout

\begin_layout LyX-Code
[ als 
\backslash
[
\end_layout

\begin_layout LyX-Code

\backslash
 als 
\backslash

\backslash

\end_layout

\begin_layout LyX-Code
| als 
\backslash
|
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Die geschwungenen Klammern {} KÖNNEN in PHP-REGEX 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden (oder nicht)
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich empfehle sie nicht zu escapen, da die Regeln dadurch etwas übersichtlicher
 werden.
\end_layout

\end_inset

.
 Speziell weisen wir auch auf das Zeichen ^ hin.
 Es hat innerhalb der eckigen Klammern die Bedeutung von 
\begin_inset Quotes eld
\end_inset

nicht
\begin_inset Quotes erd
\end_inset

 (logische Negation):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^[Zz]u([^m])
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{ZU}$1
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Dieses Regelbeispiel bedeutet also: Ersetze die Vorsilbe zu- am Anfang eines
 Wortes durch {ZU}, sofern das darauffolgende Zeichen kein m ist (in Stolze-Schr
ey wird in diesem Fall keine Kürzung verwendet).
 Beachten Sie, dass hier die beiden Zeichen ^ verschiedene Bedeutungen haben:
 Das erste bedeutet 
\begin_inset Quotes eld
\end_inset

Wortanfang
\begin_inset Quotes erd
\end_inset

, das zweite bedeutet 
\begin_inset Quotes eld
\end_inset

nicht m
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Wenn Sie das Zeichen ^wortwörtlich (also als Zeichen) suchen möchten, müssen
 Sie es 
\begin_inset Quotes eld
\end_inset

escapen
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

ABC
\backslash
^XYZ
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

ABC{circonflex}XYZ
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Wandelt die Zeichenkette 
\begin_inset Quotes eld
\end_inset

ABC^XYZ
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

ABC{circonflex}XYZ
\begin_inset Quotes erd
\end_inset

 um!
\end_layout

\begin_layout Standard
Es kann nicht genug betont werden, wie wichtig diese unscheinbaren Unterschiede
 sind: REGEX ist deshalb so 
\begin_inset Quotes eld
\end_inset

kompliziert
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

tricky
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

kryptisch
\begin_inset Quotes erd
\end_inset

 - oder wie immer Sie es bezeichnen möchten - weil ein einziges Zeichen
 je nach Art und Weise, wie es verwendet wird, eine total andere Bedeutung
 haben kann! Verwenden Sie in diesem Fall den erwähnten REGEX-Tester und
 vergewissern Sie sich, dass Ihre Regel auch wirklich das heisst, was Sie
 meinen ...
 
\end_layout

\begin_layout Subsection*
Regeln in VSTENO
\end_layout

\begin_layout Standard
Die Regeln, die wir uns bis jetzt angesehen haben, entsprachen dem Standard-Sche
ma der REGEX-Replace-Funktion, nämlich: Wenn A, dann (ersetze durch) B.
 VSTENO erweitert den Regelformalismus um eine weitere Möglichkeit: Wenn
 A, dann B, ausser C (oder D):
\end_layout

\begin_layout LyX-Code
A => B                       normale REGEX-Regel
\end_layout

\begin_layout LyX-Code
A => { B, C, D ..., X }      erweiterte Regel
\end_layout

\begin_layout Standard
In VSTENO können diese Formeln genau in dieser Weise notiert werden.
 Wir verwenden noch einmal die Kürzung 
\begin_inset Quotes eld
\end_inset

HAB
\begin_inset Quotes erd
\end_inset

, die wir bereits weiter oben gesehen haben:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout Standard
Diese Regel bedeutet also: Ersetz die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 (oder 
\begin_inset Quotes eld
\end_inset

Hab
\begin_inset Quotes erd
\end_inset

) an einer beliebigen Stelle des Wortes durch 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, AUSSER das Muster 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset

 (mit Grossbuchstaben) steht am Anfang des Wortes.
 Diese Regel nimmt in den folgenden Beispielwörtern folgende Transformationen
 vor:
\end_layout

\begin_layout LyX-Code
Inhaber => In{HAB}er
\end_layout

\begin_layout LyX-Code
haben => {HAB}en
\end_layout

\begin_layout LyX-Code
habt => {HAB}t
\end_layout

\begin_layout LyX-Code
schaben => schaben
\end_layout

\begin_layout LyX-Code
Haber => Haber
\end_layout

\begin_layout LyX-Code
Habermacher => Habermacher
\end_layout

\begin_layout Standard
Beachten Sie, dass das zweite Element des Folgearrays 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

 von VSTENO ebenfalls als REGEX-Muster interpretiert wird, weshalb es auch
 auf 
\begin_inset Quotes eld
\end_inset

Habermacher
\begin_inset Quotes erd
\end_inset

 zutrifft (sonst müsste dort 
\begin_inset Quotes eld
\end_inset

^Haber$
\begin_inset Quotes erd
\end_inset

 stehen).
\end_layout

\begin_layout Standard
Auch diese Kürzungsregel für 
\begin_inset Quotes eld
\end_inset

HAB
\begin_inset Quotes erd
\end_inset

 ist nicht perfekt, da z.B.
 das Wort 
\begin_inset Quotes eld
\end_inset

Habicht
\begin_inset Quotes erd
\end_inset

 ebenfalls zu 
\begin_inset Quotes eld
\end_inset

{HAB}icht
\begin_inset Quotes erd
\end_inset

 gekürzt wird.
 Mit dem erweiterten Regelformalismus von VSTENO können wir weitere Ausnahmen
 aber sehr einfach im Folge-Array hinzufügen:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Habicht
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout Standard
Auch hier hat die REGEX-Notation wieder den Vorteil, dass sämtliche Fälle
 (z.B.
 Genetiv 
\begin_inset Quotes eld
\end_inset

Habichts
\begin_inset Quotes erd
\end_inset

) erfasst werden.
\end_layout

\begin_layout Subsection*
Hybride Regeln
\end_layout

\begin_layout Standard
Mit der linguistischen Analyse (Silbentrennung, zusammengesetzte Wörter,
 phonetische Übertragung) wurden auch so genannte hybride Regeln eingeführt.
 Hybride Regeln haben die Form:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
A: Bedingung1
\end_layout

\begin_layout LyX-Code
B: Bedingung2
\end_layout

\begin_layout LyX-Code
C: Folge (zu Bedingung2)
\end_layout

\begin_layout Standard
Hybride Regeln haben also zwei Bedingungen, die zum Beispiel verwendet werden
 können, um zu definieren, dass eine phonetische Regel nur dann angewendet
 werden soll, wenn sie einer bestimmten Zeichenfolge im geschriebenen Wort
 entspricht:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

tstwrt(ment$)
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

ma~$
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

{MENT}
\begin_inset Quotes erd
\end_inset

 };
\end_layout

\begin_layout Standard
Hier bedeuten:
\end_layout

\begin_layout LyX-Code
tstwrt: test written (teste die schriftliche Form)
\end_layout

\begin_layout LyX-Code
ment$: REGEX für Wörter, die in der schriftlichen Form auf -ment enden
\end_layout

\begin_layout LyX-Code
ma~$: REGEX für Wörter, die in der phonetischen Form auf ma~ enden
\end_layout

\begin_layout LyX-Code
{MENT}: Transformation (Kürzung -ment), falls beide Bedingungen zutreffen
\end_layout

\begin_layout Standard
Diese Regel wendet also die Kürzungsregel für Adverbien im Französischen
 an, die auf -ment enden.
 Transformiert werden zum Beispiel:
\end_layout

\begin_layout LyX-Code
lentement (Schrift) 
\end_layout

\begin_layout LyX-Code
la~t@ma~ (Phonetik) => la~t@{MENT}
\end_layout

\begin_layout Standard
Nicht angewandt wird die Regel aber hingegen auf:
\end_layout

\begin_layout LyX-Code
diamant (Schrift) - endet nicht auf -ment
\end_layout

\begin_layout LyX-Code
diam~a (Phonetik)
\end_layout

\begin_layout Standard
Ebenfalls ist es mit hybriden Regeln möglich, phonetische Transformationen
 zum Beispiel davon abhänging zu machen, ob es sich um ein zusammengesetztes
 Wort handelt:
\end_layout

\begin_layout LyX-Code
"tstlng((?:^|
\backslash
|)[Ff]ore?(?:$|
\backslash
|))" => { "^f.*?r$", "{FOR}" };
\end_layout

\begin_layout Standard
Hier bedeuten:
\end_layout

\begin_layout LyX-Code
tstlng: teste die linguistische Form (lng)
\end_layout

\begin_layout LyX-Code
(?:^|
\backslash
|)[Ff]ore?(?:$|
\backslash
|): REGEX für 
\begin_inset Quotes eld
\end_inset

for
\begin_inset Quotes erd
\end_inset

 als selbständiges Wort (lng-Form)
\end_layout

\begin_layout LyX-Code
^f.*?r$: phonetische Form 
\begin_inset Quotes eld
\end_inset

for
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
{FOR}: Transformation, falls beide Bedingungen zutreffen (Kürzung 
\begin_inset Quotes eld
\end_inset

for
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
Diese Regel transformiert zum Beispiel Wörter wie
\end_layout

\begin_layout LyX-Code
for|give (Schrift)
\begin_inset Foot
status open

\begin_layout Plain Layout
Diese Beispiele werde hier nicht in der exakten Schreibweise, sondern der
 Einfachheit halber nur sinngemäss wiedergegeben.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
forgiv (Phonetik) => {FOR}giv
\end_layout

\begin_layout LyX-Code
therefore (Schrift)
\end_layout

\begin_layout LyX-Code
Der|for => Der{FOR}
\end_layout

\begin_layout Standard
nicht aber
\end_layout

\begin_layout LyX-Code
forge
\end_layout

\begin_layout Standard
weil die linguistische Analyse hier keine eigenständige Form von 
\begin_inset Quotes eld
\end_inset

for
\begin_inset Quotes erd
\end_inset

 erkennt.
\end_layout

\begin_layout Standard
Weitere Hinweise über die Verwendung der linguistischen Analyse und hybrider
 Regeln werden im Abschnitt linguistische Analyse gegeben.
\end_layout

\begin_layout Subsection*
Optionale Regeln
\end_layout

\begin_layout Standard
Mit Version 0.3 (Hyperion) werden neu optionale Regeln in VSTENO eingeführt.
 Diese erlauben es dem/der Entwickler/in von stenografischen Modellen, Optionen
 zu definieren, welche vom/von der Anwedner/in im Eingabeformular an- oder
 abgewählt werden können.
 Dadurch ist es möglich, verschiedene Varianten einer Schrift in ein- und
 demselben Modell unterzubringen, was die Arbeit enorm vereinfacht, da viele
 Regeln für verschiedenen Varianten gelten - und nur einige wenige spezifische
 Regeln für bestimmte Varianten zusätzlich definiert werden müssen.
\end_layout

\begin_layout Standard
Als Beispiel nehmen wir - einmal mehr - das System Stolze-Schrey, das in
 drei Stufen existiert: Grundschrift (Verkehrsschrift), Eilschrift (Geschäftsste
no) und Redeschrift (Debattenschrift).
 Wobei die verschiedenen Varianten aufbauend sind: die Eilschrift baut auf
 der Grundschrift, die Redeschrift wiederum auf der Eilschrift auf.
\end_layout

\begin_layout Standard
Wenn ich - als Entwickler eines stenografischen Modells (wie z.B.
 DESSBAS) - die Varianten Grundschrift und Eilschrift im gleichen Modell
 abbilden will, dann muss ich als erstes Optionen definieren, die vom/von
 der Anwender/in an- oder abgewählt werden können.
 Hierfür setze ich im Header-Teil des Modells zum Beispiel folgende Session-Vari
ablen:
\end_layout

\begin_layout LyX-Code
"model_option0_text" := "HF1";
\end_layout

\begin_layout LyX-Code
"model_option0_yesno" := "no";
\end_layout

\begin_layout LyX-Code
"model_option1_text" := "HF2"; 		
\end_layout

\begin_layout LyX-Code
"model_option1_yesno" := "no";
\end_layout

\begin_layout Standard
Diese Bewirken nun, dass im Einabeformular hinter dem Modell die Bezeichnungen
 
\begin_inset Quotes eld
\end_inset

HF1
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

HF2
\begin_inset Quotes erd
\end_inset

 jeweils mit einer Checkbox (viereckiges Quadrat zum Anklicken) angezeigt
 wird.
 
\begin_inset Quotes eld
\end_inset

HF
\begin_inset Quotes erd
\end_inset

 steht hier für Hanspeter Frech: Er ist der Autor eines Lehrgangs für Eilschrift
\begin_inset Foot
status open

\begin_layout Plain Layout
Hanspeter Frech, "Die superschnelle Geheimschrift.
 Gekürzte Stenografie", Schweizerischer Stenografenverband Stolze/Schrey
 (SSV), Wetzikon, November 2017.
\end_layout

\end_inset

, der für die Definition der entsprechenden Regeln als Grundlage verwendet
 wurde.
 Die Zahlen 1 und 2 sollen hier für eine 
\begin_inset Quotes eld
\end_inset

mässig gekürzte
\begin_inset Quotes erd
\end_inset

 (1) oder 
\begin_inset Quotes eld
\end_inset

stärker gekürzte
\begin_inset Quotes erd
\end_inset

 (2) Eilschrift stehen
\begin_inset Foot
status open

\begin_layout Plain Layout
In Variante 2 werden z.B.
 auch Wortendungen stark gekürt: 
\begin_inset Quotes eld
\end_inset

dieser Mann
\begin_inset Quotes erd
\end_inset

 wird zu 
\begin_inset Quotes eld
\end_inset

dies Mann
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ewiges Vergessen
\begin_inset Quotes erd
\end_inset

 wird zu 
\begin_inset Quotes eld
\end_inset

ewig Vergessen
\begin_inset Quotes erd
\end_inset

 etc.
\end_layout

\end_inset

.
 Die Session-Variablen haben die Form:
\end_layout

\begin_layout LyX-Code
model_optionX_text
\end_layout

\begin_layout LyX-Code
model_optionX_yesno
\end_layout

\begin_layout Standard
Wobei X eine Zahl von 0-9 sein darf.
 Es können also maximal 10 Optionen pro Modell definiert werden.
 
\begin_inset Quotes eld
\end_inset

Text
\begin_inset Quotes erd
\end_inset

 entspricht dem Text, der im Formular und die dieser Reihenfolge (Option
 0 zuerst, Option 9 zuletzt) angezeigt wird.
 
\begin_inset Quotes eld
\end_inset

Yesno
\begin_inset Quotes erd
\end_inset

 definiert, ob die Option grundsätzlich ein- oder ausgeschaltet ist (hier
 sind sie grundsätzlich ausgeschaltet, was der Grundversion / Verkehrschrift
 entspricht).
\end_layout

\begin_layout Standard
Sobald die Optionen definiert sind, können diese für die Regeln verwendet
 werden.
 Als Beispiel: In der Eilschrift gibt es zusätzliche Kürzungen wie z.B.
 
\begin_inset Quotes eld
\end_inset

geworden
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

wurde
\begin_inset Quotes erd
\end_inset

, die als hochgestellte O und hochgestellte UND (schattiertes U) geschrieben
 werden.
 Wir fügen diese Eilschrift-spezifischen Regeln nun im bestehenden Modell
 dazu.
 Erst definieren wir die neuen Kürzungen (z.B.
 im Shortener):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

tstopt(01)[Gg]eworden
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{GEWORDEN}
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

tstopt(01)[Ww]urde
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{WURDE}
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
Und transkribieren diese dann zu Stenozeichen (z.B.
 im Substituter):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

tstopt(01){GEWORDEN}
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[I][&O]
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

tstopt(01){WURDE}
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[AU][&U]
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
[&O] und [&U] entsprechen hier den Vokalzeichen o und u, [I] und [AU] geben
 eine unschattierte und eine schattierte Hochstellung an.
 Der Zusatz 
\begin_inset Quotes eld
\end_inset

testopt(01)
\begin_inset Quotes erd
\end_inset

 bedeutet nun, dass die Regel nur ausgeführt wird, wenn der/die Anwender/in
 die Option 0 oder 1 im Eingabeformular angeklickt hat.
 Es genügt hier also, wenn eine der zwei Optionen gewählt ist (logisches
 Oder).
 Im Prinzip könnte bei den zweiten Regeln der Zusatz 
\begin_inset Quotes eld
\end_inset

testopt(01)
\begin_inset Quotes erd
\end_inset

 auch weggelassen werden: In der Grundschrift gibt es keine Kürzungen für
 
\begin_inset Quotes eld
\end_inset

geworden
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

wurde
\begin_inset Quotes erd
\end_inset

, deshalb würden auch keine {GEWORDEN} und {WURDE} generiert, die später
 von einer Grundschrift-Regel (= ohne Optionen) ersetzt werden können.
 Dennoch ist es aus Gründen der Lesbarkeit zu empfehlen, optionale Regeln
 immer als solche zu kennzeichnen.
\end_layout

\begin_layout Standard
Analog könnten wir nun weitere Optionen (z.B.
 2) für die Debattenschrift ergänzen.
 Oder wir können die Optionen dazu verwenden, individuelle Varianten, die
 wir beim Stenografieren verwenden, ins Modell zu integrieren (aber so,
 dass sie jederzeit an- oder abgewählt werden können).
 Eine weitere Möglichkeit sind diakritische Zeichen: Auch diese können als
 optionale Regeln definiert und somit an- oder abgeschaltet werden.
\end_layout

\begin_layout Standard
Optionen sind somit ein mächtiges und praktisches Instrument, um verschiedene
 Varianten eines Modells zu definieren und auseinanderzuhalten.
\end_layout

\begin_layout Subsection*
Gross-/Kleinbuchstaben
\end_layout

\begin_layout Standard
VSTENO bietet eine weitere, sehr nützliche Erweiterung des Standard-REGEX-Regelf
ormalismus, um Gross- in Kleinbuchstaben umzuwandeln (und umgekehrt):
\end_layout

\begin_layout LyX-Code
"([A-Z])" => "strtolower()";
\end_layout

\begin_layout LyX-Code
"([a-z])" => "strtoupper()";
\end_layout

\begin_layout Standard
Hier wird also mit ([A-Z]) und ([a-z]) nach Gross- und Kleinbuchstaben gesucht.
 Anschliessend wird die gefundene Zeichenkette mit strtolower() udn strtoupper()
; in Klein- und Grossbuchstaben umgewandelt.
 Beachten Sie bitte die runde Klammer (die obligatorisch ist): Sie markiert
 jenen Teil des Wortes, der umgewandelt werden soll.
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass die obige Regel die Umlaute (ä, ö, ü) oder andere
 Zeichen (z.B.
 mit Zirkumflex) ausser Acht lässt!
\end_layout

\begin_layout Standard
VSTENO bzw.
 die Regeln für Stolze-Schrey verwendet diese Umwandlungen mehrmals: Wenn
 man z.B.
 das Übertragen konsequent mit Kleinbuchstaben beginnt und alle Umwandlungen
 mit Grossbuchstaben vornimmt, dann weiss man genau, welche Teile des Wortes
 bereits umgeschrieben sind (alle Grossbuchstaben) und welche noch umgeschrieben
 werden müssen (alle Kleinbuchstaben).
\end_layout

\begin_layout Section*
Funktionen
\end_layout

\begin_layout Standard
Mit dem Debug-Modus konnten wir bereits einen Eindruck gewinnen, wie (in
 welcher Reihenfolge) VSTENO die Regeln innerhalb der Section Rules abarbeitet.
 Die Standardreihenfolge ist im Prinzip von oben nach unten.
 Aber es gibt auch Möglichkeiten, Gruppen von Regeln zu so genannten Funktionen
 zusammenzufassen und die Abarbeitungsreihenfolge dieser Funktionen selber
 zu definieren bzw.
 von Bedingungen abhängig zu machen.
 Aber der Reihe nach - betrachten wir zunächst ein Beispiel:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(relancer)		
\end_layout

\begin_layout LyX-Code
     "^(.*?)$" => "strtolower()";	// all to low 		
\end_layout

\begin_layout LyX-Code
	 "({.*?})" => "strtoupper()";    // {..} to upper again	  
\end_layout

\begin_layout LyX-Code
     "(
\backslash
[.*?
\backslash
])" => "strtoupper()";  // [..] to upper again
\end_layout

\begin_layout LyX-Code
#EndSubSection(relancer)
\end_layout

\begin_layout Standard
Dies Sequenz fasst 3 Regeln zur Funktion 
\begin_inset Quotes eld
\end_inset

relancer
\begin_inset Quotes erd
\end_inset

 zusammen: (1) alle Zeichen werden zu Kleinbuchstaben umgewandelt, (2) +
 (3) Kürzungen {..} und gebündelte Zeichen [..] werden wieder zu Grossbuchstaben
 umgewandelt.
 Beispiel: {VER}LO[VR]{EN} wird zu: {VER}lo[VR]{EN}
\begin_inset Foot
status open

\begin_layout Plain Layout
Der relancer macht sich hier das vorhin erklärte Prinzip zunutze und markiert
 Wortteile, die nicht mehr umgeschrieben werden müssen als Grossbuchstaben,
 und alles, was noch umgeschrieben werden muss, als Kleinbuchstaben.
\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Stages
\end_layout

\begin_layout Standard
Stages wurden als neues
\begin_inset Foot
status open

\begin_layout Plain Layout
Erweiterung des Metaparsers im Februar 2019.
\end_layout

\end_inset

 Konzept eingeführt, um zu definieren, auf welchen Teil des Textes oder
 Wortes sich die Regeln beziehen:
\end_layout

\begin_layout LyX-Code
stage 0: gesamter Text
\end_layout

\begin_layout LyX-Code
stage 1: Wörterbuch / linguistische Analyse (einzelnes Wort)
\begin_inset Foot
status open

\begin_layout Plain Layout
Der linguistical analyzer wurde ebenfalls neu eingeführt und wird unter
 anderem hier erläutert: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/gel_speiende_spiegel.pdf"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
stage 2: ganzes Wort
\end_layout

\begin_layout LyX-Code
stage 3: Teilwörter (in zusammengesetzten Wörtern)
\end_layout

\begin_layout LyX-Code
stage 4: ganzes Wort
\end_layout

\begin_layout Standard
Betrachten wir einen Beispieltest:
\end_layout

\begin_layout LyX-Code
Dies ist ein Beispieltext.
 Er enthält ganze 
\begin_inset Quotes eld
\end_inset

Sätze
\begin_inset Quotes erd
\end_inset

 und 
\end_layout

\begin_layout LyX-Code
einzelne 
\begin_inset Quotes eld
\end_inset

Wörter
\begin_inset Quotes erd
\end_inset

, sowie Satzzeichen (Punkte und Kommas) 
\end_layout

\begin_layout LyX-Code
und weitere Zeichen (zum Beispiel Leerzeichen, Klammern 
\end_layout

\begin_layout LyX-Code
und Anführungszeichen).
 D.h.
 also er enthält auch 
\end_layout

\begin_layout LyX-Code
diakritische Zeichen.
\end_layout

\begin_layout Standard
In Stage 0 
\begin_inset Quotes eld
\end_inset

sieht
\begin_inset Quotes erd
\end_inset

 nun VSTENO den ganzen Text.
 D.h.
 es ist möglich, REGEX-Regeln zu schreiben, die auf den gesamten Text und
 sämtliche Zeichen zugreifen können:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

zum Beispiel
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

z.B.
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset


\backslash
(
\begin_inset Quotes eld
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

;
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

D
\backslash
.h
\backslash
.
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

dh
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
Hier werden also Leerzeichen zwischen zwei Wörtern entfernt und der Ausdruck
 gekürtz (Beispiel 1: 
\begin_inset Quotes eld
\end_inset

z.B.
\begin_inset Quotes erd
\end_inset

), runde durch eckige Klammern ersetzt (Beispiel 2) und Punkte aus einer
 Abkürzung entfernt (Beispiel 3).
\end_layout

\begin_layout Standard
In Stage 1 trennt VSTENO dann den Text in einzelne Wörter, wobei 
\begin_inset Quotes eld
\end_inset

Wort
\begin_inset Quotes erd
\end_inset

 bedeutet: alles, was zwischen zwei Leerzeichen steht.
 Zusätzlich werden alle Sonderzeichen (Punkte, Kommas, Klammern, Anführungszeich
en etc.) herausgefiltert.
 Für die Regeln 
\begin_inset Quotes eld
\end_inset

sichtbar
\begin_inset Quotes erd
\end_inset

 sind nunmehr nur noch so genannte 
\begin_inset Quotes eld
\end_inset

Rohwörter
\begin_inset Quotes erd
\end_inset

 (bare words):
\end_layout

\begin_layout LyX-Code
Beispieltext
\end_layout

\begin_layout LyX-Code
Kommas
\end_layout

\begin_layout LyX-Code
D.h
\end_layout

\begin_layout Standard
Hier wurden am Ende des Wortes also ein Punkt (
\begin_inset Quotes eld
\end_inset

Beispieltext
\begin_inset Quotes erd
\end_inset

) und eine Klammer (
\begin_inset Quotes eld
\end_inset

Kommas
\begin_inset Quotes erd
\end_inset

) entfernt.
 Beachten Sie, dass bei 
\begin_inset Quotes eld
\end_inset

d.h.
\begin_inset Quotes erd
\end_inset

 nur der letzte Punkt entfernt wird (der Punkt im Innern bleibt also bestehen,
 da VSTENO nur Sonderzeichen am Anfang und am Ende eines Wortes entfernt).
\end_layout

\begin_layout Standard
Diese Rohwörter (bare words) werden nun (in Stage 1) an die Datenbank gesandt.
 Findet VSTENO keinen Eintrag, geht das Wort anschliessend zur linguistischen
 Analyse (linguistical analyzer).
\end_layout

\begin_layout Standard
Die Stage 2 
\begin_inset Quotes eld
\end_inset

sieht
\begin_inset Quotes erd
\end_inset

 dann genau das gleiche wie die Stage 1, also einzelne Wörter, mit dem Unterschi
ed, dass die Rohwörter nun durch die linguistische Analyse mit zusätzlichen
 Informationen versehen wurden.
 Es sind dies Silbengrenzen (-) für Silben (z.B.
 
\begin_inset Quotes eld
\end_inset

wei-te-re
\begin_inset Quotes erd
\end_inset

), Morphemgrenzen (+) für Vorsilben (z.B.
 
\begin_inset Quotes eld
\end_inset

ent+hält
\begin_inset Quotes erd
\end_inset

), Wortgrenzen (|) für zusammengesetzte Wörter (z.B.
 
\begin_inset Quotes eld
\end_inset

Bei+spiel|text
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Leer|zei-chen
\begin_inset Quotes erd
\end_inset

) und Morphemgrenzen (#) für Nachsilben (z.B.
 
\begin_inset Quotes eld
\end_inset

heim#lich
\begin_inset Quotes erd
\end_inset

).
 Wir sprechen hier von der LNG-Form: Diese kann definiert werden als 
\begin_inset Quotes eld
\end_inset

Rohwort, die linguistische Information enthält und unter Umständen aus mehreren
 zusammengesetzten Wörtern besteht
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Die Stage 3 kommt dann bei zusammengesetzten Wörtern zum Zug.
 Sie 
\begin_inset Quotes eld
\end_inset

sieht
\begin_inset Quotes erd
\end_inset

 - der Reihe nach - die einzelnen 
\begin_inset Quotes eld
\end_inset

Teilwörter der LNG-Form
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Bei+spiel|text
\begin_inset Quotes erd
\end_inset

: Regeln werden zuerst auf 
\begin_inset Quotes eld
\end_inset

Bei+spiel
\begin_inset Quotes erd
\end_inset

, danach auf 
\begin_inset Quotes eld
\end_inset

text
\begin_inset Quotes erd
\end_inset

 angewandt.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

ent+hält
\begin_inset Quotes erd
\end_inset

: Die Regeln werden auf 
\begin_inset Quotes eld
\end_inset

ent+hält
\begin_inset Quotes erd
\end_inset

 angewandt (ist kein zusammengesetztes Wort).
\end_layout

\begin_layout Standard
Teilwörter werden hier also als in einzelne, eigenstängige Wörter aufgebrochen,
 die einen eigenen Wortanfang und ein Wortende aufweisen, welche wiederum
 von REGEX-Regeln genutzt werden können.
 Die Stage 3 ist damit insbesondere für die korrekte Anwendung von Kürzungen
 wichtig.
\end_layout

\begin_layout Standard
Zur Illustration hier nun einige konkrete Beispiele, wie die Stages genutzt
 werden können:
\end_layout

\begin_layout Itemize
Stage 0: In Stolze-Schrey werden Abkürzungen ohne Punkte geschrieben.
 Da Satzzeichen in den Stages 1 bis 4 unsichtbar sind, können solche Regeln
 nur in der Stage 0 (gesamter Text ist sichtbar) umgesetzt werden.
 Die Regel 
\begin_inset Quotes eld
\end_inset

[Dd]
\backslash
.h
\backslash
.
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

dh
\begin_inset Quotes erd
\end_inset

 zum Beispiel entfernt hier beide Satzzeichen (Punkte).
\end_layout

\begin_layout Itemize
Stage 1: Die Stage 1 ist ein spezieller Schritt und der Datenbank (Wörterbuch)
 bzw.
 der linguistischen Analyse vorbehalten.
 Aber auch hier ist es möglich, REGEX-Regeln zu schreiben, die sich auf
 ein Rohwort (bare word) beziehen.
 D.h.
 VSTENO sieht hier einzelne Wörter ohne Satz- und Sonderzeichen: 
\begin_inset Quotes eld
\end_inset

Teetasse.
\begin_inset Quotes erd
\end_inset

 aus dem Originaltext, wird somit zum Rohwort 
\begin_inset Quotes eld
\end_inset

Teetasse
\begin_inset Quotes erd
\end_inset

, das ans Wörterbuch (Datenbank) gesandt wird.
 Findet VSTENO einen Eintrag für das Rohwort, so wird die weitere Berechnung
 des Stenogramms mit dem gefundenen Eintrag fortgesetzt (dies kann entweder
 die LNG-, STD- oder PRT-Form sein, siehe später).
 Wird kein Eintrag gefunden, wendet VSTENO anschliessend eine linguistische
 Analyse an (auf die ebenfalls später genauer eingegangen wird).
 In unserem Fall wird dabei 
\begin_inset Quotes eld
\end_inset

Teetasse
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

 (d.h.
 VSTENO erkennt, dass es sich um ein zusammengesetztes Wort mit zwei Teilen
 handelt).
\end_layout

\begin_layout Itemize
Stage 2: VSTENO sieht hier das gleiche wie in Stage 1, also das gesamte
 Wort 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

.
 Der einzige Unterschied: Das Wort wurde nun im Wörterbuch nachgeschlagen
 oder linguistisch analysiert und enthält zusätzliche Informationen.
 In unserem Fall ist dies das Zeichen |, welche eine Wortgrenze angibt.
 Wir könnten nun in Stage 2 eine Regel der Form 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Tee
\backslash

\backslash
tasse
\begin_inset Quotes erd
\end_inset

 schreiben, um VSTENO dazu zu bringen, das Wort getrennt zu schreiben.
\end_layout

\begin_layout Itemize
Stage 3: Hier sieht VSTENO jedes Teilwort (bei zusammengesetzten Wörtern)
 einzeln.
 Nehmen wir z.B.
 das Wort 
\begin_inset Quotes eld
\end_inset

Vertragsvermittler
\begin_inset Quotes erd
\end_inset

.
 VSTENO wird hier zwei Teilwörter erkennen: 
\begin_inset Quotes eld
\end_inset

Vertrags
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

Vermittler
\begin_inset Quotes erd
\end_inset

.
 Wenn wir nun eine Regel der Form 
\begin_inset Quotes eld
\end_inset

^Ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

 in Stage 3 schreiben, so wird die Kürzung ver- auf BEIDE Vorsilben angewandt:
 
\begin_inset Quotes eld
\end_inset

{VER}trags|{VER}mittler
\begin_inset Quotes erd
\end_inset

.
 Schreiben wir die gleiche Regel in Stage 2, so wird nur die erste (am Wortanfan
g wegen des REGEX-Zeichens ^) ersetzt: 
\begin_inset Quotes eld
\end_inset

{VER}trags|vermittler
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Stage 4: Hier kehren wird zur gleichen Stufe wie in Stage 2 zurück, d.h.
 wir sehen wieder das ganze Wort, inklusive Wortgrenze |.
 Wir können dies nutzen, um z.B.
 Wörter zu trennen.
 Die Regel 
\begin_inset Quotes eld
\end_inset


\backslash
[&T
\backslash
]
\backslash
|
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[&T]
\backslash

\backslash

\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Beachten Sie, dass bestimmte Zeichen - wie [ und 
\backslash
 - in REGEX 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden müssen: 
\backslash
[ is also gleichbedeutend mit [ und 
\backslash

\backslash
 bedeutet 
\backslash
.
\end_layout

\end_inset

 trennt zum Beispiel Teilwörter, die auf Aufstrich-t (= [&T]) enden, vom
 folgenden Wort ab.
 
\end_layout

\begin_layout Standard
Wie aber definiere ich, welche Regeln in welcher Stage angewandt werden
 sollen? Hierfür werden die #BeginSubSection() und #EndSubSection()-Statements
 mit dem Stage-Schlüsselwort #>stageX kombiniert.
 X steht dabei für die Nummer der Stage:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(shortener,#>stage3) 
\end_layout

\begin_layout LyX-Code
   // hier beginnen Kürzungsregeln
\end_layout

\begin_layout LyX-Code
   // der Stage 3
\end_layout

\begin_layout LyX-Code
   // sie werden auf jedes Teilwort
\end_layout

\begin_layout LyX-Code
   // einzeln angewendet
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

^ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
#EndSubSection(shortener,#>stage4)
\end_layout

\begin_layout Standard
Das Beispiel zeigt die oben bereits erwähnte Kürzungsregel
\begin_inset Foot
status open

\begin_layout Plain Layout
Bitte beachten Sie, dass das Beispiel - der Übersichtlichkeit halber - stark
 vereinfacht ist.
 Eine so formulierte Regel würde viele falsche Wörter generieren (z.B.
 würde 
\begin_inset Quotes eld
\end_inset

Vers
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

{VER}s
\begin_inset Quotes erd
\end_inset

) und müsste präziser als 
\begin_inset Quotes eld
\end_inset

^[Vv]er
\backslash
+
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

 geschrieben werden (d.h.
 die Kürzung wird nur angewandt, wenn ver- von der linguistischen Analyse
 als Vorsilbe - mit einer darauffolgenden Morphemgrenze (+) - erkannt wurde.
\end_layout

\end_inset

.
 #BeginSubSection(shortener,#>stage3) bedeutet also 
\begin_inset Quotes eld
\end_inset

die folgende Regel wird in Stage 3 ausgeführt).
 Die Zeile #EndSubSection(shortener,#>stage4) bedeutet 
\begin_inset Quotes eld
\end_inset

hier endet die Stage 3 und die folgende Regel wird in Stage 4 ausgeführt
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Bitte beachten Sie folgende wichtige Regeln im Umgang mit Stages:
\end_layout

\begin_layout Itemize
Stages müssen der Reihe nach abgearbeitet werden (Sie können also nicht
 von Stage 0 zu Stage 4 springen und anschliessend wieder zu Stage 3 zurückkehre
n).
\end_layout

\begin_layout Itemize
Stages müssen nahtlos aufeinanderfolgen (d.h.
 wenn Stage 2 endet - z.B.
 mit #EndSubSection(accentizer,#>stage2) - so muss die folgende Zeile zwingend
 mit #BeginSubSection(shortener,#>stage3) beginnen).
\end_layout

\begin_layout Itemize
Die Wörterbuch-Variablen (STD und PRT) dürfen nicht in Stage 3 definiert
 werden, da sie sonst nicht das ganze Wort enthalten (weisen Sie sie deshalb
 in Stage 4 zu!)
\end_layout

\begin_layout Standard
Jede andere Verwendung der Stages für zu unvorhersehbaren Resultaten
\begin_inset Foot
status open

\begin_layout Plain Layout
You've been warned ...
 ! :)
\end_layout

\end_inset

!
\end_layout

\begin_layout Section*
Zeichenabstände
\end_layout

\begin_layout Standard
Eine grosse Herausforderung bei stenografischen Systemen stellt der Abstand
 zwischen den einzelnen Zeichen dar.
 Zu Beginn definierte VSTENO pro Zeichen fixe Abstände vor und nach den
 Zeichen (
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies sind die Offsets 4 und 5 im Zeichenheader (also offs_additional_x_before
 und offs_additional_x_after), die als legacy-Variablen für dei SE1 weiterhin
 unterstützt werden, aber im Grunde obsolet sind.
\end_layout

\end_inset

).
 Aber anders als bei normalen Fonts, wo die Abstände zwischen zwei Zeichen
 immer gleich gross sind
\begin_inset Foot
status open

\begin_layout Plain Layout
Bei so genannten 
\begin_inset Quotes eld
\end_inset

monospaced
\begin_inset Quotes erd
\end_inset

 Fonts ist der Abstand unabhängig von der Zeichenabfolge, also fix und gleich
 zwischen allen Zeichen.
 Bei proportionalen Fonts variieren zwar die Abstände je nach Zeichen, sind
 aber - spezifisch für die Zeichenkombination - grundsätzlich ebenfalls
 fix, es sei denn es kommen weitere typografische Feinheiten wie Kerning
 und Stegausgleich (z.B.
 in Verbindung mit Blocksatz) hinzu.
\end_layout

\end_inset

, können - bzw.
 müssen - Stenografiezeichen normal, hoch oder tief oder eng und weit verbunden
 werden.
 Ausserdem können Stenografiezeichen auch sehr hoch (z.B.
 tt, pp, ff) oder sehr klein (s, n oder Häkchen) sein.
 Zu guter Letzt gibt es Zeichen, die rund oder spitz enden oder beginnen,
 das heisst es gibt Verbindungstypen spitz-spitz, spitz-rund, rund-spitz,
 rund-rund - und auch die Rundung selber kann je nach Zeichen ganz anders
 sein (z.B.
 weite Rundung in Vorsilbe ent-, hingegen enge Rundung in b, n, m).
\end_layout

\begin_layout Standard
Kurzum, wenn man all diese Parameter zusammen nimmt, ergibt sich eine ganz
 stattliche Summe an Möglichkeiten
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich ging ursprünglich von etwa 50000 Fällen aus, aber die Sache ist weit
 schlimmer als angenommen: Das System Stolze-Schrey besteht zwar offiziell
 nur aus 43 Zeichen, aber viele Zeichen müssen in verschiedenen Ausführungen
 hinterlegt werden, was die Zahl also erhöht.
 Ausserdem können sich sehr viele Zeichen mit R und L zu Sekundärzeichen
 kombinieren (z.B.
 br, bl, cr, cl, dr, dl etc.), was die Zahl noch einmal signifikant erhöht.
 Meine Schätzung geht im Moment dahin, dass es rein theoretisch mehrere
 100'000 Möglichkeiten gibt! Nicht alle dieser 
\begin_inset Quotes eld
\end_inset

theoretischen
\begin_inset Quotes erd
\end_inset

 Kombinationen müssen speziell definiert werden.
 Insbesondere stellen weite Abstände grundsätzlich überhaupt kein Problem
 dar (da 
\begin_inset Quotes eld
\end_inset

ein bisschen weiter
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

ein bisschen weniger weit
\begin_inset Quotes erd
\end_inset

 optisch wenig Unterschied macht).
 Aber wenn nur schon die engen Abstände in den Varianten hoch (Vokale au,
 i = 2 Möglichkeiten), normal (Vokal a oder kein Vokal = 2 Möglichkeiten)
 und tief (Vokale o, u = 2 Möglichkeiten) in Verbindung mit all den Sekundärzeic
hen definiert werden müssen, ergibt sich sich schnell eine 6-stellige Zahl
 an Verbindungen.
 Aktuell sind z.B.
 im spanischen System 128520 Kombinationen durch spezifische Regeln definiert!
\end_layout

\end_inset

.
 Daraus folgt auch, dass es eigentlich unmöglich ist, die Abstandsproblematik
 innerhalb der Zeichendefinitionen zu lösen.
 Als Alternative bot sich an, das Ganze in den Parser zu transferieren,
 sprich die Abstände über REGEX-Regeln zu definieren.
 Aufgrund der schieren Anzahl an Möglichkeiten, ist es jedoch praktisch
 unmöglich, entsprechende Regeln von Hand zu definieren.
 Die beste Lösung scheint somit, die Zeichen zu Gruppieren und die Generierung
 entsprechender Regeln zu automatisieren.
 Mit dem spanischen Modell wird nun erstmals das folgende Verfahren getestet,
 das in drei Schritten stattfindet:
\end_layout

\begin_layout Enumerate
Als erstes werden die Zeichen in Gruppen eingeteilt.
\end_layout

\begin_layout Enumerate
Danach werden Kombinationen und entsprechende Abstände definiert.
\end_layout

\begin_layout Enumerate
Schliesslich werden daraus Abstandsregeln generiert (die - wie andere Regeln
 - in das Modell eingefügt werden können).
\end_layout

\begin_layout Standard
Im Folgenden nun die Beschreibung, wie die einzelnen Schritte vorgenommen
 werden.
\end_layout

\begin_layout Subsection*
Gruppierung
\end_layout

\begin_layout Standard
Um die Zeichen zu gruppieren wird der Offset 23 im Header der Zeichendefinitione
n genutzt.
 Hier vier Beispiele:
\end_layout

\begin_layout LyX-Code
"B" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, 0, 0, 0, 0, 0, "L3:L3A:R1:R1A", /*data*/ ...
 }
\end_layout

\begin_layout LyX-Code
"D" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, 0, 0, 0, 0, 0, "L1:L1A:R1:R1A", /*data*/ ...
 }
\end_layout

\begin_layout LyX-Code
"P" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, 0, 0, 0, 0, 0, "L3:L3A:R1:R1B", /*data*/ ...
 }
\end_layout

\begin_layout LyX-Code
"T" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
0, 0, 0, 0, 0, 0, 0, "L1:L1A:R1:R1B", /*data*/ ...
 }
\end_layout

\begin_layout Standard
Wichtig ist hier zuerst einmal, dass jedes Zeichen mehreren Gruppen zugeordnet
 werden kann (hierfür werden die einzelnen Gruppen durch Doppelpunkt : voneinand
er abgetrennt).
 In der obigen Gruppe ordnen wir die Zeichen B, P, D, T je 4 Gruppen zu,
 wobei wir zwischen Hauptgruppen, Hauptkategorien und Unterkategorien unterschei
den, die jeweils durch einen Buchstaben oder eine Zahl bezeichnet werden.
 
\end_layout

\begin_layout Standard
Die Buchstaben L und R bedeuten linke und rechte Hauptgruppe, d.h.
 der entsprechende Fall tritt ein, wenn das Zeichen links (als erstes Zeichen)
 oder rechts (als zweites, nachfolgendes Zeichen) steht.
 
\end_layout

\begin_layout Standard
Die Zahlen bezeichnen dann die Gruppennummer bzw.
 die Zeichenkategorie.
 Die Zeichen B, D, P und TT werden zum Beispiel alle derselben rechten Gruppe
 R1 zugeordnet, weil alle spitz und mit einem vertikalen String beginnen
 (in diesem Sinne verhalten sie sich als Folgezeichen gleich).
\end_layout

\begin_layout Standard
Hingegen haben B, P und D, T verschiedene linke Gruppen: B und P enden rund
 auf der Grundlinie (Gruppe L3), D, T endet zwar auch auf der Grundlinie,
 ist aber spitz und ausserdem 
\begin_inset Quotes eld
\end_inset

schlanker
\begin_inset Quotes erd
\end_inset

 als das Zeichen B, deshalb Gruppe L1.
 D.h.
 diese zwei Gruppen (L1, L3) verhalten sich als linke Zeichen (d.h.
 wenn sie zuerst stehen) anders.
\end_layout

\begin_layout Standard
Schliesslich unterscheiden wir durch den Buchstaben A und B weitere Unterkategor
ien, in diesem Falle nämlich, ob die Zeichen ein- oder zweistufig sind:
 A bedeutet hier einstufig (hierzu gehören B und D, sowohl als linke Zeichen
 L1A und L3A als auch als rechte Zeichen R1A und R3A), B bedeutet zweistufig
 (hierzu gehören P und T, sowohl als linke Zeichen L1B und L3B als auch
 als rechte Zeichen R1B und R3B).
 
\end_layout

\begin_layout Standard
Wir können die Klassifizierung der Zeichen in Haupt- und Untergruppen beliebig
 weiterführen und z.B.
 PP und TT mit einer weiteren Bezeichnung C analog dreistufigen Gruppen
 L1C, L3C, R1C, R3C zuordnen.
 
\end_layout

\begin_layout Standard
Sämtliche Bezeichnungen können frei gewählt werden und beliebig lang sein.
 Es besteht auch kein Unterschied, ob Buchstaben oder Zahlen verwendet werden.
 Die obgenannten Fälle sind also nur Beispiele (und statt L1A könnte man
 die Gruppe grad so gut 
\begin_inset Quotes eld
\end_inset

linkeschlankeeinstufigezeichen
\begin_inset Quotes erd
\end_inset

 nennen).
 Die Empfehlung lautet hier einfach: möglichst kurze Zeichen verwenden (der
 Übersichtlichkeit halber) und Untergruppen sollten kein überschneidenden
 Mengen bilden
\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn die Hauptgruppe R1 = { D, B, T, P, TT, PP } ist, dann sind Untergruppen
 R1 = { R1A = { D, B }, R1B ={ T, P }, R1C = { TT, PP } } korrekt.
 Falsch wäre R1 = { R1A = { D, B, T }, R1B ={ T, P, D }, R1C = { TT, PP
 } }, da sich R1A und R1B überschneiden.
 
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Die Zuordnung zu den Gruppen wird vom PARSER selbständig vorgenommen.
 Sämtliche Zeichen werden intern der Variable $token_groups zugeordnet.
 Es wird also nicht unterschieden, ob ein Zeichen zum Beispiel ein Vokal
 oder ein Konsonant ist.
 Aus diesem Grund sollte die automatische Zuweisung nur für Konsonanten
 verwendet werden.
 Für 
\begin_inset Quotes eld
\end_inset

Zwischenzeichen
\begin_inset Quotes erd
\end_inset

 (also Zeichen, die zwischen zwei anderen Zeichen vorkommen können, im System
 Stolze-Schrey typischerweise Vokal und Diphtonge) sollten manuell durch
 das Setzen der SESSION-Variable $vowel_groups im Header-Teil der Modell-Definit
ion definiert werden, also innerhalb der Schlüsselwörter #BeginSubSection(sessio
n) und #EndSubSection(session)
\begin_inset Foot
status open

\begin_layout Plain Layout
Das genaue Format wird im folgenden Abschnitt 
\begin_inset Quotes eld
\end_inset

Kombinationen
\begin_inset Quotes erd
\end_inset

 erklärt.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session)
\end_layout

\begin_layout LyX-Code
    "spacer_vowel_groups" := "
\end_layout

\begin_layout LyX-Code
        V1:[A,O,U], 
\end_layout

\begin_layout LyX-Code
        V2:[I,AU]";
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Hier werden zwei Vokalgruppen (V1, V2) definiert, welche zwischen normal
 und tiefen (a, o, u) und hochgestellten (i, au) Vokalen unterscheiden.
 Wir definieren hier nur zwei Gruppen, d.h.
 wir gehen davon aus, dass zum Beispiel die Abstände in den Kombinationen
 dd, dad, dod, dud gleich gross sind
\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn wir dies nicht wollen, müssen wir für normale und tiefgestellte Vokale
 separate Gruppen definieren, was durchaus möglich ist.
 Es ist aber zu beachten, dass die Zahl der Kombinationen mit jeder zusätzlichen
 Gruppen exponentiell anwächst (deshalb der Versuch, möglichst wenige Gruppen
 zu definieren).
\end_layout

\end_inset

.
 Speziell definieren müssen wir sicher die Hochstellung, da hier gerade
 beim Aufeinandertreffen von breiten linken und hohen rechten Zeichen mehr
 Abstand benötigt wird (ein Beispiel ist hier 
\begin_inset Quotes eld
\end_inset

stritt
\begin_inset Quotes erd
\end_inset

: das ST in Kombination mit dem R und der Kopfschlaufe kommt dem 
\begin_inset Quotes eld
\end_inset

Aufstrich
\begin_inset Quotes erd
\end_inset

 Richtung TT in die Quere, weshalb es etwas weiter auseinander geschrieben
 werden muss als zum Beispiel die Verbindung d-i-d in Didier).
\end_layout

\begin_layout Subsection*
Kombinationen
\end_layout

\begin_layout Standard
Sobald die Zeichen in Gruppen und Unterguppen eingeteilt sind, können Zeichenkom
binationen definiert werden.
 Dies kann durch Setzen von SESSION-Variablen im Header-Teil der Modell-Definiti
on erreicht werden, also innerhalb der Schlüsselwörter #BeginSubSection(session)
 und #EndSubSection(session):
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session)
\end_layout

\begin_layout LyX-Code
    "spacer_token_combinations" := "
\end_layout

\begin_layout LyX-Code
        C1:[L1,R1], 
\end_layout

\begin_layout LyX-Code
        C2:[L3,R1A], 
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Nach dem Format 
\begin_inset Quotes eld
\end_inset

variable
\begin_inset Quotes erd
\end_inset

 := 
\begin_inset Quotes eld
\end_inset

wert
\begin_inset Quotes erd
\end_inset

; kann hier also Variablen spacer_token_combinations ein Wert zugewiesen
 werden.
 Der Wert hat das Format:
\end_layout

\begin_layout LyX-Code
X1:[Y1,Z1],X2:[Y2,Z2],...,Xn:[Yn,Zn]
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies entspricht im Wesentlichen einem JSON-Format, bei dem aus Gründen der
 Lesbarkeit die Anführungszeichen und die geschweifte Klammer {} weggelassen
 werden.
 Intern konvertiert VSTENO die Definitionen in ein gültiges JSON-Format
 und parst sie mit der Funktion json_decode().
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
X entspricht der Bezeichnung der Zeichenkombination (also welchen 
\begin_inset Quotes eld
\end_inset

Namen
\begin_inset Quotes erd
\end_inset

 wir ihr geben), Y und Z verweisen auf die zuvor definierten Zeichengruppen.
 
\end_layout

\begin_layout Standard
Im obigen Beispiel definieren wir 2 Zeichenkombinationen: die Kombination
 C1, die aus einem ersten Zeichen aus der Gruppe L1 und einem Folgezeichen
 aus der Gruppe R1 und die Kombination C2 mit Zeichen aus den Gruppen L3
 und R1A.
 Diese Kombinationen definieren also die folgenden Zeichenfolgen: 
\end_layout

\begin_layout LyX-Code
C1 = db, dd, dp, dt; tb, td, tp, tt
\end_layout

\begin_layout LyX-Code
C2 = bb, bd; pb, bd
\end_layout

\begin_layout Standard
C1 verbindet Zeichen aus Hauptkategorien (L1, R1), wohingegen C2 Zeichen
 aus einer Hauptkaterie (L3) mit einem Zeichen einer Unterkategorie (R1A)
 verbindet (weshalb es in C2 weniger Kombinationen gibt.
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass es möglich ist, Kombinationen zu definieren, die
 sich überschneiden.
 Zum Beispiel:
\end_layout

\begin_layout LyX-Code
C1:[L1,R1], 
\end_layout

\begin_layout LyX-Code
C3:[L1,R1A]
\end_layout

\begin_layout Standard
Aufgelistet entspricht dies den Zeichenfolgen
\end_layout

\begin_layout LyX-Code
C1 = db, dd, dp, dt; tb, td, tp, tt
\end_layout

\begin_layout LyX-Code
C3 = db, dd; tb, td
\end_layout

\begin_layout Standard
Solche Definitionen sind nicht per se unzulässig, denn Zeichenkombinationen
 definieren an sich noch keine Abstände (die geschieht erst später bei den
 Abstandsregeln).
 Dennoch ist hier Vorsicht geboten: Überschneidungen dieser Art können dazu
 führen, dass gleiche Zeichenfolgen mehrfach definiert werden (und dann
 hinsichtlich des zu verwendenden Abstandes zu einem Widerspruch führen).
 Hier könnte eine andere Bezeichnung helfen zum Beispiel:
\end_layout

\begin_layout LyX-Code
C1:[L1,R1], 
\end_layout

\begin_layout LyX-Code
C1A:[L1,R1A],
\end_layout

\begin_layout LyX-Code
C1B:[L1,R1B]
\end_layout

\begin_layout Standard
Dadurch wäre klar, dass C1A und C1B Unterkombinationen von C1 sind (wobei
 sich die Unterkombinationen C1A und C1B nicht überschneiden und Untermengen
 von C1 sind).
\end_layout

\begin_layout Subsection*
Prototypen
\end_layout

\begin_layout Standard
Schliesslich werden 
\begin_inset Quotes eld
\end_inset

Regelprototypen
\begin_inset Quotes erd
\end_inset

 definiert, welche die Kombinationen (in Verbindung mit den Vokalen) spezifische
n Abständen zuordnen:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session)
\end_layout

\begin_layout LyX-Code
    "spacer_rules_list" := "
\end_layout

\begin_layout LyX-Code
        R1:[C1,V1,D1,?],
\end_layout

\begin_layout LyX-Code
        R2:[C1,V2,D2,], 
\end_layout

\begin_layout LyX-Code
        R3:[C2,V1,D3,?],
\end_layout

\begin_layout LyX-Code
	    R4:[C2,V2,D4,]
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Eine erste Regel (R1) beschreibt hier die Zeichenkombinationen C1 in Verbindung
 mit Vokalen aus der Gruppe V1.
 Diese Kombination erhält den Abstand D1.
 Eine zweite Regel (R2) beschreibt die gleiche Zeichenkombination C1 in
 Verbindung mit den Vokalen aus der Gruppe V2.
 Diese Kombination erhält den Abstand D2 etc.
 Beachten Sie: Da wir 2 Vokalgruppen definiert haben, ergeben sich für die
 4 Kombinationen die doppelte Anzahl also 8 Regeln.
 Das Zeichen ? bedeutet, dass der Vokal optional ist.
 Dies ist bei der Vokalgruppe V1 der Fall, da der Abstand zwischen dd (kein
 Vokal) und dad (Vokal a) genau gleich gross sein soll.
\end_layout

\begin_layout Subsection*
RX-GEN
\end_layout

\begin_layout Standard
Sobald Daten (Zeichengruppen, Zeichenkombinationen, Regelprototypen) wie
 oben beschrieben definiert haben, können wir daraus automatisch REGEX-Regeln
 generieren.
 Beachten Sie zuvor aber folgenden wichtigen Hinweise: Wenn Sie Definitionen
 im Header-Teil des Modells ändern, dann müssen Sie die nach dem Speichern
 (welche die Änderungen in die Datenbank schreibt) zusätzlich die SESSION-Variab
len aktualisieren, indem Sie unterhalb des Formulars auf 
\begin_inset Quotes eld
\end_inset

aktualisieren
\begin_inset Quotes erd
\end_inset

 klicken.
 Tun Sie dies nicht, arbeitet RX-GEN mit den bestehenden (alten) Werten
 und sie erhalten falsche Resultate!
\end_layout

\begin_layout Standard
Klicken Sie nach dem Aktualisieren der SESSION-Variablen links unter 
\begin_inset Quotes eld
\end_inset

Tools
\begin_inset Quotes erd
\end_inset

 auf RX-GEN.
 Dieser 
\begin_inset Quotes eld
\end_inset

REGEX-Generator
\begin_inset Quotes erd
\end_inset

 liest nun die Zeichendefinitionen aus dem aktuell gewählten Modell (deutsch,
 spanisch oder custom) sowie aus den SESSION-Variablen, generiert daraus
 die Regeln und zeigt diese zusammen mit der Anzahl Zeichenkombinationen
 im Browser an.
 Als Beispiel
\begin_inset Foot
status open

\begin_layout Plain Layout
Bitte beachten Sie, dass die Regel im Original keine Zeilenumbrüche enthält;
 diese wurden hier nur layouttechnisch eingefügt.
 Die gezeigte Regel entspricht nicht den obigen Beispielen sondern ist einem
 realen Modell (Spanisch) entnommen.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"(
\backslash
[(?:in|sein|gegen|da|schaft|auf|aus|bei|bei+ar|durch|
\end_layout

\begin_layout LyX-Code
solch|selb|wo|schm|ck|lt|rr|ss|sobre|tt|ch|zw|d|g|h|j|k|
\end_layout

\begin_layout LyX-Code
s|s=|ser|t|v|w|x|y|z|&a|&u|&o|0n-|0d-|0u-|d@r|t@r|g@r|k@r|
\end_layout

\begin_layout LyX-Code
ch@r|h@r|g@l3|v@l|w@l|t@l3|tt@l3|ck@l3|d@l3|k@l3|z@l3|
\end_layout

\begin_layout LyX-Code
ch@l3|v@r6|w@r6|z@r|da@r|rr@l|ck@l|tt@r|ck@r|lt@r6)
\backslash
])
\end_layout

\begin_layout LyX-Code
(
\backslash
[(?:a|o|u)
\backslash
])?(
\backslash
[(?:in|sein|gegen|hab|da|sind|haft|schaft|
\end_layout

\begin_layout LyX-Code
auf|aus|-aus|bei|bei+ar|fort|schm|schw|mpf|sch|ll|mm|ss|
\end_layout

\begin_layout LyX-Code
sobre|ch|pf|mp|zw|y|z|&e|&a|&u|&o|ch@r|sch@r|mm@l|pf@l|
\end_layout

\begin_layout LyX-Code
z@l3|sch@l3|ch@l3|pf@r6|z@r|da@r)
\backslash
])" 
\end_layout

\begin_layout LyX-Code
=> "$1[#d1]$2$3"; // R1|C1: L1#V1:D1#R1 (11256)
\end_layout

\begin_layout Standard
Wie man unschwer erkennt: Diese REGEX-Regeln werden schnell kompliziert
 und sind für einen Menschen kaum bzw.
 nicht mehr zu überblicken (zumal das gezeigte Beispiel nur eine von vielen
 Regeln ist, die generiert werden).
 Im konkreten Fall handelt es sich um die Regel R1, welche die Kombination
 L1+V1+R1 mit dem Abstand D1 definiert (es wird - um der Nachvollziehbarkeit
 willen - am Schluss der Regel immer angegeben, um welche Kombination es
 sich handelt).
 Diese Regel erstreckt sich auf 11256 Kombinationen.
\end_layout

\begin_layout Standard
Die von RX-GEN generierten und im Browser angezeigten Regeln können wir
 nun auswählen, kopieren und in unsere eigenen Regeln einfügen, zum Beispiel
 am Schluss in einer eigenen SubSection 
\begin_inset Quotes eld
\end_inset

spacer
\begin_inset Quotes erd
\end_inset

 (wie in den Beispielmodellen für Deutsch und Spanisch geschehen).
 Danach generiert die obige Regel dann unter anderem folgende Kombinationen:
\end_layout

\begin_layout LyX-Code
[da@r][#d1][l]      Beispiel: darlegen
\end_layout

\begin_layout LyX-Code
[t@r][#d1][vr]      Beispiel: trinken
\end_layout

\begin_layout Standard
Um den Abstand nun einfügen zu lassen haben wir nun zwei Möglichkeiten:
 (1) entweder wir definieren das Zeichen 
\begin_inset Quotes eld
\end_inset

#d1
\begin_inset Quotes erd
\end_inset

 als leeres Zeichen mit einem Breitewert (Offset 1 im Zeichenheader), der
 den konkreten Abstand (in Pixeln) definiert, oder (2) wir definieren mit
 der gleichen Methode (Zeichenbreite im Offset 1) andere Zeichen - z.B.
 
\begin_inset Quotes eld
\end_inset

#1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#2
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#3
\begin_inset Quotes erd
\end_inset

 bzw.
 
\begin_inset Quotes eld
\end_inset

#1-
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#2-
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

3#-
\begin_inset Quotes erd
\end_inset

 etc.
 - mit fixen Abständen (hier also 1, 2, 3 bzw.
 -1, -2, -3 Pixel) und verwenden die Abstände 
\begin_inset Quotes eld
\end_inset

#d1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#d2
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#d3
\begin_inset Quotes erd
\end_inset

 etc.
 nur als Platzhalter, die wir erst ganz am Schluss diesen fixen Abständen
 zuordnen.
 Die zweite Vorgehensweise hat einen entscheidenden Vorteil: Hier können
 nämlich die Abstände auch im Nachhinein noch angepasst werden, ohne die
 REGEX-Regeln noch einmal neu zu generieren.
 Dies kann zum Beispiel über REGEX-Regeln der folgenden Art geschehen:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset


\backslash
[#d1
\backslash
]
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[#5]
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
Hier wird dem Platzhalter 
\begin_inset Quotes eld
\end_inset

#d1
\begin_inset Quotes erd
\end_inset

 (der in unserer Gruppierung für D1 steht) also definitiv der Abstand 5
 zugewiesen, da das Zeichen 
\begin_inset Quotes eld
\end_inset

#5
\begin_inset Quotes erd
\end_inset

 im Header als 
\begin_inset Quotes eld
\end_inset

leeres Zeichen mit Breite 5
\begin_inset Quotes erd
\end_inset

 definiert wurde.
\end_layout

\begin_layout Standard
Konkrete Beispiele finden sich im File SPSSBAS.TXT (Verzeichnis ling/).
 Hier wird das 2.
 Vorgehen angewandt, also Definition von Abstandszeichen 
\begin_inset Quotes eld
\end_inset

#1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#2
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#3
\begin_inset Quotes erd
\end_inset

 etc.
 und Zuweisung derselben in der SubSection(spacer) am Ende (im Anschluss
 an die automatisch generierten Abstandsregeln).
\end_layout

\begin_layout Subsection*
Automatisieren
\end_layout

\begin_layout Standard
Die Generierung der Abstandsregeln lässt sich auch automatsieren.
 Dies ist besonders dann praktisch, wenn Sie an präzisen Zeichenabständen
 herumfeilen und die Abstandsregeln mehrfach abändern und testen wollen.
 VSTENO bietet hier im Formular Maxi unter Engine => Spacer die Option 
\begin_inset Quotes eld
\end_inset

automatisch
\begin_inset Quotes erd
\end_inset

.
 Wenn Sie diese anklicken generiert VSTENO bei jeder Berechnung neue Spacer-Rege
ln und fügt diese automatisch ins aktuelle Modell ein.
\end_layout

\begin_layout Standard
Damit dies funktioniert, müssen jedoch einige Regeln beachtet werden.
 Zum ersten muss der Regel-Teil des Modells in diesem Fall zwingend einen
 spacer-Teil enthalten, zum Beispiel in der folgenden Art:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(spacer)
\end_layout

\begin_layout LyX-Code
    // no rules
\end_layout

\begin_layout LyX-Code
#EndSubSection(spacer)
\end_layout

\begin_layout Standard
Dadurch weiss VSTENO, wo - d.h.
 zu welchem Zeitpunkt der Berechnung - er die Spacer-Regeln einfügen soll.
 Die Spacer-Regeln stellen also eine eigene SubSection dar, die durch VSTENO
 vollständig ersetzt wird.
 Fall die Spacer-Section zusätzliche Argumente enthält - z.B.
 eine Zuweisung oder eine Verzweigung der Art #EndSubSection(spacer,=:prt)
 - so bleibt diese erhalten.
\end_layout

\begin_layout Standard
Wie bereits im vorhergehenden Abschnitt erwähnt, müssen Sie bei Änderungen
 in den Spacer-Definition zwingend die SESSION-Variablen aktualisieren,
 indem Sie unten im Formular auf 
\begin_inset Quotes eld
\end_inset

aktualisieren
\begin_inset Quotes erd
\end_inset

 klicken.
 Sonst verwendet VSTENO die bestehenden (alten) Werte und Sie erhalten falsche
 Resultate (was die ohnehin schwierige Fehlersuche zusätzlich erschwert).
\end_layout

\begin_layout Standard
Die Generierung von Spacer-Regeln on-the-fly ist eine gute Möglichkeit,
 um präzise Formeln zu entwickeln.
 Allerdings wirkt sich dies schlecht auf die Performance des Programmes
 aus.
 Deshalb sollten Sie am Schluss, wenn Ihre Regeln also fertig sind, die
 Regeln wie bereits beschrieben mit RX-GEN generieren und fix innerhalb
 Ihrer Regeln einfügen, also:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(spacer)
\end_layout

\begin_layout LyX-Code
    // insert
\end_layout

\begin_layout LyX-Code
    // your
\end_layout

\begin_layout LyX-Code
    // spacer
\end_layout

\begin_layout LyX-Code
    // rules
\end_layout

\begin_layout LyX-Code
    // here
\end_layout

\begin_layout LyX-Code
#EndSubSection(spacer)
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass sie hier KEINE handgeschriebenen, sondern NUR die
 automatisiert generierten Regex-Regeln einfügen dürfen, wenn Sie handgeschriebe
ne Regeln benötigen, die zum Spacer gehören, und vor oder nach den automatisiert
en Regeln ausgeführt werden soll, dann erstellen Sie hierfür separate SubSection
s - zum Beispiel #BeginSubSection(prespacer) - #EndSubSection(prespacer)
 und #BeginSubSection(postspacer) - #EndSubSection(postspacer) - und fügen
 Sie die Regeln dort ein.
 Dadurch ist sichergestellt, dass VSTENO nur automatisch generierte Regeln
 ersetzt, wenn die Option 
\begin_inset Quotes eld
\end_inset

automatisch
\begin_inset Quotes erd
\end_inset

 gewählt ist.
\end_layout

\begin_layout Standard
Grundsätzlich wird empfohlen, immer ein Spacer-Section vorzusehen und diese
 mit gültigen statischen Regeln zu füllen.
\end_layout

\begin_layout Section*
Linguistische Analyse
\end_layout

\begin_layout Standard
Die linguistische Analyse geht vom Schriftbild des Textes aus und bedient
 sich grundsätzlich dreier externer Programme mit unterschiedlichen Aufgabenbere
ichen:
\end_layout

\begin_layout Enumerate
phpSyllable: Silbentrennung
\end_layout

\begin_layout Enumerate
hunspell: Erkennung zusammengesetzter Wörter und Affixe (Vor- und Nachsilben)
\end_layout

\begin_layout Enumerate
eSpeak: Phonetische Transkription
\end_layout

\begin_layout Standard
Die Verwendung der linguistischen kann zunächst einmal über das Eingabe-Formular
 
\begin_inset Quotes eld
\end_inset

Maxi
\begin_inset Quotes erd
\end_inset

 unter 
\begin_inset Quotes eld
\end_inset

Sprache
\begin_inset Quotes erd
\end_inset

 eingestellt bzw.
 definiert werden:
\end_layout

\begin_layout Itemize
Option Analyse: keine = die Analyse bleibt ausgeschaltet; Auswahl = die
 externen Programme (1-3) können einzeln an- und abgewählt werden.
\end_layout

\begin_layout Itemize
Programmoptionen
\end_layout

\begin_deeper
\begin_layout Itemize
Silbentrennung: Es kann die Sprache angegeben werden (de: Deutsch, es: Spanisch,
 fr: Französisch, en: English).
\end_layout

\begin_layout Itemize
Wörter/Affixe: Es kann ebenfalls die Sprache angegeben werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies funktioniert im Prinzip gleich wie bei der Silbentrennung.
 Allerdings bietet hunspell nebst der Wahl der Hauptsprache (zum Beispiel
 
\begin_inset Quotes eld
\end_inset

de
\begin_inset Quotes erd
\end_inset

 für Deutsch) zusätzlich regionale Varianten an (zum Beispiel 
\begin_inset Quotes eld
\end_inset

de_CH
\begin_inset Quotes erd
\end_inset

 für in der Schweiz verwendete Schreibweisen; 
\begin_inset Quotes eld
\end_inset

de_CH
\begin_inset Quotes erd
\end_inset

 ist die Standardeinstellung für das Modell DESSBAS).
\end_layout

\end_inset

.
 Ausserdem kann gewählt werden, ob Affixe grundsätzlich generiert werden
 sollen (Option Affixe) oder ob auf die Markierung einzelner Affixtypen
 (Präfixe, Suffixe) oder von Wortgrenzen verzichtet werden soll (in diesem
 Fall 
\begin_inset Quotes eld
\end_inset

keine
\begin_inset Quotes erd
\end_inset

 anwählen und auszuschliessende Markierungen selektieren).
\end_layout

\begin_layout Itemize
Phonetik: Es kann wiederum die Sprache angegeben werden sowie das Alphabet,
 das für die Transkription verwendet werden soll (eSpeak = Kirschenbaum
 Alphabet
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe hier: https://en.wikipedia.org/wiki/Kirshenbaum.
 Das Kirschenbaum-Alphabet hat den Vorteil, dass es ASCII-kompatibel ist,
 also mit jeder Tastatur zuverlässig eingegeben und auf jeder Textkonsole
 angezeigt werden kann.
 Das französische Modell FRSSBAS verwendet das Kirschenbaum-Alphabet.
\end_layout

\end_inset

 oder IPA = Internationales Phonetisches Alphabet).
\end_layout

\end_deeper
\begin_layout Standard
Obwohl es sich um drei externe und unabhängige Programme handelt, bestehen
 zwischen ihnen im Kontekt von VSTENO Abhängikeiten, die dazu führen, dass
 nicht alle Kombinationen möglich sind bzw.
 Sinn machen.
 Empfohlen werden folgende Kombinationen:
\end_layout

\begin_layout Enumerate
Keine linguistische Analyse: Das Spansiche Modell SPSSBAS zum Beispiel verwendet
 keine linguistische Analyse, da die spanische Orthografie sehr regelmässig
 und Spanisch - im Unterschied zum Deutschen - nur wenige zusammengesetzte
 Wörter enthält.
 Die Regeln können dadurch direkt (und effizient) beim Schriftbild ansetzen
 (ohne sich zum Beispiel um Silbengrenzen zu kümmern).
 Ein Modell, das keine linguistische Analyse benötigt, ist auch sehr schnell.
\end_layout

\begin_layout Enumerate
Nur Silbentrennung: In diesem Fall ruft VSTENO nur phpSyllable auf, um eine
 Silbentrennung durchzuführen.
 Silben werden als - in den Text eingefügt und die Regeln müssen dies berücksich
tigen.
 Auch hier kann mit dem Schriftbild gearbeitet werden und Übertragung ist
 recht schnell.
\end_layout

\begin_layout Enumerate
Silbentrennung + Wort/Affixanalyse: In diesem Fall ruft VSTENO zuerst phpSyllabl
e auf, um Silben zu generieren, und verwendet danach hunspell (und einen
 speziellen Algorithmus
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe hier: 
\begin_inset CommandInset href
LatexCommand href
name "Gel speiende Spiegel und andere (linguistische) Probleme"
target "https://www.vsteno.ch/docs/gel_speiende_spiegel.pdf"

\end_inset


\end_layout

\end_inset

) um zusammengesetzte Wörter und Affixe zu erkennen.
 Diese Analyse ist relativ langsam und es gibt grundsätzlich zwei Varianten
\end_layout

\begin_deeper
\begin_layout Enumerate
Vollanalyse: Präfixe (+), Suffixe (#), Silben (-) und Wortgrenzen (|) werden
 mit den enstprechenden Zeichen markiert und die Regeln müssen diese berücksicht
igen.
\end_layout

\begin_layout Enumerate
Teilanalyse: Präfixe (+), Suffixe (#) und Silben (-) zum Beispiel werden
 abgewählt: in diesem Fall müssen sich die Regeln nur noch um die verbleibenden
 Markierungen (Wortgrenzen = |) kümmern.
\end_layout

\end_deeper
\begin_layout Enumerate
Nur Phonetik: Der Text wird vom Schriftbild ins Lautbild übertragen.
 Die nachfolgenden Regeln haben deshalb keine Möglichkeit mehr, sich am
 Schriftbild zu orientieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Wie wir später sehen werden, besteht die Möglichkeit in der Stage 0 gewisse
 Wörter von der Transkription auszunehmen, indem sie mit #wort markiert
 werden.
 Die Regeln des Modells basieren aber zum grössten Teil - und ausschliesslich
 - auf dem Lautbild der Wörter.
\end_layout

\end_inset

.
 Diese Art der Übertragung ist mittelschnell.
\end_layout

\begin_layout Standard
In Version 0.1 (Hephaistos) von VSTENO waren folgende Kombination grundsätzlich
 NICHT möglich: (A) Wort/Affixanalyse ohne Silbentrennung (da die Wort/Affixanal
yse auf der Silbentrennung basiert) und (B) Phonetische Analyse in Verbindung
 mit den anderen beiden Analysen (es kann also nur die phonetische Analyse
 allein verwendet werden).
\end_layout

\begin_layout Standard
In Version 0.2 (Ariadne) von VSTENO bleibt die Einschränkung (A) bestehen.
 Erweitert wurde jedoch der Bereich (B): Neu kann die phonetische Analyse
 mit einer Wortanalyse kombiniert werden.
 Demonstriert wird dies im Model Stolze-Schrey für Englisch: Werden in den
 Einstellungen Analyse sowohl Silben und Wörter als auch Phonetik angewählt
 (Doppelanalyse), werden drei Formen des Wortes zwischengespeichert:
\end_layout

\begin_layout LyX-Code
WRT: schriftliche Form
\end_layout

\begin_layout LyX-Code
PAR: parallele, linguistische Form (zusammengesetzte Wörter, Silbentrennung)
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Bezeichnungen PAR und LNG sind allenfalls etwas unglücklich gewählt.
 Die Parallelform PAR entspricht einer reduzierten linguistischen Analyse
 (Erkennung zusammengesetzter Wörter und Silbentrennung), die generiert
 wird, wenn gleichzeitig die linguistische und die phonetische Analyse selektier
t wird.
 In diesem Fall ist es nicht möglich, eine vollständige linguistische Analyse
 (inklusive morphologischer Aspekte wie Erkennung und Markierung von Präfixen
 und Suffixen) anzuwenden, da hierfür Post-Processing-Regeln nötig wären.
 In der Version 0.2 verfügt VSTENO leider nur über eine Post-Processing-Instanz,
 die in diesem Fall für das phonetische Post-Processing verwendet wird.
 Gültig sind im Falle der kombinierten Analyse jedoch Session-Variablen,
 die für die linguistische Analyse verwendet werden (prefixes_list, stems_list,
 suffixes_list, block_list, filter_list).
 Wenn also ein Präfix 
\begin_inset Quotes eld
\end_inset

ge
\begin_inset Quotes erd
\end_inset

 und ein Stamm 
\begin_inset Quotes eld
\end_inset

gangen(?:e[rsnm]?)?
\begin_inset Quotes erd
\end_inset

 definiert wird, dann entspricht dem Wort 
\begin_inset Quotes eld
\end_inset

gegangenen
\begin_inset Quotes erd
\end_inset

 die PAR-Form 
\begin_inset Quotes eld
\end_inset

ge|gan-ge-nen
\begin_inset Quotes erd
\end_inset

.
 Mit der Bedingung 
\begin_inset Quotes eld
\end_inset

tstlng(^ge
\backslash
|)
\begin_inset Quotes erd
\end_inset

 kann danach auch in der kombinierten Analyse festgestellt werden, ob es
 sich bei ge- um ein Präfix handelt.
 Im PHP-Code entspricht die PAR-Form der Variablen $parallel_lng_form, wohingege
n die LNG-Form im Falle einer vollständigen Analyse (inklusive Post-Processing)
 der Variablen $act_word entspricht.
 Die Bedingung tstlng() bezieht sich auf $parallel_lng_form.
 
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
LNG: phonetische Form
\end_layout

\begin_layout Standard
Beide Formen WRT und PAR können mit hybriden Regeln (siehe dort) als Bedingung
 verwendet werden:
\end_layout

\begin_layout LyX-Code
tstwrt(xyz): testet die Zeichenfolge xyz in der schriftlichen Form
\end_layout

\begin_layout LyX-Code
tstwrt(xyz): test die Zeichenfolge xyz in der parallelen, linguistischen
 Form
\end_layout

\begin_layout Standard
Die LNG-Form wird als zentrale Variable für die Berechnung der einzelnen
 Transformationsschritte verändert
\end_layout

\begin_layout Subsection*
Vorselektion
\end_layout

\begin_layout Standard
Wenn Sie selber ein Modell (= stenografisches System) mit VSTENO umsetzen,
 macht es natürlich Sinn, die für das Modell notwendigen Optionen direkt
 vorzuselektieren, dies kann geschehen, indem Sie im HEADER-Teil des Modells
 folgende Variablen direkt setzen.
 Hier das Beispiel für das deutsche System DESSBAS:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session)
\end_layout

\begin_layout LyX-Code
    // use linguistical analysis 
\end_layout

\begin_layout LyX-Code
    "analysis_type" := "selected"; 
\end_layout

\begin_layout LyX-Code
    // hyphenation (phpSyllable) 
\end_layout

\begin_layout LyX-Code
    "hyphenate_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    "language_hyphenator" := "de"; 
\end_layout

\begin_layout LyX-Code
    // composed words + affixes (hunspell) 
\end_layout

\begin_layout LyX-Code
    "composed_words_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    "language_hunspell" := "de_CH"; 
\end_layout

\begin_layout LyX-Code
    // generate affixes in composed words 
\end_layout

\begin_layout LyX-Code
    "affixes_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    // set variables for filter option (not selected) 
\end_layout

\begin_layout LyX-Code
    "filter_out_prefixes_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    "filter_out_suffixes_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    "filter_out_words_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    // disable phonetic analysis 
\end_layout

\begin_layout LyX-Code
    "phonetics_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    "language_espeak" := "de"; 
\end_layout

\begin_layout LyX-Code
    "phonetic_alphabet" := "espeak";
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Hier werden also die weiter oben genannten Einstellungen direkt mit 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 selektiert bzw.
 die Sprache voreingestellt.
 Dies führt dazu, dass VSTENO diese Werte automatische lädt, wenn im Eingabeform
ular 
\begin_inset Quotes eld
\end_inset

Maxi
\begin_inset Quotes erd
\end_inset

 das Modell angewählt wird.
 Beachten Sie bitte, dass die Zuweisen mit dem Operator := erfolgt und dass
 sowohl Variablen wie Werte in doppelten Anführungszeichen stehen müssen.
\end_layout

\begin_layout Standard
Im folgenden werden wir nun auf diese linguistischen Analysen genauer eingehen.
 Da die phonetische Analyse nur separat verwendet werden kann macht, es
 Sinn, die Betrauchtung auf zwei Kapitel zu verteilen.
 Ausschlaggebend ist dabei, dass am Schluss der Analyse für die Regeln zur
 Verfügung steht, nämlich entweder eine mehr oder weniger (A) Morphologische
 Analyse oder als (B) Phonetische Transkription des Textes.
\end_layout

\begin_layout Section*
Morphologische Analyse
\end_layout

\begin_layout Standard
Die von VSTENO verwendete morphologische Analyse verwendet die externen
 Programm phpSyllable (Silbenerkennung) und hunspell (Wort/Affixanalyse)
 und basiert mehr oder minder auf einem speziellen Algorithmus, der 
\begin_inset CommandInset href
LatexCommand href
name "hier"
target "https://www.vsteno.ch/docs/gel_speiende_spiegel.pdf"

\end_inset

 genauer erläutert wird.
 Als einleitende und erste grobe Übersicht ist wichtig zu wissen:
\end_layout

\begin_layout Enumerate
Dass die linguistische Analyse automatisch in Stage 1 vorgenommen wird.
\end_layout

\begin_layout Enumerate
Dass die linguistische Analyse fehlerhafte Resultate produzieren kann.
\end_layout

\begin_layout Enumerate
Wie die linguistische Analyse angepasst werden kann, damit möglichst wenige
 falsche Resulate generiert werden.
\end_layout

\begin_layout Standard
Der Reihe nach:
\end_layout

\begin_layout Standard
Zu Punkt 1: Es ist zu präzisieren, dass die linguistische Analyse nur dann
 vorgenommen wird, wenn kein Eintrag im Wörterbuch gefunden wird (sonst
 wird die LNG-, STD- oder PRT-Form aus dem Wörterbuch verwendet).
\end_layout

\begin_layout Standard
Zu Punkt 2: Zusammengesetzte Wörter sowie Silben- und Morphemgrenzen zu
 erkennen ist für einen Computer alles andere als einfach.
 Der Computer findet zuweilen absurde 
\begin_inset Quotes eld
\end_inset

Kombinationen
\begin_inset Quotes erd
\end_inset

 wie: Spiegel (Verb 
\begin_inset Quotes eld
\end_inset

spie
\begin_inset Quotes erd
\end_inset

 + Substantiv 
\begin_inset Quotes eld
\end_inset

Gel
\begin_inset Quotes erd
\end_inset

), Museum (Substantiv 
\begin_inset Quotes eld
\end_inset

Muse
\begin_inset Quotes erd
\end_inset

 + Präposition 
\begin_inset Quotes eld
\end_inset

um
\begin_inset Quotes erd
\end_inset

), anderen (Präposition 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 + Relativpronomen 
\begin_inset Quotes eld
\end_inset

deren
\begin_inset Quotes erd
\end_inset

) etc.
\end_layout

\begin_layout Standard
Zu Punkt 3: Es bestehen grundsätzlich zwei Möglichkeiten, falsche Resultate
 zu vermeiden: (1) indem man die linguistische Analyse mit zusätzlichen
 Daten zu Präfixen, Stämmen und Suffixen versorgt und (2) indem man falsche
 Resultate mit REGEX-Regeln korrigiert.
 Beides wird im folgenden kurz erläutert.
\end_layout

\begin_layout Subsection*
Parameter und Variablen
\end_layout

\begin_layout Standard
Das Verhalten der linguistischen Analyse durch Parameter gesteuert werden,
 die über die Eingabemaske 
\begin_inset Quotes eld
\end_inset

Maxi
\begin_inset Quotes erd
\end_inset

 verfügbar sind.
 Die Variablen beziehen sich auf das verwendete Wörterbuch (hunspell), den
 Silbentrenner (phpSyllable) sowie den Algorithmus, der Vor- und Nachsilben
 analysiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Funktion analyze_word_linguistically() in linguistics.php, welche die einzelnen
 Analyse-Schritte zusammnefasst und kombiniert.
\end_layout

\end_inset

.
 Die veränderbaren Parameter (wie Sprache und Auswahl gezielter Elemente
 der Analyse) wurden bereits in den beiden vorhergehenden Kapiteln erklärt
\begin_inset Foot
status open

\begin_layout Plain Layout
Nachzureichen wären hier nur noch die Optionen 
\begin_inset Quotes eld
\end_inset

Trennen
\begin_inset Quotes erd
\end_inset

 (separate) und 
\begin_inset Quotes eld
\end_inset

Leim
\begin_inset Quotes erd
\end_inset

 (glue): Diese wurden ursprünglich verwendet, um anzugeben, bei welcher
 Länge Wörter abgetrennt oder nicht abgetrennt (d.h.
 als eigenständige Wörter betrachtet) werden sollten.
 Diese vorgehen hat sich aber nicht bewährt und die Optionen werden voraussichtl
ich in einer späteren Version wieder entfernt.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Im Zusammenhang mit der morphologischen Analyse interessiert uns nun die
 Möglichkeit, Präfixe, Stämme und Suffixe zu definieren und markieren zu
 lassen.
 Hierzu muss im Header-Teil ein SubSection 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 definiert werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Original enthält der Text keine Zeilenumbrüche, diese wurden nur layouttechni
sch eingefügt.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session) 
\end_layout

\begin_layout LyX-Code
  "prefixes_list" := "an, ver, ge";
\end_layout

\begin_layout LyX-Code
  "stems_list" := "gan-?gen, nann-?t(?:e[rsnm]?)?";
\end_layout

\begin_layout LyX-Code
  "suffixes_list" := "[kh]ei-?t(?:s|en)?, 
\end_layout

\begin_layout LyX-Code
  li-?ch(?:(?:e-?r)(?:e[srn]?)?)?"; 
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Session bedeutet hier nichts anderes, als dass wir Session-Variablen des
 Programmes verändern können (wie bei Inline-Option-Tags).
 Die Session-Variablen für Präfixe, Stämme und Suffixe heissen prefixes_list,
 stems_list und suffixes_list.
 Gesetzt werden die Werte durch den Operator :=
\begin_inset Foot
status open

\begin_layout Plain Layout
Pascal lässt grüssen ...
 :)
\end_layout

\end_inset

 und die einzelnen Präfixe, Suffixe und Stämme stehen innerhalb von Anführungsze
ichen und mit Komma (falls es mehrere sind).
 Im obigen Beispiel werden also drei Präfixe definiert (an-, ver- und ge-),
 sowie die zusätzlichen (unregelmässigen) Stämme -gangen (z.B.
 in 
\begin_inset Quotes eld
\end_inset

gegangen
\begin_inset Quotes erd
\end_inset

) und -nannte in verschiedenen Varianten (genannte, genannter, genanntes
 etc.) und letztlich auch die Suffixe -keit/-heit und -lich in verschiedenen
 Varianten.
\end_layout

\begin_layout Standard
Wie leicht zu erkennen ist, kann auch hier der REGEX-Formalismus verwendet
 werden, allerdings gibt es eine absolut wichtige Einschränkung zu beachten:
 Es dürfen nur so genannte 
\begin_inset Quotes eld
\end_inset

non capturing groups
\begin_inset Quotes erd
\end_inset

 - Zeichen (?:) statt () - verwendet werden.
 Der Grund hierfür ist, dass VSTENO diese Formeln zur Abarbeitung in eine
 übergeordnete Formel (
\begin_inset Quotes eld
\end_inset

Metaformel
\begin_inset Quotes erd
\end_inset

) einbettet: dies Metaformel erkennt die einzelnen Elemente (Vor-/Nachsilben,
 Stämme), kopiert (trennt) die entsprechenden Wortteile und fügt sie wieder
 zusammen (versehen mit den Markern für Wort-, Silben-, Morphemgrenze).
 Hierfür - für das Trennen/Kopieren/Einfügen - setzt die Metaformel ihrerseits
 capturing groups ein, um die einzelnen Teile richtig zuzuordnen.
 Werden nun in den Definitionen für Präfixe, Stämme und Suffixe zusätzliche
 capturing groups verwendet, so werden die Variablen falsch zugewiesen und
 das Chaos ist vorprogrammiert!
\end_layout

\begin_layout Standard
Was bewirken nun die obigen Zeilen? Wir erläutern dies wiederum anhand einiger
 Beispiele:
\end_layout

\begin_layout Itemize
Präfixe: Die linguistische Analyse von VSTENO wird als erstes eine Silbentrennun
g (phonetische Analyse) und dann eine Worterkennung (lexikalische Analyse)
 vornehmen.
 Dadurch wird das Wort 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 zum Beispiel zuerst in 3 Silben 
\begin_inset Quotes eld
\end_inset

an-ge-ben
\begin_inset Quotes erd
\end_inset

 aufgetrennt und danach als zwei separate Wörter 
\begin_inset Quotes eld
\end_inset

an|ge-ben
\begin_inset Quotes erd
\end_inset

 markiert (hier kommt die lexikalische Analyse zum Zug, die sowohl 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 als auch 
\begin_inset Quotes eld
\end_inset

geben
\begin_inset Quotes erd
\end_inset

 als existierende Wörter identifiziert).
 Dank der prefix_list, weiss die linguistische Analyse nun zusätzlich, dass
 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 am Wortanfang als Präfix zu behandeln ist.
 Also wird in einem dritten Schritt 
\begin_inset Quotes eld
\end_inset

an|ge-ben
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 umgewandelt.
 Bitte beachten Sie, dass Präfixe nur dann als Präfixe behandelt werden,
 wenn sie zuvor als separate Wörter erkannt wurden: In 
\begin_inset Quotes eld
\end_inset

angeln
\begin_inset Quotes erd
\end_inset

 zum Beispiel wird kein Präfix erkannt (weil *geln kein eigentständiger
 Wortteil ist
\begin_inset Foot
status open

\begin_layout Plain Layout
In 
\begin_inset Quotes eld
\end_inset

Angel
\begin_inset Quotes erd
\end_inset

 hingegen wird ein falsches Präfix erkannt, weil 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Gel
\begin_inset Quotes erd
\end_inset

 eigentständige Wortteile sind.
 Dies ist einer der Fälle, die nachträglich korrigiert werden müssen.
\end_layout

\end_inset

).
 Etwas anders funktioniert das Wort 
\begin_inset Quotes eld
\end_inset

gegeben
\begin_inset Quotes erd
\end_inset

: Während bei 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 die Vorsilbe 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 als eigenes Wort erkannt wird (weil 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 als Präposition im Wörterbuch von hunspell exstiert), ist dies bei 
\begin_inset Quotes eld
\end_inset

ge
\begin_inset Quotes erd
\end_inset

 nicht der Fall.
 Hier weiss VSTENO als nur dank der prefix_list, dass ge als Vorsilbe betrachtet
 werden kann.
\end_layout

\begin_layout Itemize
Stämme: Bei 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

gegeben
\begin_inset Quotes erd
\end_inset

 funktioniert die linguistische Analyse, wie wir gesehen haben, sehr gut
 (weil 
\begin_inset Quotes eld
\end_inset

geben
\begin_inset Quotes erd
\end_inset

 im Wörterbuch existiert).
 Betrachten wir das Wort 
\begin_inset Quotes eld
\end_inset

gegangen
\begin_inset Quotes erd
\end_inset

 hingegen, so wird VSTENO zunächst keine Vorsilbe finden (da *gangen kein
 eigentständiges Wort ist).
 Auch hier können wir der linguistischen Analyse auf die Sprünge helfen,
 indem wir 
\begin_inset Quotes eld
\end_inset

gangen
\begin_inset Quotes erd
\end_inset

 als eigenständigen Stamm definieren.
 Dadurch schlagen wir gleich zwei (oder zuweilen noch mehr) Fliegen auf
 eine Klappe: Nicht nur 
\begin_inset Quotes eld
\end_inset

ge+gangen
\begin_inset Quotes erd
\end_inset

 wird nun erkannt, sondern auch 
\begin_inset Quotes eld
\end_inset

ver+gan-gen
\begin_inset Quotes erd
\end_inset

 (weil ver- in der prefix_list steht).
\end_layout

\begin_layout Itemize
Suffixe: Funktionieren nach dem gleichen Prinzip wie Präfixe, mit dem einzigen
 Unterschied, dass sie durch # abgetrennt werden: 
\begin_inset Quotes eld
\end_inset

som-mer#lich
\begin_inset Quotes erd
\end_inset

.
 Im Unterschied zu Präfixen können sich Suffixe verändern (z.B.
 durch Konjugation, Deklination).
 Hier hilft uns REGEX, um die verschiedenen Fälle abzudecken: 
\begin_inset Quotes eld
\end_inset

li-?ch(?:(?:e-?r)(?:e[srn]?)?)?
\begin_inset Quotes erd
\end_inset

 erkennt 
\begin_inset Quotes eld
\end_inset

som-mer#lich
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sommer#lich-e
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sommer#lich-es
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

som-mer#lich-er
\begin_inset Quotes erd
\end_inset

 etc.
 Bitte beachten Sie auch hier die Verwendung von non capturing groups (?:).
\end_layout

\begin_layout Standard
Sie ahnen es vielleicht anhand der gezeigten Beispiele: Die Sache kann ziemlich
 schnell kompliziert werden, sodass man hier wirklich sehr gute Regeln austüftel
n muss, um optimale Resultate zu erhalten.
 Dennoch ist die linguistische Analyse und das 
\begin_inset Quotes eld
\end_inset

Kalibrieren
\begin_inset Quotes erd
\end_inset

 derselben mit zusätzlichen Variablen ein sehr potentes Mittel, um Wortteile
 mit guter Trefferquote zu erkennen - und dadurch das Formulieren der nachfolgen
den Stenoregeln zu vereinfachen!
\end_layout

\begin_layout Standard
Aber so gut man die Regeln auch wählt, es werden immer falsche Resultate
 generiert werden.
 Diese können nun aber auf zwei Arten korrigiert werden: (1) mit der Blockliste/
Filterliste oder (2) mit einem sogenannten Postprocessing (Nachbearbeitung
 mithilfe von REGEX-Regeln).
\end_layout

\begin_layout Subsection*
Blockliste / Filterliste
\end_layout

\begin_layout Standard
Blocklist und Filterlist sind Session-Variablen die genau gleich gesetzt
 werden können wie Präfixe, Suffixe und Stämme, nämlich:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session) 
\end_layout

\begin_layout LyX-Code
  "block_list" := "des, der, den, dem";
\end_layout

\begin_layout LyX-Code
  "filter_list" := "de[snrm]";
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Hier wird also der Blockliste eine Liste mit 4 Wörtern (des, der, den, dem)
 zugeordnet, die 
\begin_inset Quotes eld
\end_inset

blockiert
\begin_inset Quotes erd
\end_inset

 werden sollen.
 Als zweites Beispiel wird der Filterliste 1 REGEX-Ausdruck (de[snrm]) zugeordne
t (der im Prinzip die gleichen 4 Wörter - des, den, der, dem - abdeckt -
 es wird anstelle der Aufzählung einfach ein REGEX-Ausdruck verwendet).
\end_layout

\begin_layout Standard
Was aber bewirken nun diese Angaben? Ein Eintrag in der Blockliste bedeutet
 grundsätzlich: VSTENO wird diese Buchstabenfolge nicht mehr als eigenes
 Wort betrachten.
 Nehmen wir als Beispiel das Wort 
\begin_inset Quotes eld
\end_inset

lachendes
\begin_inset Quotes erd
\end_inset

.
 VSTENO wird dieses in Silben trennen (la-chen-des) und schliesslich versuchen,
 
\begin_inset Quotes eld
\end_inset

Teilwörter
\begin_inset Quotes erd
\end_inset

 (also zusammengesetzte Wörter) zu finden.
 Dazu generiert es zunächst eine Liste sämtlicher möglicher Silbenpermutationen,
 in diesem Fall also Kombinationen mit ein, zwei oder drei Silben (la, chen,
 des; lachen, chendes; lachendes).
 Danach verwendet die linguistische Analyse hunspell und die Präfix-, Stämme-,
 Suffixlisten, um zu entscheiden, welche Kombinationen als eigene Wortteil
 existieren bzw.
 möglich sind.
 Alle anderen Möglichkeiten werden 
\begin_inset Quotes eld
\end_inset

gestrichen
\begin_inset Quotes erd
\end_inset

.
 In unserem Fall ergäbe das also: -, -, des; lachen, -; lachendes.
 Aufgrund dieser Analyse kann VSTENO schliesslich annehmen, dass das Wort
 
\begin_inset Quotes eld
\end_inset

lachendes
\begin_inset Quotes erd
\end_inset

 aus zwei Teilwörtern (lachen + des) besteht und markiert dieses mit einer
 Wortgrenze (lachen|des).
 
\end_layout

\begin_layout Standard
Fügen wir nun 
\begin_inset Quotes eld
\end_inset

des
\begin_inset Quotes erd
\end_inset

 zur Blockliste hinzu, wird auch 
\begin_inset Quotes eld
\end_inset

des
\begin_inset Quotes erd
\end_inset

 aus der Liste gestrichen und es bleibt somit nur noch: -, -, -; lachen,
 chendes; lachendes.
 VSTENO findet in diesem Fall also keine kleinere Unterteilung des Wortes
 und wird deshalb 
\begin_inset Quotes eld
\end_inset

lachendes
\begin_inset Quotes erd
\end_inset

 als ein einziges, unaufteilbares Wort betrachten - was in diesem Fall richtig
 ist.
\end_layout

\begin_layout Standard
Ähnlich verfährt VSTENO dann auch mit dem Wort 
\begin_inset Quotes eld
\end_inset

deswegen
\begin_inset Quotes erd
\end_inset

: Die Silbentrennung ergibt: des-we-gen.
 Die möglichen Permutationen somit: des, we, gen; deswe, wegen; deswegen.
 Streichung mit hunspell: des, -, -; -, wegen; deswegen.
 Zusätzliche Streichung mit der Blockliste: -, -, -; -, wegen; deswegen.
 Auch hier kommt VSTENO zum Schluss, dass 
\begin_inset Quotes eld
\end_inset

deswegen
\begin_inset Quotes erd
\end_inset

 keine Teilwörter mehr enthält - und wird somit auch keine Präfix 
\begin_inset Quotes eld
\end_inset

des
\begin_inset Quotes erd
\end_inset

 markieren.
 In diesem Fall ist das schade, denn das Wort enthält tatsächlich die Vorsilbe
 des- mit entsprechender Kürzung im System Stolze-Schrey.
 
\end_layout

\begin_layout Standard
Kurzum: Zwar konnte wir im Fall von 
\begin_inset Quotes eld
\end_inset

lachendes
\begin_inset Quotes erd
\end_inset

 ein richtiges Resultat produzieren, dafür erkennt VSTENO nun die Vorsilbe
 in 
\begin_inset Quotes eld
\end_inset

deswegen
\begin_inset Quotes erd
\end_inset

 nicht mehr.
 Aus diesem Grund gibt es die Filterliste.
 Wenn wir im Falle von 
\begin_inset Quotes eld
\end_inset

des
\begin_inset Quotes erd
\end_inset

 beide Fälle abdecken wollen, dann empfiehlt sich folgendes Vorgehen:
\end_layout

\begin_layout Enumerate
"des" wird nicht zur Blockliste hinzugefügt => dadurch wird es als eigenständige
r Wortteil erkannt 
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

des
\begin_inset Quotes erd
\end_inset

 wird zur Präfix-Liste hinzugefügt => dadurch wird der selbständige Wortteil
 als Präfix markiert
\end_layout

\begin_layout Enumerate
Wir fügen nun den REGEX-Ausdruck 
\begin_inset Quotes eld
\end_inset

|de[rsmn]
\begin_inset Quotes erd
\end_inset

 zur Filterliste hinzu => dadurch wird das falsche Resultat (false positive)
 
\begin_inset Quotes eld
\end_inset

la-chen|des
\begin_inset Quotes erd
\end_inset

 korrigiert (und wieder zu 
\begin_inset Quotes eld
\end_inset

la-chen-des
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
Bitte beachten, dass in der Filterliste nur eine eingeschränkte REGEX-Notation
 verwendet werden darf.
 Grundsätzlich dürfen das Zeichen |, eckige Klammern [] und Quantifier wie
 *+? verwendet werden, jedoch - wie bereits in der Präfix-Liste keine 
\begin_inset Quotes eld
\end_inset

markierenden
\begin_inset Quotes erd
\end_inset

 runden Klammern und keine Variablen (z.B.
 $1).
\end_layout

\begin_layout Subsection*
Postprocessing
\end_layout

\begin_layout Standard
Ich gebe zu, dass ich Ihnen oben eine etwas heile Welt vorgegaukelt habe:
 das Beispiel 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 würde in Wahrheit nämlich nicht zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 aufgelöst (wie oben angegeben), sondern zu 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

.
 Warum? Ganz einfach: Weil Ben ein Eigenname ist, der im Wörterbuch vorkommt
 ...
\begin_inset Foot
status open

\begin_layout Plain Layout
Man sieht: Computer sind hier sehr kreativ - oder eben einfach nur dumm
 ...
 ;-)
\end_layout

\end_inset

 VSTENO wird also denken
\begin_inset Foot
status open

\begin_layout Plain Layout
Bzw.
 
\begin_inset Quotes eld
\end_inset

rechnen
\begin_inset Quotes erd
\end_inset

, wie gesagt, denn es ist ein Computer ...
 ;-)
\end_layout

\end_inset

: Wenn 
\begin_inset Quotes eld
\end_inset

Ben
\begin_inset Quotes erd
\end_inset

 existiert und 
\begin_inset Quotes eld
\end_inset

ge-
\begin_inset Quotes erd
\end_inset

 eine Vorsilbe sein kann, dann muss (weil auch an- als selbständiges Wort
 existiert) auch ge- ein Präfix sein!
\begin_inset Foot
status open

\begin_layout Plain Layout
Man wäre hier vielleicht versucht, das Problem dadurch zu lösen, indem man
 definiert, dass Präfixe strikte am Wortanfang stehen müssen, aber das wird
 der Problemstellung nicht gerecht: 
\begin_inset Quotes eld
\end_inset

angegeben
\begin_inset Quotes erd
\end_inset

 zum Beispiel - hier werden die Vorsilben an- und ge- tatsächlich kombiniert
 (und es können auch noch mehr Vorsilben kombiniert werden: 
\begin_inset Quotes eld
\end_inset

unangefochten
\begin_inset Quotes erd
\end_inset

 zum Beispiel hat deren drei ...).
 Sprache (und hier insbesondere Präfixe) ist (sind) also tatsächlich rekursiv.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kurzum: Die linguistische Analyse wird uns mit dem falschen Resultat 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

 beglücken.
 Hier setzt nun das Postprocessing (Nachbearbeitung) an, die als SubSection
 mit dem Namen analyzer ebenfalls im Header stehen muss:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(analyzer)
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

(
\backslash
||
\backslash
+)(ben)$
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

-$2
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
#EndSubSection(analyzer)
\end_layout

\begin_layout Standard
Diese Regel definiert nun, dass 
\begin_inset Quotes eld
\end_inset

ben
\begin_inset Quotes erd
\end_inset

 am Wortende nie als eigenständiges Wort (Eigenname) betrachtet wird, wenn
 voraus eine Wort- oder eine Morphemgrenze steht.
 Mit anderen Worten: 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

 wird umgeschrieben zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 (Silbengrenze).
 Diese Regel hat noch weitere ungeahnte Auswirkungen: 
\begin_inset Quotes eld
\end_inset

sie|ben
\begin_inset Quotes erd
\end_inset

 zum Beispiel (ja, auch hier hat VSTENO geflissentlich
\begin_inset Foot
status open

\begin_layout Plain Layout
...
 aber ohne zu wissen, was es tut ...
 ;-)
\end_layout

\end_inset

 ein Pronomen 
\begin_inset Quotes eld
\end_inset

sie
\begin_inset Quotes erd
\end_inset

 und den Eigennamen 
\begin_inset Quotes eld
\end_inset

Ben
\begin_inset Quotes erd
\end_inset

 erkannt.
 Auch dies wird nun 
\begin_inset Quotes eld
\end_inset

zurückgeschrieben
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

sie-ben
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Postprocessing Regeln sind also REGEX-Regeln, die im Header stehen und -
 ähnlich wie in Stage 2 und 4 - auf das ganze Wort (inklusive Satzzeichen,
 Morphem- und Silbengrenzen) angewendet werden!
\end_layout

\begin_layout Section*
Phonetische Analyse
\end_layout

\begin_layout Standard
In einigen Sprachen wie zum Beispiel Französisch, wo Laut und Schrift stark
 voneinander abweichen, ist es unumgänglich auf eine phonetische Transkription
 zurückgreifen zu können.
 VSTENO ermöglicht dies durch die Verwendung des Programmes eSpeak
\begin_inset Foot
status open

\begin_layout Plain Layout
http://espeak.sourceforge.net/
\end_layout

\end_inset

, das ebenfalls unter der freien Sofwarelizenz GPL herausgegeben wurde.
 Das Programm eSpeak ist eigentlich ein Sprachsynthese-Werkzeug, kann als
 solches aber - im Quiet-Modus - auch phonetische Transkriptionen vornehmen.
 Die phonetische Analyse via eSpeak kann in VSTENO durch folgende Session-Variab
len im Header-Teil des Modells vorselektiert werden:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session)
\end_layout

\begin_layout LyX-Code
    // use linguistical analysis 
\end_layout

\begin_layout LyX-Code
    "analysis_type" := "selected"; 
\end_layout

\begin_layout LyX-Code
    // hyphenation (phpSyllable) 
\end_layout

\begin_layout LyX-Code
    "hyphenate_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    "language_hyphenator" := "fr"; 
\end_layout

\begin_layout LyX-Code
    // composed words + affixes (hunspell) 
\end_layout

\begin_layout LyX-Code
    "composed_words_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    "language_hunspell" := "fr"; 
\end_layout

\begin_layout LyX-Code
    // generate affixes in composed words 
\end_layout

\begin_layout LyX-Code
    "affixes_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    // set variables for filter option (not selected) 
\end_layout

\begin_layout LyX-Code
    "filter_out_prefixes_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    "filter_out_suffixes_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    "filter_out_words_yesno" := "no"; 
\end_layout

\begin_layout LyX-Code
    // disable phonetic analysis 
\end_layout

\begin_layout LyX-Code
    "phonetics_yesno" := "yes"; 
\end_layout

\begin_layout LyX-Code
    "language_espeak" := "fr"; 
\end_layout

\begin_layout LyX-Code
    "phonetic_alphabet" := "espeak";
\end_layout

\begin_layout LyX-Code
#EndSubSection(session)
\end_layout

\begin_layout Standard
Beachten Sie, dass es nicht möglich ist, eSpeak mit dem Silbentrenner (phpSyllab
le) und der Wortanalyse (hunspell) zu kombinieren.
 Es empfiehlt sich, bei der Vorselektion der linguistischen Analyse immer
 alle Variablen zu setzen (also zum Beispiel auch 
\begin_inset Quotes eld
\end_inset

fr
\begin_inset Quotes erd
\end_inset

 für die Variablen 
\begin_inset Quotes eld
\end_inset

language_hyphenator
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

language_hunspell
\begin_inset Quotes erd
\end_inset

 etc.
 auch wenn Sie nicht verwendet werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Parameter können ja auch vom/von der Benuzter/in im Eingabe-Formular
 Maxi verändert werden; das Setzen aller Variablen steht sicher, dass dem/der
 Benuzter/in korrekte Parameter zur Auswahl angeboten werden.
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Standard
Wir können uns nun mit den obigen Einstellungen anschauen, wie eine erste
 französische Transkription aussieht.
 Wir wählen hierfür das Wort 
\begin_inset Quotes eld
\end_inset

renseignement
\begin_inset Quotes erd
\end_inset

.
 Die Wahl von LNG als Ausgabeform ergibt nun:
\end_layout

\begin_layout LyX-Code
rA~sEnj@mA~ 
\end_layout

\begin_layout Standard
Dies entspricht der Ausgabe 
\begin_inset Quotes eld
\end_inset

espeak
\begin_inset Quotes erd
\end_inset

 die wir mit der Variable 
\begin_inset Quotes eld
\end_inset

phonetic_alphabet
\begin_inset Quotes erd
\end_inset

 vorselektiert haben.
 Verwendet wird hier grundsätzlcih das so genannte Kirshenbaum Alphabet
\begin_inset Foot
status open

\begin_layout Plain Layout
https://en.wikipedia.org/wiki/Kirshenbaum
\end_layout

\end_inset

.
 Der Vorteil des Kirshenbaum-Alphabets besteht darin, dass nur Zeichen verwendet
 werden, die auf einer normalen Tastatur einfach eingegeben und auch in
 einem normalen ASCII-Text-Editor gut dargestellt werden können.
 Der Nachteil besteht darin, dass für ungewöhnlich Laute manchmal mehrere
 Zeichen mit Gross- und Kleinschreibung verwendet werden.
 So z.B.
 die Kombination 
\begin_inset Quotes eld
\end_inset

A~
\begin_inset Quotes erd
\end_inset

 für das nasale A, 
\begin_inset Quotes eld
\end_inset

E
\begin_inset Quotes erd
\end_inset

 für ein offenes E, 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 für stummes E (e muet) etc.
\begin_inset Foot
status open

\begin_layout Plain Layout
Alternativ kann das Internationale Phonetische Alphabet (IPA) verwendet
 werden.
 Es ist aber unklar, inwieweit es realistisch ist, basierend auf diesem
 Alphabet ein funktionierendes stenografisches Modell mit einem simplen
 Texteditor zu erstellen (und in der Datenbank, die punkto Sonderzeichen
 ebenfalls etwas 
\begin_inset Quotes eld
\end_inset

reizbar
\begin_inset Quotes erd
\end_inset

 ist) abzuspeichern.
 An dieser Stelle soll deshalb ganz förmlich von der Verwendung des IPA
 abgeraten werden ...
 (Aber wer es versuchen möchte, darf natürlich ...
 ;-)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Prinzip kann man man nun mit diesen Zeichen genau gleich Regeln formulieren,
 wie das mit dem Schriftbild der Fall war, also zum Beispiel:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

mA~$
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{MENT}
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
"^kO~tr" => "{CONTRE}"; 
\end_layout

\begin_layout LyX-Code
"^Etr$" => "{ETRE}";
\end_layout

\begin_layout Standard
Für die Kürzungen -ment, contre-, être.
 Allerdings ist Französisch eine vertrackte Sprache: da es viele Homonyme
 (gleichlautende Wörter) gibt, wird oft das Schriftbild dazu verwendet,
 um sie zu unterscheiden:
\end_layout

\begin_layout LyX-Code
son/sont <=/=> le son
\end_layout

\begin_layout LyX-Code
sans <=/=> s'en/cent/c'en/sang
\end_layout

\begin_layout Standard
Hier sollen für 
\begin_inset Quotes eld
\end_inset

son/sont
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes erd
\end_inset

sans
\begin_inset Quotes erd
\end_inset

 die entsprechenden Kürzungen verwendet werden, 
\begin_inset Quotes eld
\end_inset

le son
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

c'en/cent/c'en/sang
\begin_inset Quotes erd
\end_inset

 sollen jedoch ausgeschrieben werden.
\end_layout

\begin_layout Standard
Dies kann dadurch gelöst werden, dass man solche Wörter zunächst in der
 Stage 0 - wo ja noch das Schriftbild des Wortes zur Verfügung steht - vormarkie
rt:
\end_layout

\begin_layout LyX-Code
"(?<=^| )([Ll]e|[Uu]n) son(?= |$)" => "$1_son"; // R1
\end_layout

\begin_layout LyX-Code
"(?<=^| )[Ss]ont?(?= |$)" => " #son "; 		 // R2		
\end_layout

\begin_layout LyX-Code
"([Ll]e|[Uu]n)_son" => "$1 son";                // R3
\end_layout

\begin_layout LyX-Code
"(?<=^| )[Ss]ans(?= |$)" => "#sans";            // R4
\end_layout

\begin_layout Standard
Betrachten wir zuerst den Fall 
\begin_inset Quotes eld
\end_inset

son/sont
\begin_inset Quotes erd
\end_inset

 vs 
\begin_inset Quotes eld
\end_inset

le son
\begin_inset Quotes erd
\end_inset

: Die Abgrenzung 
\begin_inset Quotes eld
\end_inset

son
\begin_inset Quotes erd
\end_inset

 vs 
\begin_inset Quotes eld
\end_inset

sont
\begin_inset Quotes erd
\end_inset

 ist sehr einfach (hier hilft das unhörbare, aber geschriebene t).
 Diese Unterscheidung 
\begin_inset Quotes eld
\end_inset

son
\begin_inset Quotes erd
\end_inset

 (Personalpronomen) vs 
\begin_inset Quotes eld
\end_inset

son
\begin_inset Quotes erd
\end_inset

 (Substantiv) hingegen ist sehr knifflig.
 Wir können hier versuchen, syntaktische Elemente herbeizuziehen, z.B.
 ob 
\begin_inset Quotes eld
\end_inset

son
\begin_inset Quotes erd
\end_inset

 ein Artikel, also 
\begin_inset Quotes eld
\end_inset

le
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

un
\begin_inset Quotes erd
\end_inset

 vorausgeht.
 Dies tut nun die erste Regel R1 (indem es im Gesamttext - Stage 0 - nach
 solchen Kombinationen sucht) und schreibt diese Kombinationen dann als
 
\begin_inset Quotes eld
\end_inset

le_son
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

un_son
\begin_inset Quotes erd
\end_inset

.
 Nun kann die zweite Regel ganz einfach alle verbleibenden, alleinstehenden
 (das heisst von einem Space-Zeichen umgebenen 
\begin_inset Quotes eld
\end_inset

son
\begin_inset Quotes erd
\end_inset

) zu #son umschreibt.
 In einem dritten Schritt (R3) schreiben wir 
\begin_inset Quotes eld
\end_inset

le_son
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

un_son
\begin_inset Quotes erd
\end_inset

 wieder zu 
\begin_inset Quotes eld
\end_inset

le son
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

un son
\begin_inset Quotes erd
\end_inset

 (getrennt geschrieben zurück).
 
\end_layout

\begin_layout Standard
Die Markierung von #son hat nun zur Folge, dass eSpeak dieses Wort nicht
 phonetische umschreiben wird.
 Das Wort #son gelangt also unverändert in die Stage 1 (Nachschlagen im
 Wörterbuch), Stage 2 (einzelne, ganze Wörter; mehrere Falls zusammengesetzt)
 und Stage 3 (einzelne Teilwörter).
 Dort können wir sie nun mit dem Shortener zum Beispiel definitiv als Kürzung
 umschreiben:
\end_layout

\begin_layout LyX-Code
"#son" => "{SON}"; 
\end_layout

\begin_layout Standard
Das nicht markierte Wort 
\begin_inset Quotes eld
\end_inset

le son
\begin_inset Quotes erd
\end_inset

 hingegen wird phonetisch zu 
\begin_inset Quotes eld
\end_inset

l@ sO~
\begin_inset Quotes erd
\end_inset

 transkribiert und kann danach anhand der System-Regeln zu einem Stenogramm
 umgeschrieben werden.
\end_layout

\begin_layout Standard
Etwas einfach funktioniert das Wort 
\begin_inset Quotes eld
\end_inset

sans
\begin_inset Quotes erd
\end_inset

: Da dieses unveränderlich ist, dann es einfach als alleinstehendes (= zwischen
 Spaces stehendes) Wort erkannt und mit # als 
\begin_inset Quotes eld
\end_inset

#sans
\begin_inset Quotes erd
\end_inset

 markiert werden.
 Alle anderen, vom Schriftbild her verschiedenen, aber lautlich gleichen
 Varianten wie 
\begin_inset Quotes eld
\end_inset

c'en/cent/s'en/sans
\begin_inset Quotes erd
\end_inset

 werden von eSpeak phonetisch zu 
\begin_inset Quotes eld
\end_inset

sA~
\begin_inset Quotes erd
\end_inset

 transkribiert und gemäss der Standardregeln in ein Stenogramm übertragen.
 
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass die obige Regeln nicht der Weisheit letzter Schluss
 sind.
 Sämtliche Wörter die in Anführungszeichen stehen oder die von einem Satzzeichen
 (,.:;!?) funktionieren zum Beispiel nicht
\begin_inset Foot
status open

\begin_layout Plain Layout
Dies kann man z.B.
 wiederum dadurch lösen, dass man zuerst künstlich in Stage 0 Abstände einfügt,
 die man danach - weiterhin in Stage 0 - wieder herausfiltert, also: "(
\backslash
(|
\backslash
[|
\backslash
"|'|
\backslash
?|!)([a-zA-Zàáâéèêïòôùû])" => "$1#># $2"; und "([a-zA-Zàáâéèêïòôùû])(
\backslash
)|
\backslash
]|
\backslash
"|'|!|
\backslash
?)" => "$1 #<#$2"; etc.
 
\end_layout

\end_inset

.
 Auch erkennt die Regel R1 zwar zuverlässig 
\begin_inset Quotes eld
\end_inset

le son
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

un son
\begin_inset Quotes erd
\end_inset

 nicht aber 
\begin_inset Quotes eld
\end_inset

un dernier son
\begin_inset Quotes erd
\end_inset

.
 Kurzum: Regeln zu schreiben, die hier allen möglichen Fällen gerecht werden,
 ist eine sehr knifflige Angelegenheit!
\end_layout

\begin_layout Standard
Bitte beachten Sie auch, dass es bis zu einem gewissen Grad auch möglich
 ist, markierte Wörter mit Teilen zu kombinieren, die phonetisch behandelt
 werden sollen.
 Beispielsweise gibt es im Französischen viele Wörter mit e muet, die mittels
 Apostroph mit einem vokalisch anlautenden Folgewort verbunden sind: m'étais,
 l'avait, n'avions etc.
 Die Regel in Stage 0
\end_layout

\begin_layout LyX-Code
"(?<=^| )[Aa]v(ai[st]|ions|iez|aient|oir)(?= |$)" => "#av$1";
\begin_inset Foot
status open

\begin_layout Plain Layout
Damit diese Regel funktioniert, müssen bei Apostrophes zunächst künstliche
 Leerzeichen eingefügt werden, wie später wieder herausgefiltert werden
 (wie weiter oben beschrieben).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
schreibt zum Beispiel 
\begin_inset Quotes eld
\end_inset

n'avions
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

n#avions
\begin_inset Quotes erd
\end_inset

 um.
 Im Shortener-Teil können wir dann die Regel
\end_layout

\begin_layout LyX-Code
"#avions" => "{AV}j[o~]"; 
\end_layout

\begin_layout Standard
einfügen.
 Das Stenogramm wir schliesslich korrekt generiert:
\end_layout

\begin_layout LyX-Code
(1) n stammt aus der Regel in Stage 0 und entspricht phonetisch n
\end_layout

\begin_layout LyX-Code
(2) {AV} wurde in Stage 0 als 
\begin_inset Quotes eld
\end_inset

#avions
\begin_inset Quotes erd
\end_inset

 vormarkiert und im Shortener (Stage 3) ersetzt
\end_layout

\begin_layout LyX-Code
(3) lautliches 
\begin_inset Quotes eld
\end_inset

j[o~]
\begin_inset Quotes erd
\end_inset

 wird vom Shortener als 
\begin_inset Quotes eld
\end_inset

phonetischer Rest zur Kürzung {AV}
\begin_inset Quotes erd
\end_inset

 umgeschrieben (und später durch die Kürzung {ION} wiedergegeben)
\end_layout

\begin_layout Standard
Dies nur einige Beispiele, die zeigen sollen, dass durch geschickte Kombinierung
 der Stages in VSTENO sehr vieles möglich ist.
\end_layout

\begin_layout Subsection*
Phonetische Patchliste
\end_layout

\begin_layout Standard
Es ist möglich, dass gewisse Wörter von eSpeak falsch transkribiert werden,
 weil diese zum Beispiel nicht im internen Wörterbuch von eSpeak gespeichert
 sind.
 In diesem Fall besteht die Möglichkeit, die phonetische Transkription zu
 
\begin_inset Quotes eld
\end_inset

patchen
\begin_inset Quotes erd
\end_inset

 (korriegieren), indem die richtigen Transkription der Variablen phonetics_trans
cription_list im Session-Teil (im Header) zugewiesen werden:
\end_layout

\begin_layout LyX-Code
"phonetics_transcription_list" := " 
\end_layout

\begin_layout LyX-Code
    "laids?":"lE", 
\end_layout

\begin_layout LyX-Code
    "(?:(l)')?aspects?":"$1aspE", // use full regex for phonetic transcriptions
   
\end_layout

\begin_layout LyX-Code
    "respects?":"respE", 
\end_layout

\begin_layout LyX-Code
    "cheques?":"SEk", 
\end_layout

\begin_layout LyX-Code
    "quantités?":"ka~tite", 
\end_layout

\begin_layout LyX-Code
    "assid(?:û|u)ment":"asidyma~", 
\end_layout

\begin_layout LyX-Code
    "discutions":"diskytio~", 
\end_layout

\begin_layout LyX-Code
    "vingt":"vE~t", "l'as":"la",  
\end_layout

\begin_layout LyX-Code
    "([slmt])?'?enhardi(r)?":"$1a~ardi$2",
\end_layout

\begin_layout LyX-Code
    "(slmt)?'?enharnach(e[rz]|ée?s?)":"$1a~arnaSe" 
\end_layout

\begin_layout LyX-Code
";
\end_layout

\begin_layout Standard
Dies ein Beispiel für eine französische Patchliste.
 Auch hier können REGEX-Ausdrücke (inklusive Klammern und Variablen im Transkrip
tionsteil) zur Erfassung verschiedener Formen verwendet werden.
\end_layout

\begin_layout Subsection*
Akronyme
\end_layout

\begin_layout Standard
Wenn die phonetische Transkription eingeschaltet ist, so hat dies den Nachteil,
 dass auch Akronyme transkribiert werden.
 Um dies zu verhindern können folgende Variablen im Header-Teil (oder im
 Eingabe-Formular) gesetzt werden:
\end_layout

\begin_layout LyX-Code
"phonetics_acronyms_yesno" := "no";
\end_layout

\begin_layout LyX-Code
"phonetics_acronyms_lowercase_yesno" := "yes";
\end_layout

\begin_layout Standard
Die Variable phonetics_acronyms_yesno bestimmt also, ob Akronyme transkribiert
 werden oder nicht (die Standardeinstellung ist 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 = keine Transkription), die Variable phonetics_acronyms_lowercase_yesno
 definiert, ob Akronyme in Kleinbuchstaben umgewandelt werden sollen
\begin_inset Foot
status open

\begin_layout Plain Layout
Diese Funktion ist nützlich, weil im Kirschenbaum Alphabet Grossbuchstaben
 andere Bedeutungen haben als Kleinbuchstaben.
 Durch die Umwandlung kann sichergestellt werden, dass die Zeichen so in
 Steno übertragen werden, wie sie auch in der Langschrift sind.
 Das Übertragen von Akronymen in Steno ist allerdings eine komplexe Sache:
 u.U.
 ist es deshalb besser, dies mit einer eigenen Funktion (z.B.
 Akronymator wie im deutschen Modell DESSBAS) und eigenen Regeln (die auch
 diakritische Zeichen - z.B.
 Unterstrich für Grossbuchstaben - einfügen können) zu lösen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Wörterbuch
\end_layout

\begin_layout Standard
In Stage 1 schickt VSTENO das zu berechnende Wort zuerst zum Wörterbuch.
 Dort wird es entweder gefunden oder nicht.
 Wenn es gefunden wird, enthält das Wörterbuch drei Einträge namens LNG
 (linguistical form), STD (standard form) und PRT (print form).
 Der Unterschied zwischen STD und PRT ist grundsätzlich, dass STD eine Standard-
Version von Stenogrammen darstellt.
 PRT wiederum entspricht quasi 1:1 dem Stenogramm, wie es am Ende generiert
 werden soll
\begin_inset Foot
status open

\begin_layout Plain Layout
Weitere Hinweise zur STD und PRT Form finden sich hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/mitmachen_bei_vsteno.pdf"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Es können nun drei Fälle auftreten: 
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält nur LNG
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält sowohl LNG als auch STD
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält sowohl LNG als auch STD als auch PRT
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Formen LNG, STD, PRT entsprechen der chronologischen Abfolge der Berechnung,
 deshalb existiert im Prinzip zu jeder STD-From eine (vorhergehende) LNG-Form
 und zu jeder PRT-Form (vorhergehende) STD- und PRT-Formen.
 Trotzdem ist es möglich, dass in der Datenbank Einträge vorhanden sind,
 wo frühere Formen fehlen (z.B.
 nur PRT, ohne STD und LNG oder PRT, ohne STD aber mit LNG).
 In diesem Fall verwendet VSTENO einfach die in der Abarbeitungsreihenfolge
 letzte Form (hier also PRT).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ist das Wort in der PRT Form enthalten, werden keine weiteren Regeln mehr
 abgearbeitet, sondern direkt ein Stenogramm generiert.
 Ist das Wort in der STD Form enthalten, wird die STD-Form vom Parser in
 die PRT überführt, indem er einen Teil der Regeln anwendet.
 Ist nur die LNG-Form enthalten, wird zuerst die STD- und danach die PRT-Form
 generiert.
 Damit dies funktioniert, muss im Parser eine Funktion mit folgendem Format
 definiert sein:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(bundler)
\end_layout

\begin_layout LyX-Code
     // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(bundler,=:std)
\end_layout

\begin_layout Standard
Das Symbol 
\begin_inset Quotes eld
\end_inset

=:
\begin_inset Quotes erd
\end_inset

 bedeutet hier 
\begin_inset Quotes eld
\end_inset

weise zu
\begin_inset Quotes erd
\end_inset

.
 Die Zuweisung erfolgt hier der Variable std, welche der STD-Form entspricht.
 Jede Regelsammlung, die ein Stenografie-System definiert, sollte also eine
 Funktion enthalten, wo im #EndSubSection-Teil der Variablen STD ein Wert
 zugewiesen wird (damit diese für das Wörterbuch verwendet werden kann).
\end_layout

\begin_layout Standard
Das Gleiche gilt für die PRT-Form, die ganz am Ende der Regelsammlung zugewiesen
 werden sollte:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(spacer)
\end_layout

\begin_layout LyX-Code
    // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(spacer,=:prt)
\end_layout

\begin_layout Standard
Sowohl STD- als auch PRT-Form sollten erst in Stage 4 (und keines falls
 in Stage 3) zugewiesen werden (da in Stage 3 bei zusammengesetzten Wörtern
 nur Teilwörter bearbeitet werden und die Formen deshalb unter Umständen
 nicht vollständig sind).
\end_layout

\begin_layout Standard
Die Zuweisung der LNG-Form erfolgt in VSTENO automatisch: Sie ist jene Form,
 die direkt der linguistischen Analyse + Postprocessing entstammt.
\end_layout

\begin_layout Section*
Verzweigungen
\end_layout

\begin_layout Standard
Funktionen können auch definieren, welche Regeln bzw.
 welche Funktion als nächstes ausgeführt werden soll.
 Wird nichts angegeben, wird einfach die nächste Regel (aus der folgenden
 Funktion) ausgeführt.
 Alternativ kann eine bedingte Verzweigung angegeben werden:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(trickster)
\begin_inset Foot
status open

\begin_layout Plain Layout
Hier also nochmals der berüchtigte Trickster - es bleibt zu hoffen, dass
 VSTENO sich dieses unseligen Compagnons bis zur finalen Version 0.1 definitiv
 entledigen kann ...
 Der Trickster eignet sich deshalb als Beispiel, weil er gleich zwei bedingte
 Verzweigungen enthält.
 Nachtrag 08.04.2019: Der Trickster ist inzwischen Geschichte - um nicht die
 gesamte Dokumentation anpassen zu müssen, wird er hier als (nunmehr theoretisch
es) Beispiel belassen.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
     // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(trickster,=>decapitalizer,!>filter) 
\end_layout

\begin_layout Standard
Diese Funktion definiert folgende bedingte Verzweigungen:
\end_layout

\begin_layout Enumerate
Wenn sich das Wort nach Ausführung des Trickster nicht geändert hat, verzweige
 zu Funktion decapitalizer.
\end_layout

\begin_layout Enumerate
Wenn sich das Wort nach Ausführung von Trickster verändert hat, verzweige
 zu Funktion filter.
\end_layout

\begin_layout Standard
Verglichen wird also das Wort am Anfang und am Ende der Funktion.
 Bedingte und unbedingte Verzweigungen können in VSTENO mit folgenden Zeichen
 definiert werden:
\end_layout

\begin_layout Itemize
=>: 
\begin_inset Quotes eld
\end_inset

verzweige wenn gleich
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
!>: 
\begin_inset Quotes eld
\end_inset

verzweige wenn nicht gleich
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
>>: 
\begin_inset Quotes eld
\end_inset

verzweige in jedem Fall
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection*
Gross- und Kleinbuchstaben
\end_layout

\begin_layout Standard
Dieses Thema haben wir bis jetzt stillschweigend übergangen bzw.
 nur hie und da kurz angedeutet.
 Es geht um die Frage, wie Klein- und Grossbuchstaben in VSTENO verwendet
 werden.
\end_layout

\begin_layout Standard
Tatsache ist, dass Gross- und Kleinschreibung durchaus einen Unterschied
 machen können: das Substantiv 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 und das Verb 
\begin_inset Quotes eld
\end_inset

waren
\begin_inset Quotes erd
\end_inset

 werden in Stolze-Schrey z.B.
 völlig unterschiedlich geschrieben.
 Dies ist der Grund, warum VSTENO zu Beginn der ParserChain die Gross- und
 Kleinschreibung beibehält - und zwar bis und mit Shortener.
 Wenn Sie also im Shortener die Regel:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

war
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{WAR}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
definieren, so wird diese nur auf das Verb 
\begin_inset Quotes eld
\end_inset

waren
\begin_inset Quotes erd
\end_inset

 (ergibt 
\begin_inset Quotes eld
\end_inset

{WAR}en
\begin_inset Quotes erd
\end_inset

) nicht aber auf 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 (bleibt 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

) angewendet
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine andere Sache ist natürlich, wenn das Verb 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 dummerweise am Satzanfang steht und ebenfalls gross geschrieben wird ...
 ;-)
\end_layout

\end_inset

.
 Da es bei den meisten Wörtern jedoch keinen Unterschied macht, ob sie gross
 oder klein geschrieben werden - und es mühsam wäre, in den Regeln jedesmal
 sämtliche Varianten in eckigen Klammern anzugeben - wandelt VSTENO nach
 dem Shortener sämtliche Gross- in Kleinbuchstaben um! Alle nachfolgenden
 Schritte (Normalizer, Bundler, Transcriptor, Substituter) arbeiten somit
 mit Kleinbuchstaben.
 Ausgenommen von der Umwandlung in Kleinbuchstaben sind allerdings Veränderungen
, die der Shortener selbst vornimmt: Wenn der Shortener im Wort 
\begin_inset Quotes eld
\end_inset

wahrhaftig
\begin_inset Quotes erd
\end_inset

 also die Kürzung -haft zu 
\begin_inset Quotes eld
\end_inset

wahr{HAFT}ig
\begin_inset Quotes erd
\end_inset

 ersetzt, so verbleibt der Teil 
\begin_inset Quotes eld
\end_inset

{HAFT}
\begin_inset Quotes erd
\end_inset

 auch nach dem Shortener in Grossbuchstaben.
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir weisen hier - en passant - noch auf einen weiteren Aspekt hin: Wichtig
 ist in diesem Beispiel auch, dass der Normalizer (der den Vokal 
\begin_inset Quotes eld
\end_inset

ah
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 umschreibt) erst NACH dem Shortener abgearbeitet wird, da sonst die Kürzung
 
\begin_inset Quotes eld
\end_inset

war
\begin_inset Quotes erd
\end_inset

 auch auf das Wort 
\begin_inset Quotes eld
\end_inset

wa(h)rhaftig
\begin_inset Quotes erd
\end_inset

 angewandt würde.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die konsequente Kleinschreibung - mit Ausnahme der vom Shortener eingesetzten
 Teile, wie gesagt - hat den Vorteil, dass wir Grossbuchstaben nun dazu
 benutzen können, jene Teile des Wortes zu markieren, die von bestimmten
 Regeln bereits umgeschrieben wurden: ein Kleinbuchstabe bedeutet also 
\begin_inset Quotes eld
\end_inset

wurde noch nicht bearbeitet
\begin_inset Quotes erd
\end_inset

 (= 
\begin_inset Quotes eld
\end_inset

muss bearbeitet werden
\begin_inset Quotes erd
\end_inset

) ein Grossbuchstabe bedeutet 
\begin_inset Quotes eld
\end_inset

wurde bereits bearbeitet
\begin_inset Quotes erd
\end_inset

 (= 
\begin_inset Quotes eld
\end_inset

darf nicht noch einmal bearbeitet werden
\begin_inset Quotes erd
\end_inset

)
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Umwandlung von Gross- zu Kleinbuchstaben (mittels strotlower() im consequenc
e-Teil der Regeln) zu genau diesem Zweck erfolgt inzwischen mehrmals innerhalb
 des Modells Stolze-Schrey (siehe hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt"

\end_inset

).
\end_layout

\end_inset

.
\end_layout

\begin_layout Part*
VPAINT
\end_layout

\begin_layout Standard
Wie bereits erwähnt wurde VPAINT als Hilfsprogramm für VSTENO entwickelt:
 In der Version SE1 rev0 ist die Definition der Zeichen grundsätzlich nur
 via einen Text-Editor möglich.
 Stenografische Zeichen erscheinen darin als lange Listen abstrakter Zahlen,
 die keine visuelle Vorstellung der Zeichen erlaubt und ein intuitives Entwerfen
 und Bearbeiten von Stenozeichen praktisch unmöglich machen.
 Als Abhilfe sollte hier der grafische Editor VPAINT (VPAINT - an Amazing
 Interactive New Tool
\begin_inset Foot
status open

\begin_layout Plain Layout
Vorläufig aber eher VPAINT - an Awfully Instable Nerd Tool (und man möge
 mir zugestehen, dass im Englischen die Variante instable für unstable,
 wenn auch seltener, durchaus existiert;-) 
\end_layout

\end_inset

) schaffen.
\end_layout

\begin_layout Standard
Wie bereits in Version (Rückblick) dargelegt, war eigentlich geplant, mit
 VPAINT 
\begin_inset Quotes eld
\end_inset

durchzustarten
\begin_inset Quotes erd
\end_inset

, d.h.
 mit VPAINT eine neue (bessere) SE2 zu entwickelt, diese sowohl in JavaScript
 als auch in PHP zu implementieren und schliesslich die SE1 in einer 
\begin_inset Quotes eld
\end_inset

Operation am offenen Herzen
\begin_inset Quotes erd
\end_inset

 vollständig aus VSTENO zu entfernen und durch die SE2 zu ersetzen.
 Aus bereits dargelegten Gründen wurden diese Pläne geändert und stattdessen
 versucht, VPAINT mit einer - zwischenzeitlich zu einer rev1 weiterentwickelten
 SE1 - rückwärtskompatibel zu machen.
 Dies alles gefolgt von der weiteren Entscheidung, in der Version 0.1rc die
 SE1 rev1 komplett zu deaktivieren und nur dei SE1 rev0 zu verwenden.
\end_layout

\begin_layout Standard
Der langen Rede kurzer Sinn: VPAINT ist mit der SE1 rev0 inkompatibel! Dennoch
 kann VPAINT in der Version 0.1rc von VSTENO wenigstens dazu verwendet werden,
 Stenografiezeichen zu visualisieren und - in eingeschränktem Masse - zu
 editieren, um schönere Zeichen zu gestalten und das Entwerfen der Stenozeichen
 intuitiver zu gestalten.
\end_layout

\begin_layout Standard
Die folgenden Ausführen sollen somit aufzeigen, was möglich ist - und was
 Sie tunlichst (!) vermeiden sollten!
\end_layout

\begin_layout Standard
Ergänzung zur Version Ariadne (V0.2): VPAINT wird mit 99% Wahrscheinlichkeit
 nie weiterentwickelt werden, dies vor allem, weil sie auf der SE2 basiert,
 die wenig zielführend ist.
 Sämtliche Programmteile von VPAINT werden im Moment in VSTENO und im Github-Rep
ository belassen.
 Die Funktionen, die für die Version Hephaistos (V0.1) entwickelt wurden
 und im folgenden beschrieben werden stehen also weiterhin zur Verfügung.
\end_layout

\begin_layout Section*
Visualisieren
\end_layout

\begin_layout Standard
Mit VPAINT können Stenozeichen aus dem Text-Editor (also so, wie wir sie
 bis jetzt editiert haben) visualisiert werden.
 Gehen Sie hierzu wie folgt vor:
\end_layout

\begin_layout Enumerate
Gehen Sie auf die Seite www.vsteno.ch und loggen Sie sich ein.
\end_layout

\begin_layout Enumerate
Wählen Sie das Modell custom (1x links unten auf den Button standard klicken)
\end_layout

\begin_layout Enumerate
Klicken Sie in der linken Navigationsleiste auf VPAINT (das Programm wird
 geöffnet)
\end_layout

\begin_layout Enumerate
Laden Sie nun ein Zeichen, indem Sie aus dem Pulldown-Menü Select das Zeichen
 wählen und auf Load klicken.
\end_layout

\begin_layout Standard
Sie sehen nun die folgende Darstellung:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_geladenes_zeichen.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Die Darstellung zeigt das Zeichen 
\begin_inset Quotes eld
\end_inset

NN
\begin_inset Quotes erd
\end_inset

 aus dem System Stolze-Schrey in vertikaler Stellung (90 Grad).
\end_layout

\begin_layout Section*
Editieren
\end_layout

\begin_layout Standard
Sie können das geladene Zeichen nun editieren.
 Da die SE1 rev0 nur horizontale Punktverschiebungen beherrscht, empfiehlt
 sich das folgende Vorgehen: Neigen Sie die Rotationsachse auf die gewünschte
 Neigung (z.B.
 60 Grad in der Standardeinstellung von VSTENO).
 Sie erreichen dies durch Ziehen (klicken und ziehen) des grünen Punktes
 der Rotationsachse mit der Maus.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_nn_60grad.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
Editieren Sie nun das Zeichen so, dass es in dieser Neigung gut aussieht:
\end_layout

\begin_layout Itemize
Verschieben der Punkte mit der Maus (der aktuelle Punkt ist gelb umrandet).
\end_layout

\begin_layout Itemize
Anpassen der Spannungen (A1 = Eingangsspannung, A2 = Ausgangsspannung).
\end_layout

\begin_layout Standard
Mit der Taste 
\begin_inset Quotes eld
\end_inset

s
\begin_inset Quotes erd
\end_inset

 können Sie zwischen der normalen und der schattierten Variante des Zeichens
 hin- und herwechseln.
 Die Strichdicke kann mit L1 und R1 angepasst werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Unterschied zur SE1 verfügt die SE2 über eine linke (L1) und eine rechte
 Dicke (R1).
 Die Dicke 1 (L1, R1) steht für das normale, die Dicke 2 (L2, R2) für das
 schattierte Zeichen.
 Beachten Sie bitte, dass die Dicke der SE1 dem Mittelwert von L1 und L1
 (L2 und L2 für das schattierte Zeichen) entspricht, als TH = (L1+L2) /
 2.
 Um die linke und rechte Dicke der SE2 zu visualisieren, können Sie mit
 der Taste 
\begin_inset Quotes eld
\end_inset

q
\begin_inset Quotes erd
\end_inset

 zwischen SE1 (Mittellinienmodellierung) und SE2 (Umrissmodellierung) umschalten.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Wenn das Zeichen in der 60-Grad-Stellung gut aussieht, richten Sie die Rotations
achse wieder auf 90 Grad aus.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_90grad.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
Und nun kommt der schöne Teil: Nehmen Sie ein Blatt Papier und notieren
 Sie sich die Koordinaten und die Spannungen (und eventuell Dicken) der
 Punkte der Reihe nach
\begin_inset Foot
status open

\begin_layout Plain Layout
Sie können sich mit den Pfeiltasten < und > rechts jeweils einen Punkt nach
 links oder nach rechts bewegen.
\end_layout

\end_inset

.
 Ja genau: Es ist Handarbeit gefragt! VPAINT ist mit der SE1 rev0 inkompatibel
 - versuchen Sie nicht die Daten zu speichern - klicken Sie NICHT auf den
 Button ->DB!
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Hinblick auf die Release der Version 0.1 wurde die Speicherfunktion von
 VPAINT nun definitiv deaktiviert.
 Es besteht somit keine Gefahr mehr, Daten und Modelle durch fehlerhafte
 Exporte zu beschädigen.
 Wenn auf den Button ->DB geklickt wird, gelangt man wie gewohnt zu einem
 Texteditor, der die exportierten Zeichen-Definition enthält.
 Daraus können - wenn gewünscht - einzelne Zeichen manuell kopiert und via
 den normalen Font-Editor (aus der Seitennavigation) in ein bestimmtes Modell
 eingefügt werden.
 Wenn Sie anschliessend auf 
\begin_inset Quotes eld
\end_inset

speichern
\begin_inset Quotes erd
\end_inset

 klicken, so führt der Link lediglich auf die Seite 
\begin_inset Quotes eld
\end_inset

edit_font_disabled.php
\begin_inset Quotes erd
\end_inset

, wo Sie darauf hingewiesen werden, dass die Speicher-Funktion deaktiviert
 wurde.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
VPAINT kann Ihnen also lediglich helfen, bestehende Zeichen zu visualisieren
 und zu editieren.
 Die Daten müssen anschliessend aber von Hand via Texteditor in VSTENO 0.1rc
 (SE1 rev0) übertragen werden.
\end_layout

\begin_layout Section*
Zukunftsmusik
\end_layout

\begin_layout Standard
Wenn Sie gerne einen Blick auf die SE2 werfen und etwas mit dem Programm
 VPAINT herumprobieren möchten, dann verwenden Sie dafür bitte den folgenden
 Link:
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/js/vsteno_editor.html"

\end_inset


\end_layout

\begin_layout Standard
Dies ist die allgemeine (d.h.
 nicht an VSTENO gekoppelte) Version von VPAINT.
 Sie funktioniert auch, wenn Sie nicht eingeloggt sind und Sie können hier
 also sicher sein, dass Sie nichts kaputt machen können.
 Sie finden hier auch eine Auflistung der Tastaturbefehlen, mit denen Sie
 weitere Funktionen von VPAINT nutzen können.
\end_layout

\begin_layout Part*
Programm
\end_layout

\begin_layout Section*
Ja, ja ...
 Dokumentation
\end_layout

\begin_layout Standard
Nach dem praktischen und dem linguistischen Teil stünde nun natürlich noch
 die Dokumentation des (bzw.
 der) Programme(s) selber an.
 Dies, damit interessierte Programmierer/innen VSTENO unter Umständen klonen
 (oder forken:) und selber weiterentwickeln können.
\end_layout

\begin_layout Standard
Wie allgemein bekannt ist das Dokumentieren so ein bisschen das Stiefkind
 des/der Programmierer/in: Es wird in der Regel erst ganz am Schluss erledigt
 - wenn das Progamm (endlich!) läuft und man weder Zeit noch wirklich Lust
 hat, 
\begin_inset Quotes eld
\end_inset

das alles auch noch aufzuschreiben
\begin_inset Quotes erd
\end_inset

.
 Ausserdem kann es gut sein, dass gewisse Programmteile bereits vor Monaten
 geschrieben wurden - und nun, wo man sie dokumentieren sollte, weiss man
 selber nicht mehr so genau, was man damals eigentlich so alles programmiert
 hat, und muss sich deshalb selber wieder in alten Code reinknien (von dem
 man, wie gesagt, überhaupt schon froh ist, dass er läuft:)
\end_layout

\begin_layout Standard
Anyway: Ich bin keine Ausnahme von der Regel und berufe mich deshalb auf
 eine weitere Programmierregel: my code is my documentation ...
 ! Natürlich ist das die Billig-Lösung, aber sie ist so schlecht nicht:
 Tatsächlich habe ich im Laufe der Entwicklung von VSTENO den Quellcode
 reichlich dokumentiert.
 Anhand der eingefügten Kommentare sollte das Programm also grundsätzlich
 nachvollziehbar sein.
\end_layout

\begin_layout Standard
Nicht nachzuvollziehen sind aber vielleicht gewisse allgemeine Entscheidungen
 und Ansätze, die bei diesem Projekt spezifisch sind.
 Auf einige solche Aspekte möchte ich im Folgenden doch kurz eingehen, um
 wenigstens den Zugang zum Programm zu erleichtern.
\end_layout

\begin_layout Standard
Ebenfalls wichtig scheint mir zu dokumentieren, wie das Programm grundsätzlich
 lokal installiert und zum Laufen gebracht werden kann.
 Es existiert bis dato nämlich kein Installer und VSTENO verlangt einige
 Abhängigkeiten und Konfigurationen, die korrekt vorgenommen werden müssen,
 damit es läuft.
\end_layout

\begin_layout Standard
Grundsätzlich werde ich mich in allen Ausführungen sehr kurz und allgemein
 halten und als erstes auch nur das Minimum dokumentieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Weil es ja seit August schon eine Weile her ist, dass das Programm das letzte
 Mal dokumentiert wurde.
 Im Moment soll die Dokumentation vor allem möglichst schnell verfügbar
 sein.
\end_layout

\end_inset

 und weitere Aspekt später ergänzen.
\end_layout

\begin_layout Subsection*
Installieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Die folgenden Ausführungen geben nur einen groben Überblick.
 Für eine sehr detaillierte Anleitung kann das Dokument 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/docs/install_vsteno.txt"

\end_inset

 konsultiert werden.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn Sie VSTENO lokal installieren möchten, müssen einige Pakete (Abhängikeiten)
 installiert werden und die Datenbank vorgängig konfiguriert werden.
 Im folgenden gehe ich davon aus, dass Sie grundsätzlich mit der Installation
 von Paketen vertraut sind (wie z.B.
 sudo apt-get install <paketname> unter Debian
\begin_inset Foot
status open

\begin_layout Plain Layout
VSTENO wurde unter Trisquel, einem Debian-Abkömmling, entwickelt.
\end_layout

\end_inset

 oder anderen Paketmanagern auf anderen Disktributionen).
 Ich werde mich deshalb auf die Angabe der Pakete beschränken, die installiert
 werden müssen:
\end_layout

\begin_layout Enumerate
Apache-Webserve
\end_layout

\begin_layout Enumerate
PHP
\end_layout

\begin_layout Enumerate
mySQL (ebenfalls nützlich: MySQL Workbench)
\end_layout

\begin_layout Enumerate
hunspell
\end_layout

\begin_layout Standard
Klonen Sie anschliessend die Programme VSTENO und VPAINT (sowie verwendete
 Libraries wie paper.js und phpSyllable):
\end_layout

\begin_layout Enumerate
git clone https://github.com/marcelmaci/vsteno
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Verzeichnis des Webservers (vermutlich /var/www/html).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Konfigurieren Sie die Datenbank:
\end_layout

\begin_layout Enumerate
Legen Sie einen Datenbankbenutzer an
\end_layout

\begin_layout Enumerate
Tragen Sie die Zugangsdaten in den PHP-Quellcode ein (Datei dbpw.php)
\end_layout

\begin_layout Enumerate
Erstellen Sie die leeren Datanbank-Tables (kann einfach erreicht werden,
 indem die Datei init_db.php im Browser aufgerufen wird)
\end_layout

\begin_layout Standard
Wenn Sie nun localhost/vsteno/php/input.php im Browser aufrufen, sollten
 Sie das Eingabe-Formular von VSTENO sehen.
 Wenn dies der Fall ist, läuft das Programm - allerdings enhält es noch
 keine linguistischen Daten.
 
\end_layout

\begin_layout Enumerate
Legen Sie ein VSTENO-Benutzerkonto an (leer) und wählen Sie das Modell custom.
\end_layout

\begin_layout Enumerate
Holen Sie sich die Definitionen für das System Stolze-Schrey 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Kopieren Sie Header, Font und Rules in die Datenbank (nutzen Sie hierfür
 die Links zu den Texteditoren: Header, Zeichen, Regeln).
\end_layout

\begin_layout Enumerate
Loggen Sie sich mit einem Datenbankprogramm (mySQL Workbench) in die Datenbank
 ein:
\end_layout

\begin_deeper
\begin_layout Enumerate
öffnen Sie die Table models
\end_layout

\begin_layout Enumerate
tragen Sie folgende Werte ein: user_id = 99999, name = DESSBAS
\end_layout

\end_deeper
\begin_layout Standard
Loggen Sie sich aus, schliessen Sie den Browser und starten Sie das Ganze
 neu.
 Mit etwas Glück funktioniert's ...
 ! ;-)
\end_layout

\begin_layout Subsection*
VSTENO
\end_layout

\begin_layout Standard
Im Folgenden einige Hinweise zu VSTENO:
\end_layout

\begin_layout Itemize
VSTENO wurde ausschliesslich in PHP (ohne JavaScript
\begin_inset Foot
status open

\begin_layout Plain Layout
Einzige Ausnahme ist die Deaktivierung des Tabulator-Events für den Texteditor
\end_layout

\end_inset

) programmiert.
\end_layout

\begin_layout Itemize
Das Verzeichnis php/ enthält nicht nur den Quellcode sondern auch die Webseite
 von VSTENO
\begin_inset Foot
status open

\begin_layout Plain Layout
Wer also nur den Programmcode möchte, muss diesen von der Webseite trennen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Sämtlicher Quellcode von VSTENO befindet sich innerhalb des Verzeichnisses
 php/.
\end_layout

\begin_layout Itemize
VSTENO verwendet die Bibliothek phpSyllable, die sich im Verzeichnis ../phpSyllabl
e/ befindet.
\end_layout

\begin_layout Standard
Alles Übrige sollte ziemlich selbsterklärend sein.
\end_layout

\begin_layout Subsection*
VPAINT
\end_layout

\begin_layout Itemize
VPAINT wurde in PaperScript programmiert, d.h.
 JavaScript unter Verwendung der Bibliothek paper.js.
\end_layout

\begin_layout Itemize
Sämtlicher Code (auch der von paperl.js) befindet sich im Verzeichnis ../js/
\end_layout

\begin_layout Itemize
Das Skript buildjs.sh fügt alle Programmteile von VPAINT zu einem einzigen
 File zusammen
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich wollte den Quellcode einigermassen überschaubar aufteilen und die Möglichkei
t haben, Lizenzvermerke automatisiert einzufügen, deshalb die Aufteilung
 und das Skript.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Auch hier sollte der Rest selbsterklärend sein.
\end_layout

\begin_layout Subsection*
JSON & Co
\end_layout

\begin_layout Standard
VSTENO ist eine fröhliche Import-Export-Escape-Hölle ...
 :-) Mit anderen Worten: Da zwei Programmiersprachen, eine Datenbank, HTML-Code,
 REGEX und auch die Shell verwendet wird, müssen die Daten zum Teil mehrmals
 von einer Umgebung in eine andere überführt, konvertiert und escaped werden.
\end_layout

\begin_layout Standard
Während das Escaping mit Standard-Funktionen erledigt werden kann, war der
 export der linguistischen Daten von PHP zu JS etwas speziell und soll deshalb
 hier kurz erläutert werden:
\end_layout

\begin_layout Itemize
An Anfang lagen die Daten von VSTENO innerhalb von PHP als (associative)
 arrays vor.
\end_layout

\begin_layout Itemize
VPAINT definierte seine eigenen Datenstrukturen
\begin_inset Foot
status open

\begin_layout Plain Layout
Es war ja vorgesehen, die SE1 zu entfernen und die SE2 komplett neu zu gestalten.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Mit der Idee der Rückwärtskompatibilität wurde ein Export von PHP zu JS
 realisiert:
\end_layout

\begin_deeper
\begin_layout Itemize
in PHP wird eine mit JS kompatible Objekt-Datenstruktur definiert
\begin_inset Foot
status open

\begin_layout Plain Layout
siehe export_se1_data_to_editor.php.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
die Datenstruktur wird mit JSON exportiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Das PHP-Objekt wird 
\begin_inset Quotes eld
\end_inset

stringified
\begin_inset Quotes erd
\end_inset

 eine JS-Variablen zugwiesen, die direkt in die HTML-Seite von VPAINT geschriebe
n wird; von dort verwendet Sie VPAINT wie eine normale Variable.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Der umgekehrte Weg, also von JS zu PHP, sollte in der SE1 rev1 folgendermassen
 laufen:
\end_layout

\begin_deeper
\begin_layout Itemize
VPAINT exportiert die Daten ins eigenen VSTENO-Format (ASCII-Text, der vom
 Parser von VSTENO geparst werden kann).
\end_layout

\begin_layout Itemize
Um die Datenbank-Routinen nicht nochmals neu schreiben zu müssen, kreiiert
 VPAINT eine Formular-Seite, die genau gleich aussieht wie edit_font.php
 und die zu schreibenden Daten direkt enthält).
\end_layout

\begin_layout Itemize
Von der Datenbank aus kann VSTENO die Daten wieder lesen und parsen, sodass
 sie wieder im ursprünglichen Format der (associative) arrays vorliegen.
\end_layout

\end_deeper
\begin_layout Standard
Der Datenfluss von VSTENO zu VPAINT und zurück zu VSTENO ist also gewissermassen
 zirkulär: er beschreitet andere Wege und kann auch nicht umgekehrt werden
 (JSON-Export funktioniert nur von PHP->JS; ASCII-Export funktioniert nur
 von JS->DB->PHP; unmöglich ist also JSON: JS->PHP oder ASCII: DB->JS).
\end_layout

\begin_layout Standard
Für die SE2 war (ist) vorgesehen sämtliche Import/Export von und zu der
 Datenbank sowohl von PHP als auch von JS aus mit JSON zu lösen.
\end_layout

\begin_layout Subsection*
PARSER
\end_layout

\begin_layout Standard
Der ASCII-Parser von VSTENO (von dem im vorherigen Kapitel die Rede war)
 befindet sich in parser.php und ist im Wesentlichen eine Abfolge von REGEX-Patte
rn, mit denen die ASCII-Daten aufgeschlüsselt und in Variablen geschrieben
 werden.
\end_layout

\begin_layout Standard
Für den Export der Daten von PHP zur Datenbank werden die Daten dann gemäss
 der Formelsyntax von VSTENO zusammengefügt.
\end_layout

\begin_layout Subsection*
DATENBANK
\end_layout

\begin_layout Standard
Die Datenbank enthält folgende Tables:
\end_layout

\begin_layout Itemize
users: Benutzerdaten (login, passwort, name, email etc.)
\end_layout

\begin_layout Itemize
models: Definitionen für Stenografische Systeme (header, font, rules; die
 Modelle haben einen Namen und sind mit einer user_id verknüpft)
\end_layout

\begin_layout Itemize
Wörterbücher:
\end_layout

\begin_deeper
\begin_layout Itemize
purgatorium: enthält Wörter, die markiert wurden und reviewed werden müssen.
\end_layout

\begin_layout Itemize
elysium: enthält Ausnahmen (STD-, PRT-Formen)
\end_layout

\begin_layout Itemize
olympus: enthält regelmässige, richtige Wörter (die zum Überprüfen des Modells
 verwendet werden können)
\end_layout

\end_deeper
\begin_layout Standard
Die Tables users und models werden nur ein Mal für alle Nutzer angeleget.
 Die Tables purgatorium, elysium und olympus werden für jeden Nutzer individuell
 angelegt.
 Der Table name ergibt sich dabei aus der user_id der Benutzers plus den
 Anfangsbuchstaben der Table:
\end_layout

\begin_layout Itemize
E = elysium
\end_layout

\begin_layout Itemize
P = purgatorium
\end_layout

\begin_layout Itemize
O = olympus
\end_layout

\begin_layout Standard
Ausserdem wir zwischen einem Standard und einem Custom-Modell unterschieden:
\end_layout

\begin_layout Itemize
Z = standard
\end_layout

\begin_layout Itemize
X = custom
\end_layout

\begin_layout Standard
Hier ein paar Beispiele für Table-Namen:
\end_layout

\begin_layout Itemize
XE0000008: custom Wörterbuch Elysium der user_id 8
\end_layout

\begin_layout Itemize
ZP0000001: standard Wörterbuch Purgatorium der user_id 1
\end_layout

\begin_layout Subsection*
SUPERUSER
\end_layout

\begin_layout Standard
In VSTENO gibt es Standard-Nutzer (privilege level 1) und Superuser (privilege
 level 2).
 Standard-Nutzer können nur custom Wörterbücher beschreiben.
 Superuser können alle Tables beschreiben.
 VSTENO bietet keine erweiterten Funktionen zur Nutzerverwaltung: Nutzer
 können nur 1x angelegt werden.
 Danach kann das Passwort und andere Nutzerdaten nicht mehr geändert werden.
 Solche Änderungen (z.B.
 die Erhöhung des privilege levels müssen deshalb von Hand in der Datenbank
 vorgenommen werden).
\end_layout

\begin_layout Subsection*
SESSION
\end_layout

\begin_layout Standard
Die Session-Variable wird von VSTENO rege genutzt.
 Sämtliche benutzten Daten sind aus session.php ersichtlich.
 Die Variable können auch via Inline-Option-Tags verändert werden
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Lizenzen & Copyrights
\end_layout

\begin_layout Standard
VSTENO wird unter der GPL-License veröffentlicht und ist somit Freie Software.
 Das Programm darf also kopiert, verändert, weiterverbreitet und auch kommerziel
l genutzt werden, sofern die Bedingungen der GPL-License beachtet werden.
 Hierzu gehört insbesondere das Copyleft: Wird das Programm verändert und
 kommerziell genutzt, so muss auch das veränderte Programm als Freie Software
 unter der GPL herausgegeben und dessen Quellcode veröffentlicht werden.
 Damit soll verhindert werden, dass VSTENO durch irgendjemanden 
\begin_inset Quotes eld
\end_inset

vereinnahmt
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

unfrei
\begin_inset Quotes erd
\end_inset

 gemacht werden kann.
 VSTENO soll auch in Zukunft frei bleiben und jegliche Entwicklung an VSTENO
 soll dem ursprünglichen Projekt vollumfänglich zugute kommen.
\end_layout

\begin_layout Standard
Im Folgenden werden nun die für VSTENO gültigen Lizenzen in ihrer Kurzfassung
 publiziert.
 Nebst den allgemeinen Bestimmungen der GPL sind im Falle von VSTENO einige
 zusätzliche Präzisierungen nötig.
 Diese betreffen stenografische Modelle, Datenbanken, Dokumentationen, zusätzlic
he verwendete Programme und Bibliotheken und schliesslich auch Dokumente
 (Erzeugnisse), die mit VSTENO erstellt werden.
\end_layout

\begin_layout Subsection*
Grundlizenz (GPL)
\end_layout

\begin_layout Standard
Die GPL bildet die Grundlizenz von VSTENO.
 Sie ist für den selbst entwickelten Kernteil des Programmes, aber auch
 für das Gesamtprojekt (mit linguistischen Modellen, Datenbanken und Bibliotheke
n) gültig:
\end_layout

\begin_layout Quotation
VSTENO - Vector Steno Tool with Enhanced Notational Options
\end_layout

\begin_layout Quotation
(c) 2018-2019 - Marcel Maci (m.maci@gmx.ch)
\end_layout

\begin_layout Quotation
This program is free software: you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation, either version 3 of the License, or (at your option)
 any laterversion.
\end_layout

\begin_layout Quotation
This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
\end_layout

\begin_layout Quotation
You should have received a copy of the GNU General Public License along
 with this program.
 If not, see <http://www.gnu.org/licenses/>.
\end_layout

\begin_layout Standard
Dies Grundlizenz umfasst sämtliche Programmteile von VSTENO, also insbesondere
 auch VPAINT: Wann immer von VSTENO die Rede ist, so ist VPAINT mitgemeint.
\end_layout

\begin_layout Subsection*
Modelle
\end_layout

\begin_layout Standard
Stenografische Modelle sind eine formalisierte, strukturierte Sammlung (Sections
/SubSections, Wenn-Dann-Konstrukte, Verzweigungen, Zuweisen von Variablen
 etc.) von Regeln und Anweisungen, mithilfe derer ein stenografisches System
 umgesetzt werden kann.
 VSTENO fungiert in diesem Fall als Interpreter, der diese Regeln und Anweisunge
n abarbeitet.
 Mit anderen Worten: Modelle können selber als 
\begin_inset Quotes eld
\end_inset

Programm
\begin_inset Quotes erd
\end_inset

 betrachtet werden und werden somit nicht als 
\begin_inset Quotes eld
\end_inset

Daten
\begin_inset Quotes erd
\end_inset

 von VSTENO, sondern als 
\begin_inset Quotes eld
\end_inset

Teilprogramme
\begin_inset Quotes erd
\end_inset

 von VSTENO behandelt, die ebenfalls unter die (gleiche) GPL fallen.
\end_layout

\begin_layout Standard
Dies bedeutet, dass sämtliche Modelle, die mit VSTENO (neu) erstellt oder
 (in geänderter oder unveränderter Form) verwendet werden, ebenfalls unter
 der GPL und mit den entsprechenden Hinweisen (Veröffentlichung der Lizenz
 und Angabe des/der Autor/in) publiziert werden müssen.
 Die Auslegung des Copylefts ist in diesem Punkt also sehr strikt: Sämtliche
 Stenografie-Systeme, die mit VSTENO umgesetzt werden, müssen ihrerseits
 frei sein.
 Diese Ergänzung betrifft die öffentliche (u.U.
 auch kommerzielle) Nutzung solcher Modelle (die private Nutzung und Umsetzung
 von Stenografie-Systemen ist frei).
\end_layout

\begin_layout Subsection*
Datenbank
\end_layout

\begin_layout Standard
Die Datenbanken von VSTENO enthalten einerseits Nutzer/innen-Daten (Passwort,
 Login etc.), andererseits Daten, die in Zusammenhang mit den Modellen stehen
 (
\begin_inset Quotes eld
\end_inset

unregelmässige
\begin_inset Quotes erd
\end_inset

 Wörter, die speziell abgearbeitet werden müssen).
\end_layout

\begin_layout Standard
Nutzer/innen-Daten sind von den folgenden Einschränkungen ausgenommen: Diese
 Daten unterliegen dem Datenschutz.
 Sie müssen (und sollen) nicht publiziert werden!
\end_layout

\begin_layout Standard
Die Daten, welche im Zusammenhang mit den verwendeten Modell stehen (insbesonder
e aus Olympus, Elysium, Purgatorium) werden analog zu den Modellen nicht
 als 
\begin_inset Quotes eld
\end_inset

Daten
\begin_inset Quotes erd
\end_inset

 sondern als 
\begin_inset Quotes eld
\end_inset

Teil des Programmes
\begin_inset Quotes erd
\end_inset

 betrachtet: Tatsächlich kann jeder Datenbankeintrag als zusätzliche Regel
 eines Modells verstanden werden (Wenn-Dann-Konstrukt mit ganzen Wörtern
 statt Wortteilen).
 In diesem Sinne unterliegen auch diese Teile der Datenbank der GPL und
 müssen zusammen mit dem Modell publiziert werden.
 
\end_layout

\begin_layout Subsection*
Dokumentationen
\end_layout

\begin_layout Standard
Sämliche Dokumentationen (PDF, HTML
\begin_inset Foot
status open

\begin_layout Plain Layout
Webseite, was nicht Teil des Programmes ist.
\end_layout

\end_inset

, TXT) von VSTENO unterliegen der Free Documentation License (FDL
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://static.fsf.org/nosvn/directory/fdl-1.3-standalone.html"

\end_inset


\end_layout

\end_inset

):
\end_layout

\begin_layout Quotation
Copyright (C) 2018-2019 Marcel Maci 
\end_layout

\begin_layout Quotation
Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.3 or any later
 version published by the Free Software Foundation; with no Invariant Sections,
 no Front-Cover Texts, and no Back-Cover Texts.
 A copy of the license is included in the section entitled "GNU Free Documentati
on License".
\end_layout

\begin_layout Subsection*
Bibliotheken
\end_layout

\begin_layout Standard
VSTENO verwendet zwei Bibliotheken: (1) paper.js (VPAINT) und (2) phpSyllable
 (VSTENO).
 Beide verwenden die MIT-Lizenz, die mit der GPL kompatibel ist.
 Im Folgenden werden die Lizenzen im originalen Wortlaut wiedergegeben.
\end_layout

\begin_layout Subsubsection*
PAPER.JS
\end_layout

\begin_layout Quotation
Copyright (c) 2011, Juerg Lehni & Jonathan Puckey http://lehni.org/ & http://jona
thanpuckey.com/ All rights reserved.
 
\end_layout

\begin_layout Quotation
Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Quotation
The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Quotation
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
 
\end_layout

\begin_layout Subsection*
phpSyllable
\end_layout

\begin_layout Quotation
Copyright © 2011-2019 Martijn van der Lee.
 MIT Open Source license applies.
\end_layout

\begin_layout Quotation
Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Quotation
The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Quotation
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
\end_layout

\begin_layout Standard
Die MIT-Lizenz ist eine so genannte 
\begin_inset Quotes eld
\end_inset

permissive
\begin_inset Quotes erd
\end_inset

 Lizenz (ohne Copyleft), die mit der GPL kompatibel ist - jedoch nicht umgekehrt.
 Aus diesem Grund fallen diese Programmteile im Zusammenhang mit VSTENO
 ebenfalls (zusätzlich) unter die GPL.
\end_layout

\begin_layout Subsection*
hunspell
\end_layout

\begin_layout Standard
Hunspell
\begin_inset Foot
status open

\begin_layout Plain Layout
https://hunspell.github.io/
\end_layout

\end_inset

 wird von VSTENO zur linguistischen Analyse genutzt.
 Hierzu muss hunspell bereits auf dem System installiert sein.
 Der Aufruf erfolgt via Shell.
 Aus diesem Grund ist hunspell nicht Teil von VSTENO.
\end_layout

\begin_layout Subsection*
eSpeak
\end_layout

\begin_layout Standard
eSpeak
\begin_inset Foot
status open

\begin_layout Plain Layout
http://espeak.sourceforge.net/
\end_layout

\end_inset

 wird von VSTENO zur phonetischen Transkription genutzt.
 Hierzu muss eSpeak auf dem System installiert sein.
 Der Aufruf erfolgt via Shell.
 Aus diesem Grund ist eSpeak nicht Teil von VSTENO.
\end_layout

\begin_layout Subsection*
Erzeugnisse
\end_layout

\begin_layout Standard
Erzeugnisse sind Dokumente, die mit VSTENO und einem entsprechenden Modell
 & Datenbank erstellt werden (z.B.
 Stenografie-Lektüren).
 Die Erstellung und Nutzung solcher Erzeugnisse zu privaten Zwecken ist
 frei und an keine Einschränkungen gebunden.
 Im Fall einer öffentlichen Nutzung müssen sämtliche Copyrights gewahrt
 werden, indem folgender Hinweis an einer beliebigen Stelle im Dokument
 (z.B.
 Impressum) erscheint:
\end_layout

\begin_layout LyX-Code
Erstellt mit Freier Software.
\end_layout

\begin_layout LyX-Code
VSTENO (www.vsteno.ch)
\end_layout

\begin_layout Standard
Der Hinweis muss zusätzlich versehen sein mit: Copyrightvermerk, Jahr und
 Namen des/der Autors/en sowohl des Programmes als auch des Modells.
 Weitere nützliche Angaben (wie Programmversion und genaue Angabe des verwendete
n Modells), die es dem/der Leser/in erleichtern, transparent nachzuvollziehen,
 wie das Dokument erstellt wurden, sollen - wenn möglich - ebenfalls aufgeführt
 werden.
 Gleiche Angaben können zusammengefasst werden, damit eine kompaktere und
 ästhetischere Darstellung möglich ist, z.B.
\end_layout

\begin_layout LyX-Code
Erstellt mit Freier Software.
\end_layout

\begin_layout LyX-Code
VSTENO (www.vsteno.ch)
\end_layout

\begin_layout LyX-Code
(c) 2018-2019 Marcel Maci
\end_layout

\begin_layout Standard
als Kurzfassung oder
\end_layout

\begin_layout LyX-Code
Erstellt mit Freier Software.
\end_layout

\begin_layout LyX-Code
VSTENO 0.1 (www.vsteno.ch)
\end_layout

\begin_layout LyX-Code
Stolze-Schrey Grundschrift (DESSBAS)
\end_layout

\begin_layout LyX-Code
(c) 2018-2019 Marcel Maci
\end_layout

\begin_layout Standard
mit zusätzlichen Angaben zur Programmversion und zum verwendeten Modell.
\end_layout

\begin_layout Subsection*
Lizenzkonflikte und Relizenzierung
\end_layout

\begin_layout Standard
Die Lizenzierung unter der GPL erfolgt hauptsächlich aus zwei Gründen: (1)
 es ist sichergestellt, dass Programmcode (und weitere Teile von VSTENO
 wie stenografische Modelle etc.) grundsätzlich frei verwendet werden können
 und (2) es wird ausgeschlossen, dass VSTENO von irgend jemandem 
\begin_inset Quotes eld
\end_inset

vereinnahmt
\begin_inset Quotes erd
\end_inset

 (d.h.
 unfrei gemacht) und zum Beispiel in kommerziellen, proprietären Produkten
 verwendet werden kann, ohne allfällige weitere Entwicklungsarbeit daran
 (und insbesondere den Quellcode) offen zu legen.
\end_layout

\begin_layout Standard
In den meisten Fällen bedeutet dies für freie Software-Lizenzen ohne Copyleft
 (z.B.
 MIT, BSD), dass nur dann Teile aus VSTENO übernommen können, wenn das daraus
 entstehende Projekt inskünftig unter der GPL herausgegeben wird (weil besagte
 Lizenzen aufgrund des nicht vorhandenen Copylefts den obgenannten Punkt
 2 missachten bzw.
 nicht sicherstellen).
 Dies mag für die Anhänger/innen dieser Lizenzen (die im übrigen durchaus
 ihre Berechtigungen haben) zwar bedauerlich sein, dennoch halte ich als
 Autor von VSTENO ganz klar am Copyleft fest.
 Ausserdem erachte ich das Problem als nicht so gravierend, da aufgrund
 der (wenngleich nur einseitigen) Kompatibilität der Lizenzen hier immerhin
 die Möglichkeit der Lizenzierung unter der GPL besteht, um ein entsprechendes
 Projekt weiterzuführen (wodurch also der Punkt 1 - wenn auch in etwas eingeschr
änkterer Form - sichergestellt ist).
\end_layout

\begin_layout Standard
In anderen Fällen ist die GPL - als sehr eng gefasste Lizenz - jedoch grundsätzl
ich inkompatibel, d.h.
 es besteht keine Möglichkeit, Code aus zwei (oder mehreren) Projekten zusammenz
uführen und daraus ein neues Projekt mit einer konfliktfreien Lizenz zu
 erstellen.
 Dies trifft konkret auf die APL (AROS Public License) zu, die für das freie
 Betriebssystem AROS (eine Nachprogrammierung von AmigaOS auf Amiga Computern)
 verwendet wird.
 Als grosser Amiga-Fan - der zu Weihnachten 1987 einen Amiga 500 geschenkt
 bekam und von der Begeisterung für diese Computer bis heute nicht losgekommen
 ist
\begin_inset Foot
status open

\begin_layout Plain Layout
zumal voraussichtlich 2019 mit der so genannten Vampire V4 Standalone erstmals
 nach über 25 Jahren wieder ein wirklich als solcher zu bezeichnender, 
\begin_inset Quotes eld
\end_inset

neuer Amiga
\begin_inset Quotes erd
\end_inset

 herauskommt, siehe hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.apollo-accelerators.com/"

\end_inset

 
\end_layout

\end_inset

 - ist mir dies ein Dorn im Auge.
 Gerade der Fall Amiga hat überdeutlich gezeigt, dass einschränkende und
 proprietäre Lizenzen, verbunden mit den daraus folgenden Rechtsstreitigkeiten
 und der Unmöglichkeit, bestehende Software zu übernehmen und weiterzuentwickeln
, massgeblich mitverantwortlich waren und sind für den Untergang und die
 Blockierung dieser Plattform seit spätestens 1996! Freie Software sollte
 gerade das Gegenteil sein, d.h.
 den freien Austausch ermöglichen.
 Dies haben auch die Gründer von AROS erkannt und die APL unter Punkt 3.2.
\begin_inset Foot
status open

\begin_layout Plain Layout
http://aros.sourceforge.net/license.html
\end_layout

\end_inset

 mit dem Hinweis versehen, dass der Quellcode zur Verfügung gestellt werden
 muss.
 Da dies das Copyleft aus Punkt 2 in seinem wichtigsten Punkt (und somit
 ausreichend) wahrt, ist die Inkompatibilität von GPL und APL ein Stolperstein,
 der aus meiner Sicht weder sein soll, noch muss.
\end_layout

\begin_layout Standard
In diesem Sinne erhält VSTENO diesen zusätzlichen Relizensierungs-Hinweis:
 Sämtliche Teile von VSTENO dürfen in ein unter der APL stehendes Projekt
 übernommen und unter der APL relizensiert werden.
 Das Relizensierungsrecht wird jedoch nur eingeschränkt verliehen: (1) Einerseit
s gilt es nur für die einmalige Relizenzierung unter der APL, nicht jedoch
 für den Fall, dass ein unter der APL stehendes und Teile von VSTENO enthaltende
s Projekt ein weiteres Mal unter einer anderen Lizenz herausgegeben wird
\begin_inset Foot
status open

\begin_layout Plain Layout
Soweit ich verstehe, ist die Relizenzierung von APL-Code unter einer anderen
 Lizenz grundsätzlich nicht möglich (ausser die Autoren stimmen dem zu),
 dennoch soll diese Einschränkung hier sicherheitshalber explizit festgehalten
 werden: Jegliche Relizenzierung unter einer Lizenz ohne Copyleft ist nicht
 in meinem Sinne.
 Ob man (ich) eine Relizenzierung erlauben aber gleichzeitig einschränken
 kann, ist eine rechtliche Frage, die mein Fassungsvermögen übersteigt.
 Deshalb hier einfach die generelle Anmerkungen, was bei einer Relizenzierung
 erlaubt sein soll und was nicht.
\end_layout

\end_inset

 und (2) andererseits, gilt die Relizensierung ausschliesslich für die APL
 (und ausdrücklich nicht für andere Software-Lizenzen).
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Bei allfälligen Lizenzkonflikten besteht aber jederzeit die Möglichkeit,
 mich zu kontaktieren (m.maci@gmx.ch) und allfällige Zusatzklauseln zu vereinbaren
, um die Konflikte bereinigen.
\end_layout

\end_inset

.
 Das Relizensierungsrecht ist unabhängig von der Prozessorarchitektur (m68k,
 x86, ppc etc.), auf denen AROS läuft (und gilt somit für sämtliche aktuellen
 und zukünftigen Architekturen).
 Im Sinne der Einfachheit, wird dieses Relizensierungsrecht nur an dieser
 Stelle (und nicht in sämtlichen Projektteilen) aufgeführt.
\end_layout

\begin_layout Subsection*
Schluss
\end_layout

\begin_layout Standard
Diese Dokumentation entstand wie immer mit einem relativ knappen Zeitbudget.
 Ich hoffe, dass trotzdem die wesentlichsten Aspekte abgedeckt werden konnten.
 Bei Unklarheiten stehe ich gerne zur Verfügung (m.maci@gmx.ch).
 
\end_layout

\end_body
\end_document

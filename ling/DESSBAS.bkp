#BeginSection(header)
	DESSBAS - Model for VSTENO (Grundschrift Stolze-Schrey, Deutsch)
    	(c) 2018-2021  Marcel Maci
	
	This program is free software: you can redistribute it and/or modify
    	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
    	(at your option) any later version.

    	This program is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.

    	You should have received a copy of the GNU General Public License
    	along with this program.  If not, see <https://www.gnu.org/licenses/>.
	
	Special thanks go to Yvonne Reith for external corrections which
	helped to improve the model substantially.
	
	#BeginSubSection(session)
	"license" := "<p>DESSBAS - model for VSTENO (Grundschrift Stolze-Schrey, Deutsch)<br>
    	(c) 2018-2021  Marcel Maci</p>
	
	<p>This program is free software: you can redistribute it and/or modify
    	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
    	(at your option) any later version.</p>

    	<p>This program is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.<p>

    	<p>You should have received a copy of the GNU General Public License
    	along with this program.  If not, see www.gnu.org/licenses.<p>
	
	<p>Special thanks go to Yvonne Reith for external corrections which 
	helped to improve the model substantially.</p>
	";
	"release_notes" := "
	<p>Based on:</p>
	<p>[1] Jakob Züllig, Emil Zürcher, "Stenografie Fortbildung: einmal ist keinmal", Verlag des Schweizerischen Stenografenverbandes Stolze/Schrey, Wetzikon ZH 2010.</p>
	<p>[2] "Interpretation der Systemurkunde", Stolze/Schrey nach Systemurkunde 1967, Verlag des Schweizerischen 
	Stenografenverbandes Stolze/Schrey, Wetzikon ZH 2013.
	</p>
	<p>This model was further improved using transcriptions of different novels (mainly from Friedrich Glauser) and articles which where corrected manually starting in February 2019.</p>
	<p>The model produces >99% of correct transcriptions an can be considered an official release.</p>
	<p>This file was originally generated as export from old parser, then 
	later completed with manual additions to form DESSBAS (DD=Deutsch, 
	SS=Stolze-Schrey, BAS=Grundschrift).</p> 
	
	<p>Model is based on SE1 rev0 exclusively. Tokens were optimized for an 
	inclination of 60 degrees.</p>
	
	<p>In December 2019 the optional variants HF1 and HF2 were added. The new rules introduce additional abbreviations for shorthand used in the so called 'Eilschrift' (2nd level) and 'Redeschrift' (3rd level). These abbreviations are based on:</p>
	<p>[3] Hanspeter Frech, "Die superschnelle Geheimschrift. Gekürzte Stenografie", Schweizerischer Stenografenverband Stolze/Schrey (SSV), Wetzikon, November 2017.</p>
	<p>HF1 means standard abbreviations (leaving endings without modification), HF2 means extreme abbreviations (that affect also endings, for example: trendige Dinge => trendig Dinge; wichtiges Dossier => wichtig Dossier). Additionally, it is planned to add the variant MAC which adds rules for abbreviations that I use personally. In combination with HF1 and HF2 this leads to a personal, individualised and non-standard shorthand system.</p>  
	";

	// Schreibweise:
	// = ein Zeichen am Wortanfang (z.B. [F=]) oder Wortende (z.B. [=NG])
	// ^ ein höher gestelltes Zeichen (z.B. [^CH]) oder Variante vor höhergestelltem Zeichen (z.B. [AR5^])
	// _ ein tiefer gestelltes Zeichen (z.B. [_N])
	// @ ein Verbundzeichen (z.B. [@L] oder [@R], die mit anderen Zeichen verbunden werden)
	// 0..9 bei runden Zeichen: Anknüpfpunkt (z.B. [@R6] = Zeichen R mit Anknüpfpunkt bei 6 Uhr, also im Fusspunkt)
	// # technische Zeichen (z.B. [#WS] = wide shadowed, eine weite, schattierte Verbindung, also ä im System 
	//   Stolze-Schrey; [#5] = spacer mit Abstand 5px)
	// +- Gross- oder Kleinschreibung bei Blockschriftzeichen (z.B. [A+] = grosses A, [A-] = kleines A)
	// & geschriebene Vokale oder Häkchen (z.B. [&I] oder [&E])
        // -1 bei Aufstrich-t: wie viel tiefer weitergeschrieben wird (z.B. [&T-1] in Verbindung mit [B])
	"copyright_footer" := "Erstellt mit Freier Software<br>VSTENO (www.vsteno.ch)<br>(c) 2018-2021 Marcel Maci";
		// model version
		"model_version" := "1.4";
		"required_version" := "0.3";
		"model_se_revision" := "0";
		"model_date" := "14/06/21";
		// options
		"model_option0_text" := "HF1";
		"model_option0_yesno" := "no";
		"model_option1_text" := "HF2";
		"model_option1_yesno" := "no";
		"model_option3_text" := "MM";
		"model_option3_yesno" := "no";
		"model_option6_text" := "VSP1"; // "vertical separate": separate very high words (example: Sentimentalität) 
		"model_option6_yesno" := "yes";
		"model_option7_text" := "VJN1"; // in combination with VSP1: join end and start token of separated word with a vertical dotted line
		"model_option7_yesno" := "no";
		"model_option8_text" := "ESP"; // separate words that finish by -e (nahekommen, Variétébühne, Höhepunkt etc.)
		"model_option8_yesno" := "yes";
		"model_option9_text" := "GB"; // filter out # in stage0 for texts coming from Project Gutenberg
		"model_option9_yesno" := "yes"; // activate this option by default
		// wide distance
		"token_distance_wide" := "17";
		// font
		"font_exportable_yesno" := "no";
		"font_importable_yesno" := "yes";
		"font_borrow_yesno" := "yes";
		"font_borrow_model_name" := "GESSBAS";
		"font_load_from_file_yesno" := "yes";
		"spacer_token_combinations" := "";
		"spacer_rules_list" := ""; 
		"spacer_vowel_groups" := "";
		
		// correct word width in layouted
		//"layouted_correct_word_width" := "yes";

		// use linguistical analysis
		"analysis_type" := "selected";
		// hyphenation (phpSyllable)
		"hyphenate_yesno" := "yes";
		"language_hyphenator" := "de";
		// composed words + affixes (hunspell)
		"composed_words_yesno" := "yes";
		"language_hunspell" := "de_CH";
		// generate affixes in composed words
		"affixes_yesno" := "yes";
		// set variables for filter option (not selected)
		"filter_out_prefixes_yesno" := "yes";
		"filter_out_suffixes_yesno" := "yes";
		"filter_out_words_yesno" := "yes";
		// disable phonetic analysis
		"phonetics_yesno" := "no";
		"language_espeak" := "de";
		"phonetic_alphabet" := "espeak";
		// define prefixes, suffixes and stems for hunspell
		"prefixes_list" := "in, kon, ge, zu, un, be, bei, ein, um, ur, anti, ver, inter, mit, ent, auf, ab, an, er, vor, wie?-?der, durch, ein, der, des, dem, her, ge-?gen, hin, zer, recht, sam-?men, un-?ter, aus, rück, da, nach, zwi-?schen, hin-?ten, hin-?ter, weg, ü-?ber, miss, dar, wei-?ter, los, lang, so, lieb, schief, scharf, statt, tief, wahr, weich, weis, wett, wohl, zwangs, fehl, fest, frei, gleich, kalt, kund, kurz, gut, nie-?der, wor?, m(?:ei|y)-?net, dei-?net, sei-?net, uns-?ret, eu-?ret, ih-?ret, jen, zwie, ob";
		"stems_list" := "gangen(?:e[rsnm]?)?, fähr, brochen, kannt, ra-?de(?:s-?te?)?[rsnm]?, höf, ständ, bun-?de-?n(?:e[nmrs]?)?, müt, schwenden, tüm, stöckig(?:e[srnm]?)?, nü-?t-?z, tei-?li-?g(?:e-?r(?:in(?:-?nen)?)?)?, sichts, nann-?t(?:e[rsnm]?)?, las-?se-?n(?:(?:e-?r)?e[rsnm]?)?, (?:[lg]eb-?nis(-?se[ns]?)?), heut, [Bb]lend, gin-?n, nom-?me-?n(?:e[rnsm]?)?, harm, [Ss]ehn, [Ss]uchts, [Ss]ekundar, [Ss]pr(?:u|ü)ng, [Kk]om-?mens, [Ss]a-?ge-?r(?:[sn]|in(?:-?en))?, [Kk]rä-?me-?rei-?(?:en)?, [Hh]a-?be-?r(?:s|in(?:-?nen)?)?, [Ee]m-?men, sil-?bi-?g(?:e[rsnm]?)?, schaun$, stehn$, gehn$, [Pp]fün-?der[sn]?, wärts, schlitz-?t(?:e[rstnm])?, backne[rsnm]?, ziehns?, sie-?ben-?zig, ge-?leits, Al-?ber-?tus, [Gg]r(?:e|ä)u-?el, (?:bor|worf)-?n(?:e[rsnm]?)?, [Ss]chnupfs?, rann-?t(?:e[rmsn]?)?, Si-?le-?nen?, nah-?men?, n(?:ü|u)-?-?tzi-?g(?:e[rsnm]?|e-?re[rsnm]?|s-?te[rsnm]?)?, bims, trags, lau-?fer, [Ll]üs-?ters?, [Bb]il-?lett?[se]?, tä-?gi-?g(?:e[rsnm]?)?, [Ss]chanks?, [Vv]e-?los?, [Ss]chand, [Kk]ri-?no-?li-?nen?, [Kk]in-?de, [Ll]um-?bal, Lo-?den, [Ll]ogen?, [Tt]y-?phus, [Cc]o-?ro-?na, [Pp]sy-?c-?ho, [Ss]e-?pi-?a, [Kk]am-?p-?fer, [Ss]pinn, [Ll]au-?da-?num, [Tt]he-?ma-?ta, wöh-?nungs, [Zz]ech, [Pp]ünkt-?chens?, [Aa]-?ze-?ton, [Kk]as-?ba, [Kk]a-?by-?len, [Gg]lan-?ze, [Dd]jur-?dju-?ra, [Nn]es-?te, [Kk]us-?kus, [Pp]f-?läs-?ter-?c-?hens?, [Bb]ar-?bo-?ren, [Aa]u-?res, [Kk]au-?fens, [Zz]i-?ban, [Ss]am-?met, [Bb]at-?na, [Bb]e-?du-?i-?nen, [Uu]n-?schulds?, [Ss]o-?uf, [Ff]es-?tungs, [Bb]ur-?nus, [Gg]e-?fun-?kels?, [Ss]chmähs?, [Tt]u-?c-?he, [Ll]äpp-?chens?, [Tt]o-?res, [Kk]a-?mil-?len, [Pp]ro-?s-?ze-?ni-?ums?";
		"suffixes_list" := "[kh]ei-?t(?:s|en)?, li-?ch(?:(?:e-?r)?(?:e[srn]?)?)?, nis(?:sen?)?, w(?:ie|o|ann|as|e[rnm]), lo-?s(?:(?:es)?(?:-t)?e[snmr]?)?, ba-?r(?:(?:st)?e[rnsm]?)?, sam(?:(?:st)e[rsnm]?)?, hin, her, so, sch(?:a|ä)f-?t(?:(?:s\|?|e-?[rn]?)(?:in-?(?:nen)?))?, un-?te-?r(?:(?:st)?e?[smnr]?), seits, chens?, seits, voll"; // use non caputuring groups! (?:)
		// do not treat these as separate words (block_list)
		//"block_list" := "der, den, dem";
		"filter_list" := "de[rsmn]s|";
		//"filter_list" := "|de[rsmn], de[rsmn]s|, de|";
		//"filter_list" := "\|de[rsmn], de[rsmn]s\|, (?<![Kk]rei-|[Bb]a-)de\|";
		//"filter_list" := "(?<![Kk]rei-)de\|";
		"title_text" := "Deutsch";
		"introduction_text" := "Grundschrift (Stolze-Schrey)";
	#EndSubSection(session)
	#BeginSubSection(analyzer)

		"^([Zz]u[-+|]?rück)(sank)" => "$1-$2"; // phpspell is doing really strange things ...
		"englü" => "en-glü"; // Erdenglück ... phpspell again totally à coté de la plaque ...
		"(?<!\|)-?(glücks?)$" => "|$1"; // idem

		"(?<!\|)-?(per-?so-?n(?:en)?)$" => "|$1"; // Frauensperson

		"^([Bb]in)\|(de)" => "$1-$2"; // Bindebänder

		"^([Mm]as-?ke)\|(ra-?d)" => "$1-$2"; // Maskeraden
		"^([Ww]al)\|(zer\+)(?!\|)" => "$1-$2|"; // Walzertänzer
		"^([Kk]o-?los-?se)\|um" => "$1-um"; // Kolosseum
		"^([Aa]t-?la-?s)(ein-?b)" => "$1|$2"; // Atlaseinbände
		"^([lL]e-?gen)\|(den)" => "$1-$2"; // legendenhaften
		"^([Dd]o)m\|(in-?go)" => "$1m$2"; // Domingo
		"^([Vv]er\+herr)\|(li)" => "$1#$2"; // verherrlichten

		"^([Ff]ehl)\+t'" => "$1t'"; // fehlt's (holy humbug ...)

		"^([Pp]ro-?be)(es-?s)" => "$1|$2"; // Probeessen
		"([Aa]f-?fen)\|(ar)\|(ti)" => "$1-$2-$3"; // affenartiger
		"([Bb]e-?te)\|(rin)" => "$1-$2"; // Beterinnen (computers are stupid ... :)
		"(Wer)\|(den)\|(ber)" => "$1-$2-$3"; // Werdenberg
		"([Nn]eu)-?e\|re" => "$1-er+e"; // neueren
		"([Pp]fer-?de)\|s$" => "$1s"; // Pferdes

		"([Gg]e)-?(r(?:ü|o)-ch)" => "$1+$2"; // Wohlgerüchen

		"([Ll]ie-bes)(?!\|)" => "$1|"; // Liebesangelegenheiten 

		"(?<!\|)#?([Ww]er)\|(den)\|d" => "|$1-$2-d"; // Geringerwerdenden

		"([Tt]au-?sen-?d)(ein|zwei|drei|vier|fünf|sechs|sie|acht|neun)" => "$1|$2"; // tausendachthundert

		"([Bb]e)-(rech-?t)" => "$1+$2"; // gleichberechtigt

		"([Cc]o-?ro-?na)-?(?!\|)" => "$1|"; // coronabedingt (not recognized by stems list! => why?)

		"([Ww]er)\|t" => "$1-t"; // Disziplinenwertungen (crazy word ...)
		
		"(^|=)([Ll]a)d-?ein" => "$1$2-de|in"; // Ladeinfrastruktur

		"([Uu]ni)\|(ver-?sal)" => "$1-$2"; // Universalwaffe
		"([Zz]o)o-?(lo)" => "$1-o-$2"; // Zoologe (wrong / incomplete hyphenation by phpsyllable)

		"([Ww]ei-?ter)\+" => "$1|";
		"([Aa]lt)-?(vor-?dern)" => "$1|$2"; // Altvordern
		
		// additional syllables
		"ebe(-?)n" => "e-be$1n";  // bug in phpSyllable: eben is not hyphenated!?
		"oder" => "o-der"; 	// same ...
		"^([Vv]i)a$" => "$1-a";
		"([Hh]y-gi)(e-n)" => "$1-$2";
		"([Ii])-?(ta-)(li)(e-n)" => "$1-$2-$3-$4";

		// probably, phpSyllable doesn't separate VCV at the beginning
		// because it doesn't want to separate just 1 vowel (would be ugly in a text)
		// so, it never separates the first vowel in that case
		// => therefore, correct that "bug" (feature;-) here in a more general way
		"([aeiouAEIOU]|ä|ö|ü|Ä|Ö|Ü)([bcdfghjklmnprstvwxz])([aeiouAEIOU]|ä|ö|ü|Ä|Ö|Ü)" => { "$1-$2$3", "[Ee]he\|(?:mann|frau|gat|gem)" };

		// hm ... must say that phpSyllable doesn't do a very reliable job ...
		// Ausweichthema for example: separation "Ausweich-thema" is NOT recognized ...
		// only possibility to patch this would be in the dictionary of phpSyllable
		// (which - if I'm right - is based on TEX)

		"([Uu]n)z-([aeiou])" => "$1+z$2"; // phpSyllable does that wrong ...
		"\|ge$" => "-ge"; 	// correct ge- prefix (recognized as word)

		"r\|t\'s" => "rt's";	// pressiert's (cleaning up some chaos produced by linguistical analyzer ...)
		"\|t'" => "t'"; // geh|t's
		"([Ww]eh)\|r" => "$1-r";

		// ending es
		"\|es$" => "-es";

		////////////////////////// new approach for affixes ge-, be-, -er- //////////////////////////////
		///////////// mark all er as affix and filter out "false positive" at the end //////////////////
		// be- and ge- must be done before -er (because of ber- ger-)
		// be-
		"(^|\|)([Bb]e)-(?!c-?k|t-?t|s-?s)" => { "$1$2+", "Be-?re-?si-?na", "[Bb]e-?go-?ni", "[Bb]e-?lu-?t-?sch-?i-?s-?ta-?n", "^[Bb]e-?ters?$", "^[Bb]e-?te-?rin(?:-?nen)?$", "^[Bb]e-?c-?ha(?:a|â)rs?", "^[Bb]e-?ni$", , "[Bb]e-?har(?:=|$)", "^[Bb]e-?au-?vais$" };
		"(\|[Bb]e)-(?!c-?k|t-?t|s-?s)" => "$1+";

		// ge-
		"^([Gg]e)-" => { "$1+", "[Gg]e-?par-?d", "^[Gg]e-?or-?ge$" };
		"(\|[Gg]e)-" => "$1+";

		//ein-ge (eingebrockt)
		"^([Ee]in)-(ge)-" => "$1+$2+";

		// -er-
		"([Ee]r)-" => { "$1+", "(?:^|\|)[Tt]er-?r", "[Ss]er-?bi", "Pier-?re", "[Vv]or.?he-ri", "[Mm]er-?gel", "^[Ee]r-?d[ei]", "[Ff]er-?di-?nan-?d", "[Vv]er-?ba-?l(?:e[snrm]?)?$", "^[Vv]er-?ve$", "^[Ss]er-?pen-?t", "^[Kk]er-?ra-?ta", "[Gg]u-?er-?rah", "^[Gg]-?u-?er-?bas?$", "^[Zz]er-?zo-?urs?$", "^[Kk]a-?ser-?n", "^[Ss]ter-?n", "^[Ii]n-?fer-?nos?$", "^[Jj]er-?maks?$", "^[Jj]er-?m-?o-?l-?a", "fer-?kels?$", "^[Ff]er-?ron-?ni", "^[Pp]ier-?rot", "^[Dd]e-?ro-?ze-?r[-+]?ays", "[Gg]u-?er[-+]?ri-?(?:e|è)-?re", "^[Aa]n[-+]?mer-?k", "^[Tt]e-?r-?pen-?ti-?n", "^[Gg]er-?hard" }; // Terrain, Serbien, Serpentinen
		"([Ee])-r" => { "$1r+", "[Ee]-?ro-?[st]", "[Bb]el-?ve-?de-?re", "[Aa]b-?ge-?ra-?c-?k", "Cha-?rak-?t-?e-?re", "Ve-?r[eo]-?na", "^E.rich$", "[Rr]e-?fe-?r[aie]", "[Tt]he-ra-p", "[Uu]n[-+]?ge-?r[-+]?ech", "[Vv]or.?he-ri", "ie-ru-?n-?g(?:s|en)?$", "[Ee]-?so-?te-?ri", "[Ss]chme-?ri-?ko", "[Ee]-?re-?mi-?t", "[Kk]o-?ni-?fe-?r", "[Vv]e-?ran-?d", "[Vv]e-?ri-?fi", "[Gg]a-?le-?e-?re", "Be[-+]?sche-?ru", "^[Mm]e-?ro-?u-?an", "^[Dd]je-?r-?id", "^[Tt]h?e-?re-?sa", "^[Bb]a-?ja-?de-?re", "^[Aa]l-?ge-?ri-?s-?c-?h", "^[Gg]u-?e-?rins?$", "^[Dd]e-?ro-?ze-?r[-+]?ays", "^[Mm]e-?ri-?no", "^[Dd]urch[-+|]?que-?r", "^[SS]e-?ra-?fi", "^[Aa]uf[-+]?ge[-+]?r", "^[Ii]n[-+]fe-?ri-?o-?r" }; // Ka-me-rad-schaft, Re-fe-rat ... Steno considers all this as affix (which, linguistically speaking, is completely wrong ...
		"^([Ii]n)-?(fer[-+]?n)" => "$1+$2"; // Inferno, infernalisch

		"-([bcdfghjklmnprstwxyzBCDFGHJKLMNPRSTWXYZ])er(\+|#)" => { "$1-er$2", "[Aa]-?ber", "[Cc]ha-?rak-?t-?e-?re", "[Gg]a-lan-t", "^[Cc]ant-er", "[Dd]ra-?per\+ie" }; // Schil-der+ung: reorganize syllabical structure ...
		"(Ü|ü)b-er\+" => "$1-ber+"; // recorrect über
		"(Ü|ü)b-er#" => "$1-ber+#"; // übervoll
		"(U|u)nt-er\+" => "$1n-ter+"; // recorrect unter
		//"erst" => "er+st"; // äusserst (eh l'horreur continue ...)
		"(?<!\|)#?(wer)\|(dung)" => "|$1-$2"; // Menschwerdung
		"^(Wer)\|(de)\|g" => "$1-$2-g"; // Werdegang
		"er(?!\+|st$|nt|n-t)" => { "er+", "(?:^|\|)[Tt]er", "[Ss]er-?bi", "Pier-?re", "Par-?ter-?re", "Re-?vers", "[Dd]es-?sert", "[Mm]er-?gel", "[Ff]er-?di-?nan-?d", "schwer$", "[Vv]er-?ba-?l(?:e[rsmn]?)?$", "^[Cc]lerks?$", "wer-dung", "[Ww]o\+fern", "[Pp]e-?r[-+]?i-?phe-?r", "^[Zz]er-?r-?t", "^[Aa]b-?der-?r-?ha-?man$", "^[Vv]er-?ve$", "^[Ss]er-?pen-?t", "^[Gg]er-?s-?te", "^[Kk]er-?ra-?ta", "[Gg]u-?er-?rah", "^[Gg]e[-+]pferch", "[Gg]-?u-?er-?bas?", "^[Zz]er-?zo-?urs?", "[Ss]cher-?f", "^[Kk]a-?ser-?n", "(?:^|=)[FfMm]er-?d", "^[Ss]ter-?n", "^[Ii]n[-+]?fer-?nos?$", "^[Jj]er-?maks?$", "^[Jj]er-?m-?o-?l-?a", "fer-?kels?$", "^[Ff]er-?ron-?ni", "^[Bb]ert", "^[Gg]al-?lert", "^[Dd]e-?ro-?ze-?r-?ays", "^[Bb]ou-?lan-?ger", "[Gg]u-?er[-+]?ri", "^[Aa]n[-+]?mer-?k", "^[Ss]che-?r", "^[Ii]r-?gend[-+#|]?wer$", "^[Gg]er-?hard", "^[Gg]il-?ber-?t", "[Ss]o-?fern$", "^[Pp]oi-?ti-?er" }; // generalization of preceeding rule (because also valid for other cases: Pflegern, Merdja, Ferdjane

		////////////////////////////////////// end new approach ///////////////////////////////////////

		// early filter
		"([Ss]er)\+(vier)\+?" => "$1-$2-";
		
		////////////////////////////////// end early filter //////////////////////////////////////////

		// don't separate prepositions or shortings at beginning
		"([Ff]ür)\|" => "$1+";
		"([Ii]n-?ter)\|" => "$1+";
		
		// diejenige, derjenige, desjenigen etc.
		"([Dd](?:ie|er|es|as|em|en))-?(je-?ni-?ge)" => "$1+$2";

		// don't separate -zer, -der, -er at end of words
		//"([Ss]au)\|(er)" => "$1-$2"; // sauer
		"([Nn]eu|[Tt]reu)\|(e-?r\+?)$" => "$1-$2"; // treuer
		"(gr|bl)au\|er" => "$1au-er";
		"^([Hh]eu)\|(er\+)$" => "$1-$2";
		"^([Ll]and)[-+|]?(au)[-+|]?(er)\+?" => "$1-$2-$3+"; // Landauer
		"(.?)\|([dz]?er)\+?$" => "$1-$2" ;

		// correct wrong separations
		"([Dd])e-?nen" => "$1en+en";
		"([Dd])e(-?|\|)r\+?e([rn])" => "$1er+e$3";
		"([Mm]i-?ne)\|(ral)" => "$1-$2";
		"([Dd]er\+?)\|(ben)" => "$1-$2";
		"([Ss]au)\|(be)\+(r)" => "$1-$2-$3";
		"([Mm]an)\|(gel)" => "$1-$2";
		"([Hh]eu)\|(e-?t)" => "$1-$2";
		"([Ff]ol-gen)\|(der)" => "$1-$2";
		"([Ss]pie)\|(ge)[-+]?l" => "$1-$2-l"; // also: Luftspiegelungen
		"([Hh]a)-?t's" => "$1t's"; 
		"([Aa]-?m-?e-?r\+?i-?ka)\|(ni-?schen)" => "$1-$2"; // computers are stupid ... :)
		"([Jj]e)\|(doch)" => "$1-$2";
		"([Vv]or\+ei)\|(li-g)" => "$1-$2"; // voreiligen
		"([Ee])i\|ge\+ne" => "$1i-ge-ne";   // eigene
		"([Ss]prit)\|(ze-?r)" => "$1-$2";
		"([Gg]e)-?(le)\|(ge)\+" => "$1-$2-$3"; // abgelegene
		"([Aa]m)\|(her)\+(d)" => "$1-$2$3"; // Swiss name
		"([Ee]-he)\|(ma)" => "$1-$2"; // ehemalig
		"([Mm]ai)\|(l(?:a|ä)n-?d)" => "$1-$2";
		"(t)\|(nis-?se)" => "$1-$2";
		"(sich)\|(ti-?ge-?r)" => "$1-$2"; // durchsichtiger
		"[Ss]tau\|den" => "Stau-den"; // Staudenkultur (|den not recognized in interior of word ...)
		"([Tt]e-le)\|(phon)" => "$1-$2"; // avoid separation of old orthography
		"\|(haf-?t)" => "-$1";
		"(ungs)-(haf-?t)" => "$1|$2"; // recorrection: Untersuchungshaft
		"([Ee]i)\|(gen)" => "$1-$2";
		"([Pp]la-?to)\|(ni-?sch)" => "$1-$2";

		// "resyllabation"
		"([Zz]wei)-to" => "$1t|o";  // zweitoberst
		"([Zz]wei)t\|(ens)" => "$1-t$2"; // recorrection
		"([Jj]u-li)n-" => "$1|n"; // Julinacht
		"([Vv]i-si-ten)k-" => "$1|k";

		// resyllabation -ie
		"([Kk]o-mö-di)e" => "$1-e";

		// additional separations
		"([Nn]acht)-?(tisch)" => "$1|$2";
		
		"([Ss]er-?vier)-" => { "$1|$2", "^[Ss]er-?vier-?t(?:e|est|en)?$" };	// Serviertochter
		"-lied" => "|lied"; 	// Beresinalied
		"Erb-l" => "Erb|l";	// Erb-lassers (most probable decision for noun vs Er-blasser)
		"erb-l" => "er+bl";	// er-blassen (most probable decision for Verb)
		"([Bb]reit)-" => "$1|"; // breitbeinig, breitschultrig etc.
		"([Kk]o-kos)-" => "$1|";
		"([Ss]chank)-" => "$1|";
		"([Kk]lein)-(?!e|st)" => "$1|"; // kleinkalibrig, Kleinkunst etc.
		"ti-ons-" => "ti-ons|"; // Deflagrationsspuren, Reaktionszeit etc.
		"([Bb]ar-chent)-" => "$1|"; // Barchentteppich, -unterrock etc.

		// aus-
		"([Aa]us)-g" => "$1+g"; // could produce wrong results ...
		"([Aa]us)-([kr])" => "$1+$2";
		"([Aa]us)-(hän-di-g)" => "$1+$2";
		"([Aa]us)-(n[ae]h)" => "$1+$2"; // Ausnahme, ausnehmen
		

		// in general: don't separate -[brt]en (..)
		"\|ren(?!n)" => "-ren";
		"\|ten" => "-ten";  // why is "ten" recognized as a word (in german)?!?
		"\|ben" => "-ben";

		// separate repetier-
		"([Rr]e)-(pe-tier)-" => "$1+$2|"; // Repetierpistole, Repetierstunde
		
		// separate "Kutte(n)-"
		"(Kut-?ten)-" => "$1|"; // beginning
		"-(kut-?ten?)" => "|$1";  // end (works also for "Kutter" which is correct)

		// recognize more auf-
		"([Aa]uf)-(kl|n|o|a)" => "$1+$2";

		// don't separate -tümlich
		"\|(tüm[-#]?li-?ch)" => "-$1";
		"(s-?ter)\+?\|(li-?c-?h)" => "$1+#$2"; // correction: klösterlich, österlich

		// ein-
		"([Ee]in)-?(tö-?ni-?g)" => "$1+$2";

		// er-
		"([Ee]r)-?(lau-?b)" => "$1+$2";
		"([Ee]r)-?(staun)" => "$1+$2";
		"([Ee]r)-?(le-?di-?g)" => "$1+$2"; 
		"([Ee]r)-?(in-?ne-?r)" => "$1+$2"; 
		
		// allesamt
		"([Aa]l-?le)\|(samt)" => "$1+$2"; 

		"([Gg]ib)\|t" => "$1t"; // what a mess ...

		"^([Nn])eu\|e(?!nt)" => "$1eu-e"; // not: neuentdeckter

		"([Ii])n-ter-" => "$1n-ter+";

		"\|dun(-?)g(s|en)?$" => "-dun$1g$2"; // Neugründung

		"([Bb]e)-?(ja-?h)" => "$1+$2";

		"([Hh])e-?r-?aus-?" => "$1er+aus+";
		"([Dd])a-ma(-?)l" => "$1a+ma$2l";
		"([Uu])n(-?|\||\+)te(-?)r" => "$1n-te$3r"; 
		"([Aa]u-?s-?ser)\+(\|dem)" => "$1$2";	// special: recorrect +| before following rule 
		"(?<!\|\.)(\+|\|)([bd])e([nrsm]?)$" => "-$2e$3";
		"([WwNn])ie\|de(-?)r\+" => "$1ie-de$2r|";
		"([WwNn])ie\|de(-?)r" => "$1ie-de$2r";
		"([Nn])ie\|ma" => "$1ie-ma";
		"([Hh]er)\+(ren)(?!-n|n)" => "$1-$2"; // not: herrennen
		"([Ww]in-?ter)\+(thur)" => "$1|$2";
		"([Tt]rotz)-(dem)" => "$1+$2";
		"Lei-?b-?und-?gut" => "Leib|und|gut";
		"([Gg]e)-?(sel-?l)" => "$1+$2";
		"([Ww]ich)\|(ti-?ger)" => "$1-$2";
		"(wir)\|(ren)" => "$1-$2";
		"(wir)\|(ren)\|(der)?" => "$1-$2-$3";
		"(wor)\+(ren)" => "$1-$2";
		"([Mm]it)\+(t(?:a|ä)-?g)" => "$1-$2";
		"([Oo]h)\|(ren)" => "$1-$2";
		"([Bb]al-?dri-?an)-?(?!\|)" => "$1|"; // word unknown by hunspell
		"(?<![Bb])([Aa])u\|g" => { "$1u-g", "[Bb]lau\|ge", "^[Gg]rau\|gr" }; // not: blaugestrichenen
		"([Aa]u)\|(tor)" => "$1-$2";
		"([Ww]en)\|(n)" => "$1$2";  // this linguistical analyzer really does strange things (with "wenn's")
		"([Ee]in)-?(tö-?nig)" => "$1+$2";
		"([Ss]pan)\|(nun(?:-|\|)?g)" => "$1-$2";
		"([Kk]om-?bi)\|(na-?ti-?o-?n)" => "$1-$2";
		
		"\+lie-g" => "|lie-g"; // daniederliegen
		"([Ss])ie\|ben" => "$1ie-ben";
		// more general: don't separate bens?$
		"\|(bens?)$" => "-$1";

		"zäh\|lun-gen$" => "zäh-lun-gen";
		"([Mm])it\|tag" => "$1it-tag";
		"([Vv])iel\|leicht" => "$1iel-leicht";
		"^((?:[Aa]us[+#-|]?)?[Pp])ro\|" => "$1ro-";
		"e\|ren$" => "e-ren";	// näheren
		"(\+|\|)ge(-?)n(e[nrs]?)?$" => "-ge$2n$3";
		"\|([kh])ei\|t(.?.?)$" => "=$1ei-t$2"; 
		"^([Ee]r)(\|)" => "$1+"; // prefix or infix er
		"(\|)(er)(\|)" => "$2+"; // infix er
		"[Aa]n\+?de(-|\|)?r(en?)?" => "an-de$1r$2";
		"([Gg]e)-?(räu-?sch)" => "$1+$2";
		"([Rr]at)-?(lo-?s)" => "$1#$2";

		// mark prefixes that have not been recognized
		"^([Vv])er-ant-" => "$1er+ant+";
		"\|ver-ant-" => "|ver+ant+";
		"([Ee]nt)-(fer-?n)" => "$1+$2";
 

		"^[Ii]n-dem" => "in+dem";
		"^[Zz]u-dem" => "zu+dem";
		"^([Gg]e)[-+]?(gen)\|" => "$1-$2+";
		"^(Ü|ü)(-?)ber-" => "$1$2ber+"; 
		"([Bb]e)-?(rei-?t)" => "$1+$2";
		"([Uu]r)-?(teil)" => "|$1+teil"; 	// isn't recognized because 2nd word starts with vowel
		"([Jj]e)\|?(de)" => "$1-$2";
		"([Bb]e)-(son-de)" => "$1+$2";
		"([Ee]r)-(f[auie])" => "$1+$2";  // c'est osé ...
		"([Ee]r)-(kl(?:[aeiou]|ä))" => "$1+$2";
		"([Gg]e)-(n(?:u|ü))" => "$1+$2";
		"([Gg]e)-?(litz-?t)" => "$1+$2"; // Helvetism
		"([Gg]e)-?(f(?:a|ä)ng)" => "$1+$2";
		"([Gg]e)-?(dach-?t)" => "$1+$2";
		"([Gg]e)-?(fühl)" => "$1+$2";
		"([Gg]e)-?(sin-?nung)" => "$1+$2";
		"([Gg]e)-?(nos-?s)" => "$1+$2";
		"([Gg]e)-?(wöh-?n)" => "$1+$2";
		"([Gg]e)-?(win-?n)" => "$1+$2";
		"([Gg]e)-?(stal-?t)" => "$1+$2";
		"([Gg]e)-?(ta-?n)" => "$1+$2";
		"([Aa]n)-?(ge)-?(bie-?d)" => "$1+$2+$3";
		"([Gg]e)-?(moch-?t)" => "$1+$2"; 
		"([GgBb]e)-?(wuss-?t)" => "$1+$2";
		"([Gg]e)-?(r(?:u|o)-?c-?h)" => "$1+$2";
		"([Gg]e)-?(wis-?s)" => "$1+$2";
		"([Gg]e)-?(setz)" => "$1+$2";
		"([Gg]e)-?(sand-?t)" => "$1+$2";
		"([Gg]e)-(dicht)" => "$1+$2"; 	// Gedichtlein isn't recognized ...
		"([Gg]e)-(schlitz-?t)" => "$1+$2";
		"([Gg]e)-?(frei-?t)" => "$1+$2";
		"([Gg]e)-?(sich)" => "$1+$2"; 
		"([Gg]e)-(spr)" => "$1+$2";
		"([Gg]e)-(sun)" => "$1+$2";

		"([Ee])r-folg" => "$1r+folg";
		"([Ee]r)-?(hö-?h)" => "$1+$2";

		"ungs-an" => "ungs|an"; // terrible "hacks" ... :-)
		"\|an-" => "|an+";
		"([Aa]n)-?(nah-?m)" => "$1+$2";

		"([Ww])ar\|um" => "$1a-rum";
		"([Bb])e-?que(-?)m" => "$1e+que$2m";
		//"([Pp])fle-?ge\|r" => "$1fle-ge-r"; // Pflege-Rinnen (Computers are stupid ... :)
		"\|(rin-?nen)" => { "-$1", "^[Ww]as-?ser\+?\|rin" }; // make this rule more general (following ruls might be obsolete)
		
		"([Aa])-?m-?e-?r\+?i-?ka\|ni" => "$1-mer+i-ka-ni";	// Amerika-Nische (Computers are stupid ... :)
		"([Aa])-?f-?r-?i-?ka\|ni" => "$1-fri-ka-ni";	// Afrika-Nische (Computers are stupid ... :)
		"([Nn])-?i-?g-?e-?r\+?i-?a\|ni" => "$1i-ger+i-a-ni";	// Nigeria-Nische (Computers are stupid ... :)
		"([Nn])i-?g-?er\+?i-?a(s?)$" => "$1i-ge-ri-a$2"; // Nigeria (long -er-)
		//"([Kk])i(-?)lo\|" => "$1i$2lo+"; // Kilometer: shorting [et] ...
		"([Gg]e-?ne)\|(ral)" => "$1-$2";
		"#seits" => "|seits";

		// prefix in-
		"(^|\||=)(Volks\||ungs-)?([Ii])n-(?!ter)" => { "$1$2$3n+", "[Ii]n-?n" }; // innig
		"(=|\|)([Ii])n-?i-?t" => "$1$2n+i-t"; // Pestizid-initative => careful with that rule

		"^([Ii]n)-(s[tp])" => "$1+$2"; // Instrument, Institution, Inspektion
		"\|([Ii]n)-(s[tp])" => "|$1+$2"; // idem in separated words
		"^([Ii]n)\+(ne)" => "$1-$2";

		// un-
		"^([Uu]n)-([bcdfghjklmnprstvwxz])" => { "$1+$2", "^[Uu]n-?ken?$" };
		"([Uu]n)\+(te[rn])" => "$1-$2"; // recorrect unter, unten
		// un-ent/ver-
		"^([Uu]n)-?(ent|ver)(-|\+)?" => "$1+$2+";
	
		// trying to recognize more ge-/be- prefixes: rule: ends with -en(..) or -t(..)
		"\+([bg])e-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "+$1e+$2-$3$4";
		"^([bg])e-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "$1e+$2-$3$4";
		//"\+([bg])e-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "+$1e+$2-$3$4";
		"\+([bg])e-(.*)(t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => { "+$1e+$2$3$4", "^(?:[Bb]e[-+]?|[Nn]ach[-+]?|[Ee]r\+?)ge-?b", "(?:[Aa]us[-+]|[Hh]in[-+]|[Zz]u[-+]|[Vv]er[-+])ge-be", "^[Hh]er[-+]?ge-be$" }; // test (replaces line before)
		"^([bg])e-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "$1e+$2-$3$4";

		// same for ver-
		"\+([Vv])er-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "+$1er+$2-$3$4";
		"^([Vv])er-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "$1er+$2-$3$4";
		"\+([Vv])er-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "+$1er+$2-$3$4";
		"^([Vv])er-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "$1er+$2-$3$4";

		// be- + #er(in)(nen) // be- + ung
		"([Bb]e)-(.*)-(.*?)(e-?r)([sn]|in(?:-?nen)?)?$" => "$1+$2-$3$4$5";
		"([Bb]e)-(.*-)(.*)(un-?g(?:s|en)?)" => "$1+$2$3$4";	

		// recorrect be-/ge- before gerundium
		"([bg]e)\+(n-?d)(e[rnsm]?)$" => "$1-$2$3";
		"([bg]e)\+(n-?d)(e[rnsm]?)\|" => "$1-$2$3|";

		// and correct the correction ...
		"([Bb]e)-?(geis-?ter)" => "$1+$2";
		"([Bb]e)-?(am-?t)" => "$1+$2";
		"([Bb]e)-?(tr(?:u|o|ü)-?g)" => "$1+$2";
		"^([Bb]e)-?(gin-?n)" => "$1+$2";
		"([Bb]e)-?(rech)" => "$1+$2";

		// an-
		"([Aa]n)-(.*)-(lich)" => "$1+$2#lich";
		"([Aa]n)-?(läs-?s)" => "$1+$2"; 

		// auf- / ver- / zu-
		"^([Aa]uf|[Vv]er|[Zz]u)-(.*)(ung)(en)?$" => "$1+$2$3$4";
		"\+(auf|ver|zu)-(.*)(ung)(en)?$" => "+$1+$2$3$4";
		"^([Aa]uf)-(zu)-" => "$1+$2+";
		"([Zz]u)-?(k(?:u|ünf))" => "$1+$2";

		// additional separations
		"([Ww]eih)-?(nach-?t)" => "$1|$2";
		"Pri-?vat\|?de-?tek-?tiv" => "Pri-vat[#4]\\de-tek-tiv"; // to high (produces lines all over the place ... :) One of the ugliest words in steno I think ... :)
		"([Nn]as)-?(t(?:u|ü)-?ch)" => "$1|$2";	// Helvetism

		// die- ist most of the times not a separate word (a part from diejenigen, dieselben)
		"([Dd])ie\|(?!(je|se))" => { "$1ie-", "[Dd]ie\|weil" };

		// meinet, deinet, seinetwegen etc. => consider it as two words
		"(?<![Vv]er)\+(we-?gen)$" => { "|$1", "[Bb]e\+we-gen" }; 
 		"(?<!\|)[-+]?(wil-?len)$" => "|$1"; // Ihretwillen 
 
		// zeit-
		"([Zz]eit)-?(wei-?l)" => "$1|$2";

		// -lich
		"(?<!#)-?(lich(?:-|#)?kei-?t)" => "#$1";

		// -bar(ensr)
		"\|(ba-?r(?!t)(?:(?:e-?r)?e[rsnm]?)?)" => "-$1"; // added (?!t) because auf Rübezahlbart

		// in vs inner
		"([Ii]n)\+(ner)" => "$1-$2";

		"([Gg]e)-?(stan-?d)" => "$1+$2"; 

		// ent-
		"([Ee]nt)-?(setz)" => "$1+$2";
		"([Ee]nt)-?(b|sch)" => "$1+$2";

		// un-
		"(?<!e)([Uu]n)-(z)(?!e)" => { "$1+$2", "[Dd]e-?nun-?zi" }; // wrong: neunziger => neun+ziger, Denunziation
		"([Uu]n)-(b)" => "$1+$2";
		"([Uu]n)-?(nach-?)" => "$1+$2";
		"^([Uu]n)-(er|ver|ge|be|an)-" => "$1+$2+";

		"([Zz]u#sam)\|(men)-?(ge)\|" => "$1-$2|$3+";

		"([Bb]e\+?)(auf)-" => "$1$2+";

		"([Ss]on-?n)-?(t(a|ä)g)" => "$1|$2";

		// not recognized words
		"([Ll]ein)-?(t(?:ü|u)-?ch)" => "$1|$2";
		"([Ee]r)-?(qui-?ck)" => "$1+$2";
		"([Kk]ur)\|(zer)\+h" => "$1-$2|h";

		"([Hh]arm)\|l" => "$1#l";
		
		// who the hell invented this Aufstrich-stuff ... Stolze or Schrey (or both must have been
		// slightly drunk (or high) when they had the idea ... it's nice for short words and in the 
		// end of words ... but try to write something like "sentimental" or "Sentimentalität" ...
		// you probably have to glue some additional paper on top in order to get enough space ... 
		// anyway: I'm opting her for an etymological (romanistic) separation of this word:
		// senti|mental and Senti|mentalität (and if a purist thinks this is not correct then come
		// up with a better solution - or tace! :)
		"([Ss]en-?ti)-?(men-?t)" => "$1|$2";
		
		// recorrections
		"([Gg]e[+-]?)(be)[+-](t)" => "$1$2-$3";
		"([Gg]e)-(bet)" => "$1+$2";
		"([Ww]o)#(chen)" => "$1-$2";
		"([Ff]rei)\+(ta-?g)" => "$1-$2";
		"([Ss]ams)\|(ta-?g)" => "$1-$2";
		
		"([Mm]u-?se)\|(um)" => "$1-$2";
		"([Ss]ei)\|(den)[+-]?(en)" => "$1-$2-$3";
		"([Zz]er)\+(ren)" => "$1-$2";
		"([Tt]he-ma)\|(tisch)" => "$1-$2";
		"([Uu]-ni)\|(for-?m)" => "$1-$2";
		"([Zz]wei)\|(fels)" => "$1-$2"; // suppose it is never "zwei" + "Fels" (Dreifels exists;-)
		"([Ss]ei)\|(den)" => "$1-$2";
		//"([Nn]eu)\|(fund)\|(l)" => "$1|$2|$3"; // Neu-Fund will be written separately
		"Zu\+ge(?!\+)" => "Zu-ge";
		"([Kk]lös-ter)\|(li-?ch)" => "$1#$2";
		"\|(run-gen)" => "-run-gen"; // very strange results that have to be corrected ... ;-)
		"([Aa]n)\+(gel)" => "$1-$2";
		"([Ee]i)\|(ni)" => "$1-$2";
		"([Ww]en)\|(de)" => "$1-$2";
		"([Uu]n)\+(se-?r)" => "$1-$2";
		"([Mm]uss)\|(test)" => "$1-$2";
		"([Kk]i-?lo)\|(me-?ter)" => "$1-$2";

		// final ge-
		"([Gg]e)-?(fun-?de-?n)" => "$1+$2";
		"([Gg]e)\+(ge)\+" => "$1+$2-"; 	// avoid 2x ge-
		"([Aa]uf(?:-|\+)?(?:ge\+)?ge)\+(be)" => "$1-$2"; 
		"([Gg]e)\+(ben)" => "$1-$2";

		/////////////////////////////////////// new approach prefixes ///////////////////////
		// filter out "false positives" for affixes

		// prefix be+
		"([Bb]e)\+(te(?:n|st|t(?:en?)?|nd(?:en?)?))" => "$1-$2";
		"([Bb]e)\+(b(?:en|e?st|e?t(?:en?)?|nd(?:en?)?))" => "$1-$2";
		"([Bb]e)\+(sens?)" => "$1-$2";
		"([Bb]e)\+(ne(?!-?tz|h-?m))" => { "$1-$2", "^[Bb]e.nei-?d" };
		"([Bb]e)\+(x)" => "$1$2";
		

		// prefix ge+
		"([Gg]e)\+(he)(?!u)" => { "$1-$2", "[Gg]e\+hef-?t", "[Gg]e\+hem", "[Gg]e\+heg-?t" };
		"([Gg]e)\+(gen)" => "$1-$2";
		"([Gg]e)\+(be(?:-|\+)?n(?:d?(?:st)?e[mrsn]?)?)" => "$1-$2";
		"([Gg]e)\+(cko)" => "$1-$2";
		"([Gg]e)\+(le(?:-|\+)?n(?:d?e[mrsn]?)?)" => { "$1-$2", "[Gg]e\+len-?k" }; // eingelen (if it exists ... ;-)
		"([Gg]e)\+(l-?t(?:e[mrsn]?)?)" => "$1-$2";
		"([Gg]e)\+(ne?[sn]?)" => { "$1-$2", "[Gg]e[-+]?nus-?s", "[Gg]e[-+]?nu-?t-?z", "[Gg]e[-+]?nö" }; // not: genötigt
		"([Gg]e)-?(no)" => "$1+$2";	// re-correction of re-correction
		"([Gg]e)-?(hei)" => "$1+$2"; // rere
		"([Gg]e)-(nü)" => "$1+$2"; // rere
		"([Gg]e)-(na)" => "$1+$2"; // rere
		"([Aa]n\+ge)-(nehm)" => "$1+$2"; // rerere
		"([Aa]n)\+?(ge)\+?b(?![oa])" => { "$1+$2-b", "[Aa]n\+?ge\+?bun-?de-?n" }; // not: angebauter

		// affix er+ 
		"^([Uu]n\+?)?([GgBbFf]er)\+n" => "$1$2-n";
		"^([Uu]n\+?)?([Ss]ter)\+n" => "$1$2-n";

		"^((?:[Aa]-?l-?ler\+?[|#-]?)?[Ee])r\+(s-?t)(?!au|a|u)" => { "$1r$2", "[Ee]r[-+]ste-?[hl]", "[Ee]r[-+]sti-?c-?k", "^[Ee]r\+stre", "[Ee]r\+stor-?b", "[Ee]r[-+]stie" };

		"^([WwDdHhPp]?[Ee]r)\+$" => "$1";
		"^([Bb]er)\+k" => "$1-k";		// Berkeley
		"(?<!ü-|Ü-)b-?er\+g" => "ber-g";			// Aarberg(er) (Berg), not: vornübergebeugt
		
		"([BbPpSsWw]|[Zz]w)er\+g" => "$1erg";
		"([Ee]r)\+(ker)" => { "$1-$2", "er\+ker[-+]?z" }; // not: Kandelaberkerzen
		"([Ee]r)\+(bt)" => "$1$2";
		"(?<![^e]e)r\+$" => "r";
		//"eer\+$" => "eer";
		"(?<![Ee]u-e|[Ee]ue|[Ee]u-re|[Ee]ur-e|[MmSsDd]eine|[msd]ein-e|[MmSsdd]ei-ne|[Ee]ine|[Ee]i-ne|[Ee]in-e|[Aa]n-dre|[Aa]nd-re|[Aa]ndr-e|[Ii]h-re|[Ii]hr-e|[Uu]ns-re|[Uu]nsr-e||[Aa]cke)r\+\|" => { "r|", "^[Ee]u-?er*", "^[MmDd]au-?er" }; // not: euerseits, meinerseits, deinerseits etc.
		//"r\+\|" => { "r|", "^[Ee]u-?er*" }; // not: euerseits
		"([TtGg]er)\+m" => "$1-m";
		"([Zz]er)\+(be-?r\+)" => "$1-$2";	// Zerberus
		"([Zz]e-?r)\+(e-?mo-?n)" => "$1-$2";	// Zeremonie
		"([Zz]er)\+(ti-?fi)" => "$1-$2";	// Zertifikat, zertifizieren
		"([Kk]on-?z-?er)\+(t)" => "$1$2";		// Konzert (syllables are not handled very cleanly ...)
		"(Zer)\+(matt)" => "$1-$2";
		"(ie-?r)\+" => { "$1", "vier\+ru-?d" }; // vierruderige
		"ierte([rsnm])?$" => "ier-te$1"; // recorrect syllabation destroyed by preceeding rule (.. et l'horreur continue ... :)
		"(er)\+(i-?e)(?!r-?te)" => { "$1$2", "[Mm]a-?t-?er\+?i-?e-?l", "[Gg]a-?l-?e-?r\+i-?e", "[Dd]ra-?per\+ie", "[Ss]ze-?n-?e-?r\+i-?e", "^[Bb]i-?za-?r-?r-?er\+i", "^[Kk]o-?ke-?t-?t-?e-?r\+?i" }; // not: materiell
		"([Bb]er)\+(e-?si-?na)" => "$1$2";
		"([Mm]er)\+k" => "$1k";
		"([Ee]r)\+(ns)" => { "$1$2", "dau.?er.?ns" }; 	// ernst, not: bedauernswert
		"([Zz]u)\+(er)\+(st)" => "$1+$2$3"; 
		"([Pp]er)\+(l)" => "$1$2"; 	// Perle
		
		"(?<![Vv])([Ee]r)\+(le)(?!i)" => { "$1$2", "[Aa]uf\+er\+", "[Ee]r\+l(?:e|ie)-?g", "[Ee]r\+lern" }; 			// Erle: first transform all, not: auferlegt, erlernten

		"([Ee]r)(le-)(?=[dsbghmprtwz])" => "$1+$2"; 	// reseparate: erlesen, erledigen etc.
		"([Ee]r)(ler\+)" => "$1+$2"; 	// reseparate: erlernen, erlernt etc.
		"([Ee]r)(le-?b)" => "$1+$2"; 	// reseparate: erleben, erlebte etc.
		
		"([Ll]er)\+n" => "$1n";
		"([Ww]er)\+?(-?de)" => "$1$2";
		"([Hh]er)\+r" => { "$1r", "[Hh]er\+rüh-?r", "[Ee]in\+her\+rei", "^[Hh]er[-+]?rich-?t", "[Hh]er[-+]ren-?n", "[Hh]er\+ru", "[Hh]er\+re-?d" }; // not: herrühren, einherreitet, herrichtete, herrennen, herruft, herreden
		"([Hh]er)\+(ein|aus|auf|un-?ter|nach)" => "$1-+$2"; // well, -+ is audacious ...
		"([Ee]r)\+(i-?ka)(?!-?ni-?sch)" => "$1$2"; // Erika, Amerika; amerikanisch
		"([Ff]er)\+t" => "$1t";
		"([Ww]er)\+d" => "$1d";
		"([Mm]er)\+c" => "$1c";
		"([Ee]r)\+b(e|in)" => { "$1-b$2", "[Ee]r[-+]?be-?b", "^[Zz]er\+beis", "^[Zz]er\+bis" }; // not: erbebte, erbeben, zerbeissen, zerbiss
		"([Ee]r)\+(b\|)" => "$1$2"; // erbberechtigt
		"([Vv]er)\+(s-)" => "$1$2";
		"([Vv]er)\+(b(?:s|en)?)$" => "$1$2"; // syllabation disappears if two syllables
		"([Vv]er)\+(s$)" => "$1$2";
		"([Vv]er)\+(si-?on)" => "$1-$2";
		"([Vv]er)\+(s)(chen)" => { "$1$2-$3", "[Vv]er[-+]?s-?chen-?k" };
		"([Ff]er)\+(se?n?)" => "$1$2";
		"([Ss]chmer)\+z" => "$1z";
		"([Hh]er)\+z" => "$1z";
		"([Hh]er)\+nach" => "$1-nach";
		"([Hh]er)\+aus" => "$1|aus";
		"([Ee]nt)-?(f-?er)\+" => "$1+$2";
		"(Ger)\+(zen)" => "$1-$2"; // Gerzenstein (Glauser, der Chinese)
		"([Mm])a-?t-e-?ri-?en?(?!l)" => "Ma-te-ri-e"; // recorrection/resyllabation
		"er\+v(?!er)" => { "er-v", "^[Cc]ant-er", "^Bas-?k-?er" }; // audacious rule ... Nerven, Verve, but not: weiterverkaufen, Baskerville, Canterville
		"([Bb]er)\+(lin)" => "$1-$2";
		"([Ss]cher)\+?-?(be)" => "$1-$2"; // +- because of recorrected |ben ... (et l'horreur continue ... :)
		"([Vv]or\+der)-" => "$1+"; 
		"([Ll]a-?t-?er)\+(n)" => "$1$2";
		"([Ww]er)\+k" => "$1k";
		"([Zz]er)\+r(e|t(?:e|en|est|et)?)" => { "$1r$2", "[Zz]er.?re?is.?s", "^[Zz]er\+rei-?b" }; 
		"([Ww]-?er)\+(t)" => "$1$2";
		"([Ww]er)(te)" => "$1-$2"; // resyllabation
		"([Bb]er)\+g" => "$1g";
		"([Bb]er)(ge)" => "$1-$2"; // resyllabation
		"([Ee]r)(leuch)" => "$1+$2"; // erleuchtet
		"([Ss]per)\+r" => "$1r";
		"([Rr]e-?cher)\+(ch)" => "$1-$2";
		"Ber\+s" => "Ber-s"; // name Berset

		// per+ her+
		"(^|\|)([Pp]er)\+" => "$1$2-"; 
		"^([Hh]er)\+" => { "$1-", "[Hh]er\+rüh-?r", "[Hh]er[-+]?rich-?t", "[Hh]er[-+]ren-?n", "[Hh]er\+ru", "[Hh]er\+re-?d", "[Hh]er\+l(?:ie|au)-?f" }; // not: herrühren, herrichtete, herrennen, herruft, herrede, herliefen
		
		// er+ and in+
		"([Ii]n)\+(der|di-?e-?[rn])" => "$1-$2";
		"([Ii]n)-?di-?e([rn])" => "$1-di-e$2";
 		"([Ii])n-?di-?erin" => "$1-di-e-rin";
		"([Uu]-ni-ver)\+s" => "$1s";

		// affix er- => er+ (additional affixes)
		"Schwie-?g-?er-" => "Schwie-ger+";
		// additional ge+
		"^([Gg]e)-?(n(?:u|ü)-?g)" => "$1+$2";

		// einmal, zweimal, dreimal etc. (where's the logic anyway ... ?:)
		"([Ee]in|[Zz]wei|[Dd]rei|[Vv]ier|[Ff]ünf|[Ss]echs|[Ss]ie-?ben|[Aa]cht|[Nn]eun|[Zz]ehn|[Ee]lf|[Zz]wölf)\|(ma-?l|fa-?c-?h)" => "$1-$2";

		// not separated
		"([Dd])on-?ner\+?s\|?tag" => "$1on-ner+stag"; // where's the logic anyway ... :)
 		"([Ll])ob-by\|ist" => "$1ob-by-ist";
		"([Dd]ür-?ren)\|(matt)" => "$1-$2";

		// ab+
		"([Aa]b)(?:\|)(tei-?l)" => "$1+$2";

		// im+ pro+
		"([Ii]m)\|(pro)\|v" => "$1+$2-v";
		"([Pp]ro)\|(gramm)" => "$1-$2";

		// "early phonetizer"
		"([Rr]en-?dez)=([Vv])ous" => "$1|=$2us";

		// recorrect -zer+n$
		"zer\+n$" => "zern"; // Luzern
		// "(lit-zer)\+(n)" => "$1$2"; // glitzernd => short -er- is correct!?!

		"([Ll]uft)-?(ent)-?f" => "$1|$2+f"; // Luftentfeuchtung

		// jemand
		"([Jj])e\|man(-)?d" => "$1e-man$2d";

		// Insel / Au-to-ma-ten
		"([Ii])n\+sel" => "$1n-sel";
		"^([Aa]u)\|" => "$1-";

		// Mode-Ration vs Moderation (Computers are stupid ... :)
		"([Mm])o-?de\|ra-?ti-?o" => "$1o-der+a-tio";

		"lieb\+t" => "lieb-t"; // beliebteste
		"er\+c(?!h)" => "erc"; // Clerc, not: Köfferchen
		"([Ee])nt\|meh-r" => "$1nt+meh-r"; // Entmehrung

		// recorrect suffix -chen (not diminutive)
		"([Bb]lei)#(chen)" => "$1-$2";

		// Errungenschaften / Therapie
		"([Ee]r\+run)\|(gen)\|(schaf-?t)" => "$1-$2-$3";
		"([Tt]he)r\+(a-pi)" => "$1-r$2";
		"([Mm]o)-?d-?(er)\+(n)" => "$1-d$2-$3"; // problem: verb "modern" has {ER}
		"([Ss]chwe)r\+e" => "$1-re";
		"([Ss]chwer)\+s-?te" => "$1s-te";

		"([Gg]e)[+-](wor)[+-]den[+-]e" => "$1+$2-de-ne";
		"([Gg]e)[+-](wor)[+-](de)" => "$1+$2-$3";
 
		// hinter- / vorder- (separate words)
		"([Hh]in)-?t-?er[-+](?!n$)" => { "$1-ter|", "[Hh]in.?ter.?s.?t" }; // not: hinterste // Hinterbeine
		"([Vv]or)-?d-?er\+(?!n$)" => "$1-der|";

		"([Kk]er)\+(l)" => "$1-$2";

		"([Dd]en)\|(noch)" => "$1-$2";
		"([Jj]ahr)\|(ein)" => "$1-$2";

		"([Bb]e)\+?(un)-?(ru-?hi)" => "$1+$2+$3";
		"([Ee]r)\+?(den?)" => { "$1-$2", "^(?:Ü|ü)-?ber\+dem$" };
		"([Gg]e)r\+?(eim-?t)" => "$1+r$2";
		"([Hh]err)\|(sch)" => "$1-$2";
		"([Aa]uf\+?merk)\|(sa-?men)" => "$1#$2";
		"([Bb]ei)-?(tra-?g)" => "$1+$2";

		"([Tt]ran-?s)(?:\||-)?(p[aoi])" => "$1+$2"; // transparent, Transport, transpirieren
		"([Kk]ür)\|(zun-?ge)" => "$1-$2";
		"([kK]er)\+(ze)" => "$1-$2";

		"([Gg]e)#(schäf-?t)" => "$1+$2";
		"([Dd]e)\|(le-?g)" => "$1-$2";
		"([Ee]r\+war)\|t" => "$1-t";
		"([Gg]e\+mein)\|(de)" => "$1-$2";
		"([Zz]u)-(häl)" => "$1+$2";
		"([Uu]n)-?(er\+)" => { "$1+$2", "[Tt]hun.?er" };
		"([Mm]ensch)\|(lich)" => "$1#$2";
		"([Aa]n)-(d(?:a|ä)ch)" => "$1+$2"; // Andacht, andächtig
		"([Vv]er)[#+-]?(der)\+?(-?)(b)" => "$1+$2$3$4";
		//"([Kk]on\+?kur-?ren)\|z" => "$1-z";
		"\|(zier-?t)" => "-$1";
		"([Hh]er)-bst" => "$1bst";
		"([Ss]taat)\|(li-?ch)" => "$1#$2";
		"([Kk]au)-(gum)" => "$1|$2";
		"([Kk]ur)\|(sie)" => "$1-$2"; // kursieren
		"([Aa]n)-(stal-?t)" => "$1+$2";

		"\+_" => "_"; // get rid of annoying tokens ... :)
		"([Mm]o-?nast-?er)\+" => "$1";
		"([Bb]e\+ge)\+(hu-?n-?g)" => "$1-$2";
		"([Ss]onn)\|(t(?:a|ä)-?g)" => "$1-$2"; 
		"([Ee]in\+ge)\+(b)(?!un-?d|o-?[rg])" => { "$1$2", "[Ee]in[-+]ge[-+]b(?:r|ü|i|a|et-t|ra)", "^[Hh]in[-+]?ein[-+]?ge[-+]?bli" };
		"([Aa]k-?ku)\|?(ra-?t)" => "$1-$2";
		"([Aa]uf)-?(ge)-?(frisch)" => "$1+$2+$3";
 		"([Aa]uf)-?(fri-?sch)" => "$1+$2";
 		"([Vv]or\+?be)r\+?(ei-?t)" => "$1+r$2";
		"([Ii]n)-?(i-?ti)" => "$1+$2"; // initiieren, Initialen

		"([Aa]u-?to)\|" => "$1+"; // autobiografisch
		"([Bb]io)\|" => "$1+"; // idem
		"^([Bb]er)\+(s-?t)" => "$1$2"; // bersten
		"^(Pan)-?g-?(lo-?s-?s?)" => "$1|g$2"; // ;-)
		"^([Ee]in)[+|-]?(und)\|" => "$1+$2+";	
		"([Zz]u)\+(ge?s?)$" => { "$1-$2", "[Zz]u\+vor", "[Zz]u\+st", "[Zz]u\+mal", "[Aa]uf\+zu\+rei-?b", "[Zz]u\+ler-?n" };
		"([Hh]erzen)\|sein\|(falt)" => "$1s|ein|$2"; // Voltaire
		"([Bb]a-ron)\|(es)\|(sin)" => "$1-$2-$3";
		"([Ww]er)\+f" => "$1f"; // werfen
		"([Gg]e)(s-?tan\|d)" => "$1+stand"; // gestand's
		"([Zz]u)-?(ers-?t)" => "$1+$2"; // zuerst
		"([Zz]u)-?(rei-?chen-?d)" => "$1+$2"; // zureichend
		"([Pp]-?er)(?:\||\+)(rü-?cke?)" => "$1-$2";
		"([Ee]r)\+(\'s)" => "$1$2"; 
		"([Ww]as)-?(er\+?lei)" => "$1+$2"; // waserlei
		"([Zz]o)-?o\|l" => "$1-o-l"; // zoologisch 
		"([Vv]?[Ee]r)\+(lo-?sch)" => "$1+|$2"; // (v)erloschen
		"([Hh]ol)\|(l(?:a|ä)n-?d)" => "$1-$2"; // Holland
		"([Bb]e)\+(li-?al)" => "$1-$2"; // Belialsbrut
		"([Hh])-?(er)\+(zi-?g)" => "$1$2-$3"; // barmherzig
		"([Ii]s)-(t\'s)" => "$1$2"; // ist's 
		"([Gg]e)\+?(nug)-?(tu)-?(u-?n-?g)" => "$1+$2|$3-$4";
		"([Jj]e)\|(sui-?t)" => "$1-$2"; // Jesuiten
		"([Hh]in-?ter)\|n" => "$1n""; // Hintern
		"([Ww]er)\|(d's)" => "$1$2"; // werd's
		"([Ee]nt)-?(kräf-?t)" => "$1+$2"; // entkräftet, entkräften
		"([Jj]a)\|(pa-?n)" => "$1-$2"; // Japan, japanisch
		"([Bb]ank)\|(rot)\|t" => "$1$2-t"; // bankrott, Bankrottiers
		"([Ww]irt)\|?(schaft)" => "$1#$2"; // Wirtschaft
		"([Mm]e-?t-?ro)\|?(po-?l)" => "$1-$2"; // Metropole
		"([Ee]nt)-?(r[oa]n-?n)" => "$1+$2"; // entronnen
		"^([Bb]e)[+-]?(te(?:(?:-?te)?(?:st|t|n)?)?)$" => "$1-$2"; // all forms of beten (no prefix)
		"([Gg]e)-?l\|?(ah?r-?t)" => "$1+l$2"; // gelart
		"([Ww]ir)\|(d\'s)" => "$1$2"; 
		"([Pp]o)\|(ma-?d)" => "$1-$2"; // Pomade
		"([Aa]uf\+ge)#(wie)\|(gel-?t)" => "$1+$2-$3"; // aufgewiegelten
		"([Ii]n)\+(di-?sch)" => "$1-$2"; // indischen
		"([Dd]e)\|(gen)" => "$1-$2"; // Degen
		"([Ff]an)\|(gen)" => "$1-$2"; // Gefangenschaft
		"^([Hh]in)\+(ge)$" => "$1-$2"; // hinge
		"\+her\+" => "#her+"; // umhertreiben
		"([Dd]e)-?m(un)-?(ge)-?(ach-?te-?t)" => "$1m+$2+$3+$4"; // demungeachtet
		"([Ss]pie)\|(lin)" => "$1-$2"; // Gespielinnen
		"([Ee]ng)\|(l(?:ä|a)n-?d)" => "$1-$2"; // Engländer, England
		"([Vv]er\+sa)\|h" => "$1-h"; // versahe
		"([Dd]er)\+b" => { "$1-b", "der\+?bei" }; // derb, not: Vorderbein
		"([Aa]n)-?(ge)-?(se-?hen)" => "$1+$2+$3"; // angesehensten
		"([Ww]ei)-?t(ärm-?li-?g)" => "$1t|$2"; // weitärmlig
		"([Ee]i)\|(len-?d)" => "$1-$2"; // eilenden
		"([Gg]ou-?ver)\+(n)" => "$1-$2"; // Gouvernement, Gouverneur
		"([Bb]e)\+(cher)" => "$1-$2"; // Becher
		"([Gg]e-?ne)\|(ra-?l)" => "$1-$2"; // this error only occurs on remote server! (probably different version of hunspell)
		"([Oo]-?ben)\|(ein)" => "$1-$2"; // obenein
		"([Bb]en)\|(gel)" => "$1-$2"; // Bengel
		"([Ss]che)r\+(en?)(\||$)" => "$1-r$2$3"; // Schere
		"([Ss]au)\|(be-?r)" => "$1-$2"; // saubern
		"([Gg]e)\+(be-?r)(in(?:-?nen)|s)?$" => "$1-$2$3"; // Ratgeber(in)
		"([Ss]ie)\|(he)" => "$1-$2"; // Siehe
		"([Aa]uf)[-+](ge)[-+](ho-?b)" => "$1+$2+$3"; // aufgehobnen
		"([Aa]uf)[-+](prus-?t)" => "$1+$2"; // aufprusteten 
		"([Ee]-?he)-?(dem)" => "$1|$2"; // ehedem (separated)
		"([Ii]n)\+(ka)(?!u)" => "$1-$2"; // Inkas, not: einkaufen!
		"([Pp]fer)\+d" => "$1d"; // Pferd
		"([Rr]eis)\|(sen-?d)" => "$1-$2"; // reissenden
		"([Ss]ter)\+(ling)" => "$1-$2"; // Sterling
		"(Alb-?er)\+(tus)" => "$1-$2"; // Albertustaler
		"([Ss]chrei)\|(ber)" => "$1-$2"; // Schreiberlinge
		"([Ss]ch)-?(wes)-?(ter)" => "$1$2-$3"; // Betschwestern
		"([Dd]ra-?ma)\|(ti-?sch)" => "$1-$2"; // dramatische
		"(Bett)\|(lern)" => "$1-$2"; // Bettlern
		"([Hh]and)\|(lun-?g)" => "$1-$2"; // Handlungen (computers are stupid ...)
		"([Ff]ünf)\|(zig)-?(tau-?sen-?d)" => "$1-$2|$3"; // no idea why this one is done wrong, while "zwanzigtausend" is correct .. . ?!?
		"([Ee]i-?nem)(m-?al)" => "$1|$2"; // mit einemmal
		"([Uu]n)-?(aus)-?(steh)-?(li-?ch)" => "$1+$2+$3#$4"; // unausstehlich
		"([Ww]eit)-?(schwei-?fi-?g)" => "$1|$2"; // weitschweifigste
		"([Dd]ia)\|(lo-?g)" => "$1-$2"; // wohldialogierte
		"([Vv]er)\+(si-?fi)" => "$1-$2"; // wohlversifizierte
		"(Ge\+sun)\|d" => "$1d"; // gesund
		"([a-z])(ur)\|(tei-?l)" => "$1|$2+$3"; // gesundurteilende
		"([Qq]uer)\+" => "$1"; // Quere 
		"([Uu]n)\+(ge)-?(heu-?er)" => "$1+$2+$3"; // Ungeheuer
		"([Ww]er)\+(-?)(b)" => "$1$2$3"; // erwerben
		"([Ss]ter)\+n" => "$1n"; // Morgenstern
		"([Ss]ams)\|(ta-?g)" => "$1-$2"; // Samstage
		"([Gg]e)\+b(u-?n-?g)" => "$1-b$2"; // Umgebung
		"([Aa]us)-?(schlie)" => "$1+$2"; // ausschliessen
		"([Uu]n\+ent)-" => "$1+"; // unentgeltlich
		"([Ee]in)-(k(?:ü|u)nf)" => "$1+$2"; // Einkünfte
		"([Ee]r#war)\|(tu)" => "$1-$2"; // Erwartung 
		"(#[Ww]a-?ren)-(an|be|ge)-" => "$1|$2+"; // special problem Waren- ...
		"-(#[Ww]a-?ren)" => "|$1"; // special problem -waren ...
		"(#wa-ren)-l" => "$1|l"; // Warenlieferung 

		"((?:[SsMmBbKkDd]|[Tt]r|[Ll]|[Ss]ch)au)-?(er)(?!\+)" => "$1-$2+"; // sauer, Trauer, Lauer, Mauer, Bauer etc.
		"(Spa)-?(ni)-?e-?rin" => "$1-$2-er+in"; // Spanierin
		"(Spa)-?(ni)-?(e-?r)" => "$1-$2-$3"; // Spanierin
		"([Rr]o)-?(man)\|(ti)(-?s-?c-?h)" => "$1-$2-$3$4"; // romantisch
		"^([Uu]n)-?(um)-?" => "$1+$2-"; // unumstürzliche
		"([Gg]e)[-+](le)\|(ge-?n)" => "$1+$2-$3"; // nächstgelegene
		"([Tt]ä)-?(te)\|(rin)" => "$1-$2-$3"; // Wohltäterinnen
		"([Ss]o)\+(li-?d)" => "$1-$2"; // solider
		"([Gg]e)\+(be)\+?r(in)" => "$1-$2r+$3"; // Geberinnen
		"([Ff])er\+n(?!d)" => { "$1ern", "^[Ii]n[-+]?fer\+n" }; // entfernen, not: einschläfernd, infernalisch
		"([Vv]er)\|(mö)" => "$1+$2"; // Vermögen
		"(Kas-?sa)-" => "$1|"; // Kassaraum
		"([Vv]er)\+(un)-(st)" => "$1+$2+$3"; // Verunstaltung
		"([Ss]chön)\|(hei)" => "$1#$2"; // Schönheit
		"([Aa]n)-?(neh-?m)" => "$1+$2"; // annehmbaren
		"([Gg]ross)-(tu)" => "$1|$2"; // Grosstuerei
		"([Bb]is)h-?er\+(i-?g)" => "$1-he-r$2"; // bisherigen
		"([Ss]chrift)-?(stel)" => "$1|$2"; // Schriftstellerei
		"([Ff]ei)-(er)" => "$1-$2+"; // Feierabend
		"([Kk]lein)\|(li)-?(ch)" => "$1#$2$3"; // kleinlichen
		"([Zz]ier)-?(li-?ch)" => "$1#$2"; // zierliches
		"([Ee]i-?gen)-(nü|nu)" => "$1|$2"; // eigennützig
		"([Ss]au)\|(sen)" => "$1-$2"; // dahersausende 
		"([Aa]uf)-?(pas)" => "$1+$2"; // Aufpasser
		"([Gg]e)-(he-?t-?z)" => "$1+$2"; // Gehetz
		"([Dd]a)h-(er)+" => "$1+h$2-"; // hochdaherstolzierenden
		"([Bb]ar)-?(ri)(e)(re)" => "$1-$2-$3-$4"; // Barriere
		"([Ii]hr)-?(er)(?!\+)" => "$1-$2+"; // ihrerseits
		"([Vv]a)-?ri(é|e)-?t(é|e)" => "$1-ri-e-te"; // Varietebühnen
		"([Vv]a-ri-e-te)-([^ s])" => "$1|$2"; // Varietebühnen
		"([Aa]uf\+recht\+)(st)" => "$1|$2"; // aufrechtstehen
		"(ungs)-(ta-?t)" => "$1|$2"; // Verzweiflungstaten
		"([Bb]e)\+ob\|(ach)\|t(un-?g)" => "$1+o-b$2-t$3"; // Beobachtungen
		"([Ee]nt)-?(kor-?k)" => "$1+$2"; // entkorke
		"([Ee]i)\|(fer)" => "$1-$2+"; // nachzueifern
		"([Bb]ei\+sam-?men)\+(sein)" => "$1|$2"; // Beisammenseins
		"(war)\|(tet)" => "$1-$2"; // erwartet
		"([Ss]chwer)\+" => "$1"; // schwerlich
		"([Aa]k)-?(ti)-?(e)" => "$1-$2-$3"; // Aktie
		"-?(in)\|(ha-?ber)" => "|$1+$2"; // Geschäftsinhaber
		"([Gg]as)-?(lüs-?ter)" => "$1|$2"; // Gaslüster (treat this as a single case ... :)
		"(Ge)\+(or-?g)(?!e)" => "$1-$2"; // Georg (Georgien)
		"([Ee]nt)-?(th?ron-?t)" => "$1+$2"; // enttrontesten
		"([Gg]e)[-+]ne\|r(a-?ti-?o-?n)" => "$1-ner+$2"; // Generation
		"^([Uu]n)-?(ü-?ber)" => "$1+$2"; // unüberwindliche
		"^(Main)-?(?!\|)" => "$1|"; // Mainkähne
		"([Ee]nt)-?(pup)" => "$1+$2"; // entpuppte
		"([Gg]rau)\|(sa-?m)" => "$1#$2"; // grausamen (Grau-Samen ... well, why not: Blau-Säure ... ;-)
		"(ier)-?(li-?c-?h)((?:s-?t)?e[rsnm]?)?$" => "$1#$2$3"; // possierlich
		"-(tei-?li-?g)" => "|$1"; // fünfteiliges
		"^([Ee]nt)-?(ge-?g)" => "$1+$2"; // entgegnete
		"([Aa]uf)-?(wi)(-?sch)" => "$1+$2$3"; // aufwischen
		"([Vv]er)[-+]?(an)-?(la-?g)" => "$1+$2+$3"; // veranlagte
		"([Hh]art)-?(nä-?cki-?g)" => "$1|$2"; // Hartnäckigkeit (use this for separation)
		"([Bb]e)m-?(er)\+?k" => "$1+m$2-k"; // Zwischenbemerkung
		"([Ll]an)\+(des)" => "$1-$2"; // landesüblich
		"(Ver\+giss\|mein\|nicht)(?!\|)" => "$1|"; // Vergissmeinnichtaugen
		"([Pp]ro)-?(sa)(i-?s-?c-?h)" => "$1-$2-$3"; // prosaischste
		"((?:[Zz]w|[Qq]u)et)-?(schg?en)-" => "$1-$2|"; // (Zw|Qu)etsch(g)enkuchenrest
		"([Ss]ter)\+b" => "$1b"; // sterblicher
		"([Rr]hi-?zi-?nus)-" => "$1|"; // Rhizinuspillen
		"([Hh]e)f-(en)(teig)" => "$1-f$2|$3"; // Hefenteig
		"([Ee]nt)-?(zü-?ck)" => "$1+$2"; // Entzückens
		"([Zz]u)\+(recht)\+(.)" => "$1+$2|$3"; // zurechtwies (separate)
		"([Aa]n)[-+]?(ge)-?(be-?t)" => "$1+$2+$3"; // Angebetete
		"([Uu]n)[-+]?(ge)-?(hemm)" => "$1+$2+$3"; // Ungehemmten
		"([Zz]ar)\|(tes)" => "$1-$2"; // zartesten
		"([Bb]e)\+(sche)r\+(ung)" => "$1+$2-r$3"; // Weihnachtsbescherung
		"([Bb]ös)\|(ar)\|(ti-?g)" => "$1-$2-$3"; // bösartig
		"([Ss]pinn)-?(ro-?cken)" => "$1|$2"; // Spinnrocken
		"([Ss]chlei)-?(er)\|" => "$1-$2+|"; // Schleiertanz
		"([Tt]ur-?tel)-t" => "$1|t"; // Turteltäubchen
		"([Ff]u-?ri)e" => "$1-e"; // Furie
		"([Vv]or-?bei)s-(au-?s)" => "$1|s$2"; // vorbeisauste
		"([Ee]r)(#war)\|t" => "$1+$2t"; // erwarte
		"([Bb]är)\|(ti-?g)" => "$1-$2"; // weissbärtiger (Weissbär-Tiger;)
		"([Hh]o-?[kc]us)-?(po-?[kc]u-?s)" => "$1|$2"; // Hokuspokus
		"([Tt]i-?ckel)-?(ta-?ckel)" => "$1|$2"; // tickeltackel
		"([Hh]er)-?\+?(ein)-?k" => "$1-$2+k"; // hereinkam
		"([Gg]e)-?(nu-?del)" => "$1+$2"; // gutegenudelte
		"([Ee]in)-?(sa-?m)" => "$1+$2"; // Einsamer
		"([Ii]n-?ter)\|(es)\|(sie)" => "$1+$2-$3"; // interessieren
		"([Gg]e\+richts)#(voll)\|z" => "$1|$2-z"; // Gerichtsvollzieher 
		"([Ww]ett-?be)-?(werb)" => "$1+$2"; // Drachenwettbewerb
		"([Mm]äus-?chen)-" => "$1|"; // mäuschenklein (analysis works locally, but doesn't work on server - probably different version hunspell)
		"([Ee])n-?er\+?(gi-?s-?c-?h)" => "$1-ner-$2"; // energisch
		"([Hh]ol)t-?(er)[-+]?(di)-?(pol-?ter)" => "$1-t$2|$3|$4"; // holterdipolter
		"^Der\+p$" => "Derp"; // Clotilde Derp (name) 
		"([Ss]chlei)-?(er)(?!\+)" => "$1-$2+"; // Schleier
		"(zäh)\|(li-?g)" => "$1-$2"; // unzähligen
		"([Tt]e)-?(le)\|(gra)" => "$1-$2-$3"; // Telegraf, Telegramm
		"(schö-?ne)-ru" => "$1r+u"; // Verschönerungen
		"([Kk]on)\+(to)" => "$1-$2"; // Privatkontor
		"([Gg]e)-?(knif)" => "$1+$2"; // zusammengekniffenen
		"([Nn]ach)-?(läs|las)" => "$1+$2"; // vernachlässigt
		"([Gg]lück)\|?(li-?c-?h)" => "$1#$2"; // glücklich-neckenden
		"([Kk]on)\+(zer)\+t" => "$1-$2t"; // konzertieren
		"([Ss]chil)-?de-r" => "$1d-er+"; // Schilderungen
		"([Hh]yst-?e)r\+(i-?sch)" => "$1-r$2"; // hysterisch
		"([Ee]in)-?(lul)" => "$1+$2"; // Einlullungsversuchen
		"(#war)\|t" => "$1t"; // only on server: erwarte
		"-(köpf)-?(chen)" => "|$1-$2"; // Grisettenköpfchen
		"([Gg]e)-?(neh)-?(m)" => "$1+$2-$3"; // unangenehm
		"([Ee]in)-?(tra-?g)" => "$1+$2"; // Eintragung
		"([Aa]n)-?(las-?s)" => "$1+$2"; // Veranlassung
		"(Gla-?cé)-?" => "$1|"; // Glacéhandschuhen
		"([Bb]e\+er)\+(di-?g)" => "$1-$2"; // Beerdingung
		"([Aa]r)\|(ran)\|(gie-?r)" => "$1-$2-$3"; // arrangieren
		"((?:[Ff]|[Pp]h)o-?to)\|(gra-?(?:f|ph))" => "$1-$2"; // Fotograf (but: Fotomodell - two words) + old spelling
		"([Ee]nt)-?(ste-?h)" => "$1+$2"; // Entstehung
		"^([Ii]n)-?t-?(er)\+(n)(e[rsnm]?)?$" => "$1+t$2$3$4"; // intern
		"([Ee]nt)-?(lau-?b)" => "$1+$2"; // entlaubten
		"([Aa]us)-?(stat)" => "$1+$2"; // Ausstattung
		"([Ll]eicht)-?(le-?b)" => "$1|$2"; // leichtlebig
		"([Gg]e[-+]?gen)[-+]?(sei)\|(ti-?g)" => "$1+$2-$3"; // gegenseitiger
		"([Hh]e)\|(rin-?g)" => "$1-$2"; // Heringe
		"([Vv]er)\+(zer)\+r" => "$1+$2r"; // verzerrte
		"([Gg]e)-?(n(?:ä|a)-?h)" => "$1+$2"; // genähert
		"([Kk]om-?bi)\|(nie-?r)" => "$1-$2"; // kombinieren (computers are stupid ... :)
		"([Ee]nt)-?(hül)" => "$1+$2"; // Enthüllung
		"([Nn]as-?s)(trü-?b)" => "$1|$2"; // nasstrüben
		"([Ee]i-?er)(?!\+)" => "$1+"; // Meier, Dreier, Eier etc.
		"([Ff]or)t-?un?-?a" => "$1-tu-na"; // Fortunatussäckel
		"(.+?)(-)?(?<!\|)([Ss]ä-?c-?kel)" => "$1|$3"; // Fortunatussäckel
		"([Ee]in)-?(deu)" => "$1+$2"; // eindeutig
		"([Ww]eh)-?m(u|ü)" => "$1|m$2"; // wehmütige
		"(ü|Ü)b-?(er)\+#(wie)\|g" => "$1-b$2+$3-g"; // überwiegende (überwiegend is correct:)
		"([Ee]r)[+-]?(in-?ne)-?r(?!\+)" => "$1+$2r+"; // Erinnerungen
		"([Kk]it)\|(zel)" => "$1-$2"; // kitzelte
		"([Dd]om)-?(pfaf)" => "$1|$2"; // Dompfaff
		"([Ff]rie-?dens)-?(tau)" => "$1|$2"; // Friedenstaube
		"([Hh]aupt)([aeiou]|ä|ö|ü)" => "$1|$2"; // Haupt-
		"([Ss]chau)\|(kel)" => "$1-$2"; // schaukelten (computers are stupid)
		//"([Nn]a)-?he\|zu" => "$1-he-zu"; // nahezu (no separation) => separate
		"([Ee]-?ben)-?(dem)\|?(sel-?ben)" => "$1|$2|$3"; // ebendemselben
		"([Hh]o-?mer)+" => "$1"; // Homer, homerisch
		"her\+r$" => "herr"; // Ahnherr
		"([Ss]chau)\|(spie).?l" => "$1|$2-l"; // "$1-$2-l"; // Schauspielern (not sure)
		"([Vv]er)\+s(e[ns]?)?$" => "$1s$2"; // Verse
		"Po\|sei\|don" => "Po-sei-don"; Poseidon
		"([Ss]pie-le)\|(rin)" => "$1-$2"; // Flötenspielerinnen
		"([Ee]nt)-(zwei)" => "$1+$2"; // entzweien
		"([Hh]in)-?(ge)-?(brei)" => "$1+$2+$3"; // hingebreitetes
		"(Ver)\+(gil)" => "$1-$2"; 
		"(fan)\|(ge-?n)" => "$1-$2"; // angefangenen
		"([Ff]urcht)\|(sa-?m)" => "$1-$2"; // furchtsamen
		"([Dd]rin)\|(gen)" => "$1-$2"; // dringender
		"([Zz]u)-?(gä-?n-?g)" => "$1+$2"; // unzugänglich
		"([Gg]e)-?(heu-?l)" => "$1+$2"; // Geheul
		"([Nn]eu)\|(gier-?de)" => "$1-$2"; // Neugierde vs Neugier???

		// special problem test: -test ist part of verbal form (2n pers. sg. past)
		// examples: behauptetest, machtest etc.
		// consider this case an eliminate all test at the end, except known correct combinations
		// example: Mathetest, Bluttest etc.
		"(?<!ungs)\|(test)" => { "-$1", "[Bb]lut", "Ma-?t-?he", "Im-?mu-?ni-?tä-?t", "Stress" }; // behauptetest 

		"\|zu\+" => "|zu|"; // bekanntzugeben => this is a audacious rule ... caution: could produce wrong results!

		// designierter: very strange ... correct results on laptop but wrong on tablet and phones ... ?!?!?!?
		// wrong prefix is corrected in analyzer (works with laptops), recorrect it here (hoping it will work with tablets and phones too ...)
//		"([Dd]e)\|" => "$1-"; 
		// ok, this does the trick - but why the hell doesn't it work the same on all devices ... ?!?!?

		"^([Uu]r)-?(ah-?n)" => "$1+$2"; // Urahn
		"([Ee]nt)\+(thron)\|t" => "$1+$2-t"; // entthrontesten

		"(Main)(?!\||$)" => "$1\|"; // Mainufer, Mainkähne etc. 

		"([Ll]e-?se)\|r(in-?nen)" => "$1r+$2"; // Leserinnen (computers are stupid...)

		"#wie\|gen" => "wie-gen"; // schwerwiegenden

		"(schau)\|(un)(?:\+|-)?g" => "$1-$2g"; // Eheanschauungen
		"([Gg]e)\+(ber)" => "$1-$2"; // Gastgeber

		"([Tt]au)\|(sen-?d)" => "$1-$2"; // tausende (computers are stupid)
		"([Bb]er)\+(li-chin-gen)" => "$1-$2"; // Berlichingen

		"([Dd]a)-?(hin)(?![|-])" => "$1#$2|$3"; // dahindöste

		"((?:ö|Ö)f-?fent)-?(lich)" => "$1#$2"; // veröffentlichter

		"([Cc]ou-?ver)\+t" => "$1t"; // Couvert
		"([Ss]e-kret)t" => "$1|t"; // Sekrettröpfchen => why doesn't phpsyllable separate that?!?
		
		"^([Aa]us)-?(br)" => "$1+$2"; // Ausbreitung, ausbrechen etc. => do it here instead of analyzer

		"([Mm]ass)\|(nah-?me)" => "$1-$2"; // Massnahmen (avoid separation)

		// the following rule is now done properly in filter list
		//"([Bb]a-?de)(?!s$|t$|-?te)" => "$1|"; // Badespass => there must be a bug in the analyzer ... Spassbade => recognized; Badespass => not recognized ... why?
		// ok, found the problem: de| is in the filter list, therefore all valid words ending in -de| are
		// transformed to -de- (which is wrong):
		// examples: Badespass, kreideweiss
		// solution: exclude these cases from filterlist using a negativ lookbehind: (?<![Bb]a-|[Kk]rei-)de|
		// doesn't work! (Probably because analyzer escape the filter regex ... !?) => needs more analysis
		// Ok, it turns out that the apply_filter function was a mess ... It didn't support full regex.
		// This has been fixed, so that the above regex (with lookaround) works
		// Ok, so this wasn't the solution (new alogrithm made server hang ... )
		// In the end, I think it is better to disable filter functionality and replace it by analyzer rules:
		// (1) this is perfectly possible since analyzer rules get executed for every word (like filter)
		// (2) analyzer rules offer full regex
		// (3) analyzer rules can be debugged (this can't be done with filter)
		// so here's the regex-rule for Badespass and kreidebleich:
		"(?<![BbLl]a-|[Kk][rl]ei-|[Pp]fer-|[Hh]än-|[Hh]un-|[Hh]ei-|[Mm]o-|[Pp]a-ra-|[Ww]ei-|[Bb]in-)[Dd]e\|(?!zu$|aus$|wegs)" => { "de-", "[Gg]e\+?ra-?de\|(?:he-?r)?", "^Ge\+?trei-?de", "^Re-de", "\|zu\|", "[Gg]e.?mein.?de" }; // not: geradeaus, geradeso, geradewegs, geradeheraus; special: geradezubiegen (don't delete | around zu)

		"([Bb]as-?ket)-?(b(?:a|ä)l-?l)" => "$1|$2"; // Basketball, -bälle

		"([Vv]er)\+(miss)\+(test)" => "$1+$2-$3"; // vermisstest

		"([Ss]o-?fa)l-?(eh-?ne)" => "$1|l$2"; // wrong syllabation by phpsyllable

		"([Aa]b)\-?(ge)\-?(ra\-?ck)" => "$1+$2+$3"; // abgerackert
		"([Zz]u)-?(fluchts)-?" => "$1+$2|"; // Zufluchtsstätte

		"([Bb]in)\|(den)" => "$1-$2"; // Bartbindenplakate
		"([Ss]char)\|(lach)" => "$1-$2"; // Scharlach
		"([Rr]an)\|(gie-?r)" => "$1-$2"; // ausrangierten

		"([Ll]uz-?er)\+n" => "$1-n"; // Luzerner
		"([Bb]e\+?hör)\|(den)" => "$1-$2"; // Behördenmitteilung
		"([Kk]u-?ba)\|(ni-?sche)" => "$1-$2"; // kubanische (computers are stupid ...)
		"([Gg]e\+?ra-?de)#so" => "$1|#so"; // geradeso
		"(Bin-?d-?e-?ger)(st)" => "$1+$2"; // Name
		"([Dd]en)\|krei" => "$1k|rei"; // Denkreise

		"([Zz]wie)\+" => "$1|"; // Zwielicht (avoid -lich)
		"^([Zz]wie)-?" => { "$1|", "[Zz]wie-?[b|]" }; // general rule, e.g. zwielichtig (lichtig doesn't exist as standalone word)

		"^([Vv]er)\+?(un)-?" => "$1+$2+"; // verunmöglicht
		"^([Ww]er)\|de" => "$1-de"; // Werdegang
		"^([Ee]r)\+?(ra-?ti)" => "$1-$2"; // erratisch
		"^(Kon)\+(ra-?d)" => "$1-$2"; // name
		"^([Rr]au)-?b(lüs-?t)" => "$1b|$2"; // raublüstern
		"^([Pp]fer-?de)-?(ku-?r)" => "$1|$2"; // Pferdekur

		"^([Ee]r)-?(den-?k)" => "$1+$2"; // erdenkliche 

		"^([Ww]ie-?sen)-?(tha-?l)" => "$1#$2"; // name => mark it with # so that entire word can be tested in shortener
		"^([Zz]u-?c-?ker)-?(?!\+)" => "$1+"; // Zuckerzeug

		"(?<!#)-?(li-?c-?h)(u-?n-?g)(en)?$" => "#$1$2$3"; // Veröffentlichung(en)
		"([Ee]x)-?(p-?er)\+t" => "$1$2t"; // Gesundheitsexperten
		"([Hh]er)-?\+?(aus)-" => "$1-$2#"; // Herausforderer
		"([Pp]ro)\|(tes-?t)" => "$1-$2"; // Proteste
		"([Vv]er\+sa)\|g" => "$1-g"; // Versagens
		"^([Aa]b)\+(ge)\+b(?![lr])" => "$1+$2-b"; // abgebe, not: abgeblendet

		"(^|=|\|)([Bb]e)\|" => "$1$2+"; // Be|treiber
		"(^|=|\|)([Vv]or)\|" => "$1$2+"; // Vor|würfe
		"(^|=|\|)([Zz]u)\|" => { "$1$2+", "[Gg]e.?ra-?de\|zu\|" } ; // Zu|stand, not: gerade|zu|biegen
		"(^|=|\|)([Gg]e)\|" => "$1$2+"; // Fan-Ge|meinde
		"(^|=|\|)([Uu]n)\|" => "$1$2+"; // Un|fall
		"(^|=|\|)([Aa]us)\|" => "$1$2+"; // Aus|flugsort
		
		"([Kk]on)-?z-?er\+n" => "$1-zer-n"; // Stromkonzerne
		"(ren)\|(tie-?r)" => "$1-$2"; rentieren vs Rentieren (Ren-Tieren) - computers are stupid .... 
		"([Aa]r-?bei-?te)\|r(in)" => "$1r+$2"; // Mitarbeiterinnen
		"(Frei)\+(burg)" => "$1-$2"; // Freiburg

		"([Ww]ei)h\|(n(?:a|ä)ch-?t)" => "$1-$2"; // Weihnacht (that's the way it is ...)
		
		// Velotransport: written differently on server vs local system
		// most probable explanation: server uses a different dictionary
		// probably the de_de variant instead of de_ch => swiss word "Velo" is not recognized
		// solution (for now): include "Velo(s)" in stems list

		// prefix auf- => try to formulate a general rule
		"(^|-|\+|\|)([Aa]uf)-([abdeghklnpqrswz])" => "$1$2+$3";
		"(^|-|\+|\|)([Aa]us)-([abdghklnpqrwz])" => "$1$2+$3";

		"([Aa]l)l-?(er)\+g" => "$1-l$2-g"; // allergisch

		// try to formulate more general rules
		"([bfglnprs])\|(tes-?t)(e[rsnm]?)?(\+)?$" => { "$1-$2$3$4", "Stress", "ungs\|tes-?t" };

		"([Pp]i)\|(lo-?t)" => "$1-$2"; // Piloten
		"([Ii]n)-?s-?t" => "$1+st"; // Instagram

		"([Kk]alt)\+(her-?zi-?g)" => "$1|$2"; // kaltherzigen
		"(Co)\|(rin-?ne)" => "$1-$2"; // Corinne
		"(wer)\|(ti-?g)" => "$1-$2"; // gleichwertiger (Computers are stupid ... :)
		"([Ss]pie)\|(ler)" => "$1-$2"; // Spielern - computers are stupid ... :)
		"([Bb]e[-+]fug)\|(nis)" => "$1-$2"; // Befugnisse

		"([Aa]uf\+recht)\+(?!$)" => "$1|"; // aufrechterhalten => separate

		"([Aa]m)\|(man)" => "$1-$2"; // Ammann
		"([Ii]m)\|(mo-?bi-?l)" => "$1-$2"; // Immobilien
		"-(sum-?men?)$" => "|$1"; // -summe

		"([Aa]h-?nungs)-?(ver)" => "$1|$2"; // Ahnungsvermögen
		"([Ss]chmer-?zen)\|s(e-?he)" => "$1s|$2"; // Schmerzensehe
		"([Ee]in\+?lul-?lungs)-?(ver)" => "$1|$2"; // Einlullungsversuchen
		"([Hh]erbst)(aus)[-+]?" => "$1|$2+"; // Herbstausverkauf

		"^(Bär)(ts)-?(chi)" => "$1-$2$3"; // Bärtschi (name)
		"^(Wer)\+(ner)" => "$1-$2"; // Werner (name)

		"^([Bb]e\+o)b\|(ach-?t)" => "$1-b$2"; // Beobachtungsabteilung
		"([Bb]in)\|(dung)" => "$1-$2"; // Verbindungstür
		"([Aa]uf)-?(mun-?t)" => "$1+$2"; // aufmuntern
		"([Aa]uf\+recht)\|zu\+(er\+hal-ten)" => "$1|zu|$2"; // aufrechtzuerhalten
		"([Ss]u-?b-?al-?t-?er)\+?n" => "$1$2n"; // subalterne
		"^([Aa]us)-?(fr)" => "$1+$2"; // Ausfragerei
		"([Tt]an-?go)s-?(chri)" => "$1|s$2"; // Tangoschritt 
		"([Aa]uf)(#war)" => "$1+$2"; // aufwarten
		"([Rr]echt)[+-]?(wink-li-?g)" => "$1|$2"; // rechtwinklig
		"(ge)-?(neig-?t)" => "$1+$2"; // schiefgeneigt

		"([Ww]al)\|(len-?de)" => "$1-$2"; // Wal-Lende (Computers are stupid ... and funny! :):):)

		"([Tt]rau)-?m-?(un)-?(ge)-?(tü-?m)" => "$1m|$2+$3+$4"; // Traumungetüm
		"([Dd]op-?pel)-?(ver.?d)" => "$1|$2"; // Doppelverdienertum

		"([Ll])(?:e|é)-?g-?(?:e|è)-?r.?er\+" => "$1e-ger-er+"; // legerer (lé-gè-rer+)
		"^([Ss]o).?(und).?(so)$" => "$1|$2|$3";

		"([Ww]aadt)-?l" => "$1|l"; // Waadtland (purists probably are not going to agree, since England is written with @l3 ... nevermind:)

		"([Rr]e-?de)#?(wen-?dung)" => "$1|$2"; // Redewendung
		"([Mm]aus)(to-?t)" => "$1|$2"; // maustot (why doesn't phpsyllable recognize any syllable here?)

		"([Aa]uf)-?g-?e-?r\+?eg(-?t)" => "$1+ge+reg$2"; // aufgeregter
		"([Ss]cheu-?nen)-?(dre-?scher)" => "$1|$2"; // another strange case where phpsyllable doesn't recognize the syllables
		"([Rr]echt)-?(sch)" => "$1|$2"; // rechtschaffenen
		"([Aa]sth?-?ma)\|(ti-?sch)" => "$1-$2"; // asthmatische (Computers are stupid ...)
		"([Aa]uf)-?(mer-?k)" => "$1+$2"; // aufmerksam
		"([Aa]uf).?(ge)-?(bahr)" => "$1+$2+$3"; // aufgebahrt
		"([Ss]top-?pe)\|(li-?g)" => "$1-$2"; // stoppeligen
		"([Aa]uf).?(g-?e)(r.?ei-?s)" => "$1+ge+$3"; // aufgereiset (schweizerdeutsch)
		"([Ff]eg)-?(lum-?pen)" => "$1|$2"; // Feglumpen
		"([Aa]n).?(gi.?na)" => "$1-$2"; // Angina
		"((?:[Uu]n|[Rr]e).?kon)-?(?!\+)" => "$1+"; // unkontrollierbar 
		"([Pp]an)\|(zer)" => "$1-$2"; // Panzerkreuzer
		"([Ff]ar-?b-?en)-?(tu-?p-?f)" => "$1|$2"; // Farbentupf (helv.)
		"([Gg]e)#(wan-?n)" => "$1+$2"; // gewann
		"([Gg]eh).?(rö.?c.?ken)" => "$1|$2"; // Gehröcken
		"^([Uu]n.)?([Ee]nt).(st|sch)" => "$1$2+$3"; // entstandene, unentschiedene
		"^In.?ter.?es.?sen.?ge.?mein" => "In-ter+es-sen|ge+mein"; // Interessengemeinschaft (completely wrong ...)
		"([Aa]n).?(ge).?(bie).?(der)" => "$1+$2+$3-$4"; // angebiedert
		"([Gg]e).?(ne.?se)" => "$1+$2"; // genesen
		"([Bb]e).?(nen.?n)" => "$1+$2"; // Benennung
		"([Vv]er).?di.?e(.?n)" => "$1+die$2"; // verdien
		"(isch.?li).?(schub.?la.?de)" => "$1|$2"; // Nachttischlischublade (eh ben oui ... :)
		"^([Ss]chön).?(ge).?" => "$1|$2+"; // schöngestrählt
		"([Ss]ei)\|(et)" => "$1-$2"; // seiet
		"([Ee]in)-?(sich)" => "$1+$2"; // Uneinsichtigkeit
		"([Gg]e)-?(nies-?s)" => "$1+$2"; // geniessen 
		"([Nn]eu)\|(ro.?se)" => "$1-$2"; // Neurose (Computers are ... poets:)
		"(^|\|)(O.?ber)(st)" => "$1$2+$3"; // Oberst
		"([Bb]e).?(stal.?l)" => "$1+$2"; // wohlbestallter
		"^(Thor).?(ber).?g$" => "$1-$2g"; // Thorberg (name)
		"([Dd]i).?(ver).?s" => "$1-$2s"; // divers
		"([Bb]ärn).?(dü.?t.?sch)" => "$1|$2"; // bärndütsch (helv.)
		"([Ss]er-vie)r.?(et)" => "$1-r$2"; // servieret euch (Glauser)
		"([Pp]fle).?(ge).?r(in)" => "$1-$2r+$3"; // Pflegerinnen
		"([Cc]h)\|(a-?bis)" => "$1$2"; // Chabis (Glauser)
		"([Zz]wei).?(rä.?d)" => "$1|$2"; // zweirädrig
		"([Ww]acht).?(meisch.?ter)\+?" => "$1|$2+"; // Wachtmeischter (Glauser, helv.)
		"([Rr]echt)\+?(ecki-?g)" => "$1|$2"; // rechteckigen
		"([Bb]e)-?(schürz-?t)" => "$1+$2"; // weissbeschürzten
		"(é)\|(mi-?nen-?ce)" => "$1-$2"; // l'éminence
		"(Frank)\|(reich)" => "$1-$2"; // Frankreich (write it in one word)
		"([Aa]n).?(ge).?(br)" => "$1+$2+$3"; // angebracht, angebrochen
		"([Aa])(sch)t.?(al.?t)" => "$1|$2|t$3"; // Aschtalt (dialect: consider a- as prefix, avoid &t)
		"([Ss]enk)\|(rech-?t)" => "$1-$2"; // senkrecht
		"(ü|Ü)-?ber\+?e-?keit" => "$1-be-re|kheit"; // überekeit (dialect)
		"(Wirr)-?(warr)" => "$1|$2"; // Wirrwarr
		"([Mm]i-?ni)\|(ma.?l)" => "$1-$2"; // minimal
		"([Pp]o-?si-?ti-?vi-?täts)-" => "$1|"; // Positivitätsrate
		"([Nn]ach\+las)\|(sen-den)" => "$1-$2"; // nachlassenden
		"([Ss]ei)\|(d's$)" => "$1$2"; // ihr seid's
		"([Pp]sy-?cho)\|(ti-?s-?c-?h)" => "$1-$2"; // psychotisch (due to introduction of psycho as stem)
		"([Pp]sy-?cho)\|(lo-?g)" => "$1-$2"; // Psychologe, Psychologie (idem)
		"([Gg]e).?(ni-?c-?k)" => "$1+$2"; // Genick, zugenickt
		"([Kk]u-?chi)-?(meit-?schi)" => "$1|$2"; // Kuchimeitschi (schweizerdeutsch)
		"([Aa]l-?(?:p-?h|f)a)\|(be).?(ti.?s.?c.?h)" => "$1-$2-$3"; // alphabetisch
		"([Pp]a-?tel-?lar)-?(?!\|)" => "$1|$2"; // Patellarreflex
		"([Ss]ach)\|(li-?c-?h)" => "$1#$2"; // sachlich-wissenschaftlich
		"([Bb]ät-?zi)-?" => "$1|"; // Bätziwasser
		"([Vv]er.?schwö.?rungs)-?" => "$1|"; // Verschwörungstheorien
		"([Pp]i)\|(kan-?t)" => "$1-$2"; // pikante
		"([Bb]e).?(in).?(hal)" => "$1+$2+$3"; // beinhaltete
		"([Bb]ett)-?lä" => "$1|lä"; // bettlägerig (I know - purists wont agree ... :o)
		"Be.?ton(\||$)" => "Be-ton$1"; // Beton vs (ich) beton
		"\|be.?ton(\||$)" => "|be-ton$1"; // Beton vs (ich) beton
		"([Dd]et-?er).?m" => "$1m"; // Determination, determinieren (cut syllable)
		"([Bb]\')-?(rich-?te-?t)" => "$1|$2"; // b'richtet (schwzdtsch)
		"([Hh]err-?gotts)\|(donn-?e-?r)" => "$1-$2"; // Herrgottsdonnere (avoid separation)
		"(Her).?(ber).?t" => "$1-$2t"; // Herbert
		"([Ee]x)\|(por-?t)" => "$1-$2"; // Viehexportgeschäften
		"([Gg]i-?let)-?(t)" => "$1|$2"; // Gilettäschli
		"e-?rin(-?nen)?$" => { "er+in$1", "^[Gg]u-?e-?rin" }; // Einwohnerinnen
		"([Pp]a-?na-?ma)-?(?!\|)" => "$1|"; // Panamahut
		"Lie-?b-?und-?gut" => "Lieb|und|gut"; // name
		"([Aa]b)-?(len-?k)" => "$1+$2"; // Ablenkungsmanöver
		"([Zz]u).?(o.?b).?(er).?(st)" => "$1+$2$3+$4"; // zuoberst
		"([Jj]ung)\|(fer)" => "$1-$2"; // Jungfern
		"([Ss]ich-?le-?ten)-" => "$1|"; // Sichletennacht
		//"([Zz])(\')-?(mor)" => "$1$2$3"; // z'Morge => more general rule needed
		"(Nacht).?(tischli).?(schub).?(läd-?li)" => "$1|$2|$3|$4"; // Nachttischlischublädli
		"([Aa]us).?(fluchts?)-" => "$1+$2|"; // Ausfluchtsmanöver
		"(^|\||\+)([Gg]e)-(wo)" => "$1$2+$3"; // niedergeworfen
		"([Dd])'\|?(sich-?le-?te)" => "$1'$2"; // d'Sichlete (helv.)
		"(ge)-(schl)" => "$1+$2"; // niedergeschlagen
		"([Ww]ar)\|(nun)" => "$1-$2"; // Warnungen
		"^([Zz])\'\|([a-zA-Z])" => "$1|'|$2"; // z'Tanz
		"([Hh]in)\|(un-?ter)" => "$1-$2"; // hinunterstürzen
		"([Ee]in)-?(trä)" => "$1+$2"; // einträgliche
		"([Ww]eih?)-?(nacht)-?s(?!\|)" => "$1-$2s|"; // Weihnachtstrubel
		"(^|\|)([Kk]er)\+n" => "$1$2n"; // Kern, Grünkern
		"^([Zz]er)\+(r)\|" => "$1$2-"; // Zerrbild (replace | to avoid separation)
		"([Pp]lä-?do)y-?er\+" => "$1-yer"; // Plädoyer
		"([Mm][ia]-?kro)\|" => "$1-"; // Mikrokosmos, Makrokosmos
		"([Pp]sy-?cho)\|(gen)" => "$1-$2"; // psychogenreaktiv
		"(=[Aa]uf)\|" => "$1+"; // -Aufruf
		"([bB]oy)\|(kot)\|t" => "$1-$2-t"; // boykottieren
		"([Zz]u)-?(s(?:ä|a|e)-?t-?z)" => "$1+$2"; // zusätzlich
		"(dach)\|(lo-?s)" => "$1+$2"; // Obdachlos
		"([Vv]or).?h-?er+i" => "$1+he-ri"; // vorherigen
		"([Pp]o-?le)\|(mi-?sch)" => "$1-$2"; // polemische
		"(schrei)\|(tun-?g)" => "$1-$2"; // Unterschreitungen
		"([Gg]e)-?(mä-?s-?s)" => "$1+$2"; // erwartungsgemäss
		"([Ss]te)r\+eo" => "$1-re-o"; // Stereotypie
		"(pro-fi)\|(tie-?r)" => "$1-$2"; // profitieren (hm ... Profitieren = Profi-Tieren?:)
		"(An)\+(ni-?na)" => "$1-$2"; // Annina
		"([Aa]us).?(führ)" => "$1+$2"; // remote hunspell doesn't recognize führ as separate word => prefix is not recognized => needs further investigation!
		"([Ee]in|[Zz]wei|[Dd]rei|[Vv]ier|[Ff]ünf|[Ss]echs|[Ss]ie?-ben|[Aa]cht|[Nn]eun|[Zz]ehn|[Ee]lf|[Zz]wölf])-?(tau-?se)" => "$1|$2"; // zweitausendachthundert
		"([Ee]in|[Zz]wei|[Dd]rei|[Vv]ier|[Ff]ünf|[Ss]echs|[Ss]ie?-ben|[Aa]cht|[Nn]eun|[Zz]ehn|[Ee]lf|[Zz]wölf])-?(hun-?der)" => "$1|$2"; // achthundert
		"([Vv]er)\+(ti-?k)" => "$1-$2"; // vertikal
		"([Gg]lor)-?(rei-?ch)" => "$1|$2"; // glorreich
		"([Zz]u)-?(frie-?de-?n)" => "$1+$2"; // zufriedener
		"([Aa]us)-?(sät-?z)" => "$1+$2"; // aussätzig
		"([Ww]o)\+(gen)" => "$1-$2"; // wogenden
		"([Aa]ch)\|(tun-?g)" => "$1-$2"; // Beobachtungen
		"([Ss]pie)\|(len)" => "$1-$2"; // spielenden (from the series: computers are stupid ... :)

		"([Bb]ei).?z(e.?r(?:.?in.?(?:nen)))?" => { "$1z$2", "^[Bb]ei[-+]?zu", "^[Dd]a\+bei\+zu", "^[Vv]or\+bei\+z" }; // Beiz, not: beizubringen, vorbeizog
		"^([Vv]er)(?:\+|-)?ge[-+]?b[-+]?li-?c-?h" => "$1+geb#lich"; // vergeblich
		"([Gg]e).?b-?(li-?c-?h)" => { "$1+b$2", "^[Aa]n[-+]?ge[-+]?b-?l" }; // geblichen, not: vergeblich (see line before), not: angebliche
		"^([Aa]n)[-+]?(ge)[-+]?b-?li-?ch" => "$1+$2b#lich"; // angebliche
		"([Dd]e).?bat.?tie" => "$1-bat-tie"; // debattieren
		"([Hh]a-?be)-?(nicht-?s)" => "$1|$2"; // Habenichtse
		"([Ee]nt)-?(ar-?t)" => "$1+$2"; // Entartung
		"^([Dd]r)in$" => "$1+in"; // drin
		"(en)(glei-?c-?h)" => "$1|$2"; // sternengleich: probably a bug in PHPSyllable
		"^([Hh]er)-?tr" => "$1+tr"; // hertragen 
		"([Ss]ie)\|(gel)" => "$1-$2"; // versiegelten (computers are stupid ... :)
		"([Ss]e-?pi)a" => "$1-a"; // Sepiagemälde
		"([Uu]n)-?ge-?heu" => "$1+ge+heu"; // Speckstein-Ungeheuers
		"Ei\|sen-k" => "Ei-sen|k"; // Eisenkeule (very strange ... is analyzed: Ei|sen-keu-le ... ?!)
		"^([Ll]os)s-tür" => "$1+stür"; // losstürzte (bug in PHPSyllable I suppose ...)
		"([Ee]nt)-?(gel-?t)" => "$1+$2"; // Entgelt
		"([Ss]al)-?zin-kr" => "$1z|in+kr"; // Salzinkrustation
		"([Ff]uhr-?mann)-?s(peit)" => "$1s|$2"; // Fuhrmannspeitsche
		"^([Ee]is)(sa)" => "$1|$2"; // Eissaum
		"(i-?ums)(tü-?r)" => "$1|$2"; // Laboratiumstür
		"([Ii]nt-?er-?vi)(ew)" => "$1-$2"; // Interview
		"(las)\|(sen-?d(?:-?st|-?er)?e?[rnms]?)$" => "$1-$2"; // herablassende
		"([Ss]inn)\|(bild)\|(li)" => "$1-$2-$3"; // versinnbildlichen
		"tu\|en(-?d)" => "tu-en$1"; // diensttuend
		"([Bb]e)[-+]?(tress-?t)" => "$1+$2"; // goldbetresst
		"(?<!\|)([Ss])-(tie-?fel)" => "|$1$2"; // Reitstiefel, sacré PhpSyllable ... strange separtions ... !
		"(^|\||\+)([Ee]nt)-?(sp)" => "$1$2+$3"; // entsponnen 
		"(?<!\|)-?(glie)-?d-?(ri-?g)" => "|$1-d$2"; // zehngliedrig
		"^([Ee]i)\|(li-?g)" => "$1-$2"; // eiligen
		"(?<!\|)-?(far-?be-?n)" => "|$1"; // rosafarben
		"([Ee]r\+run)\|(ge-?n)" => "$1-$2"; // Errungenschaft
		"([Tt]au-?ge)-?(nich-?t-?s)" => "$1|$2"; // Taugenichts
		"(walt)\|(sa-?m)" => "$1-$2"; // gewaltsamen
		"([Ee]in[-+]?fahrts)-?(?!\|)" => "$1|"; // Einfahrtstores
		"([Ee]i)#che" => "$1-che"; // Eichen
		"([Ee]-?go)\|(is-?t)" => "$1-$2"; // Egoist
		"([Pp]fer-?de)-?(?!\||$|n|s$)" => "$1|"; // Pferdegetrappel, not: Pferden
		"([Gg]e)-?(tr)" => "$1+$2"; // Pferdegetrappel
		"([Rr]e-?stau)\|(ra-?t)" => "$1-$2"; // Restauration
		"([Ss]o)-?(for-ti-g)" => "$1+$2"; // sofortigen
		"([Hh]ie)\|(nie)" => "$1-$2"; // hienieden
		"(spie)\|(lun-?g)" => "$1-$2"; // Anspielungen (computers are stupid ... :)
		"([Aa]n)-?k-?(rän-?k)" => "$1+k$2"; // ankränkelt
		"([Dd]es)[-+]?(po-?tis)\|m" => "$1-$2-m"; // Despotismus
		"([Dd]es)[-+]?(po)\|(ti)" => "$1-$2-$3"; // despotischen (computers are studid ... :)
		"([Gg]u-?te)n\|(acht)" => "$1|n$2"; // Gutenachtkuss
		"([Ll]au)\|(ni-?s)" => "$1-$2"; // launischen (computers are stupid ... :)
		"([Ee]nt)-?(sa-?g)" => "$1+$2"; // Entsagung
		"([Bb]e\+red)\|(tes)" => "$1-$2"; // beredtesten (computers are stupid ... :)
		"^([Ii]n)[-+]?(sich)\|" => "$1|$2|"; // Insichaufnehmen
		"([Aa]b)-?(trün)" => "$1+$2"; // Abtrünnigkeit
		"(set)\|(zun-?g)" => "$1-$2"; // Voraussetzungen (computers are studid ... :)
		"([Bb]ei)-?(sam-men)-?s" => "$1+$2|s"; // Beisammensitzens
		"^([hH]i)-?nop" => "$1n+op"; // hinopfern
		"([Bb]ei)\+(der)" => "$1-$2";
		"([Gg]el)\|(len)" => "$1-$2"; // gellenden (computers are stupid ... :)
		"([Ee]nt)-?(le-?g)" => "$1+$2"; // entlegenen
		"([Aa]uf)[-+]?(ge)-?(hell)" => "$1+$2+$3"; // aufgehellt
		"([Ee]nt)-?(fr)" => "$1+$2"; // entfremdete
		"([Gg]e)\|(fähr-?t)" => "$1-$2"; // Leidensgefährte
		"(\|ge)-?zw" => "$1+zw"; // niedergezwungene
		"^([Ss]ä)-?(ma)" => "$1|$2"; // Sämann, Sämaschiene
		"Van\|den\|es" => "Van-den-es"; // Vandenesse (name)
		"(?<![Gg])([Ee]nt)-?(le)(?!i)" => { "$1+$2", "[Ee]n-?t-?le-?bu-?c-?h" }; // entledigt (not: Entlein, Gentleman)
		"([Zz]weit)-?(ran)" => "$1|$2"; // zweitrangig
		"([Ll]os)s-?(teu)" => "$1+s$2"; // lossteuert
		"^([Uu]r)-?s-?pr" => "$1+spr"; // ursprüngliche
		"-nun-ge-tü" => "n|un+ge+tü"; // Wolkenungetüm
		"([Ss]chal)\|(len)" => "$1-$2"; // schallende (Computers are stupid ... :)
		"^([Bb]ei)\+(de)" => "$1-$2"; // beidemal
		"([Ww]eit)-?r" => "$1|r"; // weiträumigen
		"(ja)\|(gen-?d)" => "$1-$2"; // Jagender
		"(he)r\+(um)$" => "$1-r$2"; // 
		"(Pi)\|(ra-?ten)" => "$1-$2"; // Piratenschiff (Computers are stupid ... :)
		"([Ww]eis)-?(sa-?g)" => "$1|$2"; // Weissagung (not in the book - but I think it should be treated as 2 words)
		"([Ee]n)t[-+]?er(?!b|-b)" => "$1-ter"; // Enterhaken, not: enterbt, enterben
		"([Ee]r)-?(beu-?t)" => "$1+$2"; // erbeutete
		"([Hh]er)-?(rol)" => "$1|$2"; // herrollte
		"([Ee]r)-?(strah-?l)" => "$1+$2"; // erstrahlen
		"([Mm]it)[-+]?(zu)[-+]?(er)[-+]?(le-?b)" => "$1|$2|$3+$4"; // mitzuerleben
		"([Ee]r[-+]lauch)\|t" => "$1-t"; // Erlauchteste (Computers are stupid ... :)
		"([Aa]us\+zu)m-?er\+gel" => "$1+mer-gel"; // auszumergeln
		"([Ee]-?lek-?tro)\|(ni-?sch)" => "$1-$2"; // elektronische (Computers are stupid ... :)
		"([Uu]n)-(aus)-" => "$1+$2+"; // Unaussprechliches
		"([Ww]and)\|(lun-gen)" => "$1-$2"; // Anwandlungen (computers are stupid ... :)
		"((?:ü|Ü)-?ber[-+]?)(ge)\+(be)(?!u)" => "$1$2-be"; // übergebe, not: vornübergebeugt
		"([Zz]u)-?(se-?hen)" => "$1+$2"; // zusehends
		"([Rr]e-?ge)\|(lun)" => "$1-$2"; // Regelungen (computers are stupid ... :)
		"([Hh]er)-(vor)-" => "$1+$2+"; // hervorragendsten

		"([Hh]och)-?(leh-?ni-?g)" => "$1|$2"; // hochlehnigen
		"(^|\|)([Mm]o-di)\|(sch)" => "$1$2-$3"; // altmodischer
		"([Bb]e\+scher)\+t" => "$1-t"; // bescherten
		"([Ii]n-?ter[-+]?)\|?es\|?(sie-?r)" => "$1es-$2"; // interessieren
		"(Sher)\+(lock)" => "$1-$2"; // Holmes :)
		"(^|\|)([Ee]nt)-?n" => "$1$2+n"; // entnehmet
		"(^|\|)([Zz]u)-?(ge)-?f" => "$1$2+$3+f"; // zugefüget
		"([Gg]e[-+]wand)\|t" => "$1-t"; // gewandteste (computers are stupid ... :)
		"([Gg]e[-+]wal)\|t" => "$1-t"; // gewaltiger (computers are stupid ... :)
		"([Ee]i-?gen\|ar)\|t" => "$1-t"; // eigenartiger (computers are highly stupid ... :)
		"([Bb]e)[-+]?(rück)-?s" => "$1+$2+s"; // berücksichtigte
		"([Kk]on)[-+]?s-?er[-+]?(va)" => "$1+ser+$2"; // konservativ
		"([Vv]er[-+]?)(rück)\+(tes)" => "$1$2-$3"; // Verrückteste
		"([Vv]ier)\|(zi-?g)" => "$1-$2"; // vierzig
		"-(tau-?sen-?d)" => "|$1"; // -tausend
		"([Aa]n)[-+]?(ge)-?(le-?g)" => "$1+$2+$3"; // angelegentlichst
		"^([Kk]alt)-" => "$1|"; // Kaltschnauzigkeit
		"^(Stap-?le)\|(ton)" => "$1-$2"; // Stapleton (name)
		"^([Ww]ie)\|(sen)[-+]?(ge)\|(vier)" => "$1-$2|$3+$4"; // Wiesengevierten
		"^([Ee]i)\|(che)" => "$1-$2"; // Eichen
		"(Fel-?sen)(?!\||-|$|s$)" => "$1|"; // Felsenklippen
		"([Tt]au-?send)(?!\||-)" => "$1|"; // tausendkerzige
		"(^|\|)([Kk]er)\+z" => "$1$2-z"; // tausendkerzige
		"([Zz]u\+sam-men)\+(sein)" => "$1|$2"; // Zusammensein
		"([Cc]ho)l-?er\+i" => "$1-le-ri"; // cholerisch
		"([Ww]and)-?(ge)-?" => "$1|$2+"; // Wandgetäfel
		"([Dd]op-?pel)tr" => "$1|tr"; // Doppeltreppe
		"([Ff]ort)[-+]?(zu)[-+]?" => "$1+$2+"; // fortzugraulen
		"([Ll]eb)-?(ta-?g)" => "$1|$2"; // Lebtage
		"(^|\|)([Ee]nt)-?(m|fl|d|h)" => "$1$2+$3"; // entmutigt, entflohenen, neuentdeckt, enthaartes
		"^([Ww]arn)\|" => "$1-"; // Warnbrief => cancel word separation; otherwhise VSTENO will recognize word "war(e)n" 
		"([Bb]e[-+]hau)\|(sun)" => "$1-$2"; // Behausungen
		"([Hh]ier)\|(her)" => "$1-$2"; // hierhergekommen
		"([Vv]er[-+]heim)\|(lich)" => "$1-$2"; // verheimlichte
		"([Ss]chei-?t-?er[-+])h" => "$1|h"; // Scheiterhaufen
		"([Ss]par-?ta)\|(ni)" => "$1-$2"; // spartanischen (computers are stupid ... :)
		"([Ll]au)\|(er)(st)" => "$1-$2+$3"; // lauerst (computers are stupid ... :)
		"([Ss]topp)\|(li-?g)" => "$1-$2"; // stoppligen
		"([Rr]e-?f)e-?r(?!\+)" => "$1er+"; // Referat, referieren
		"([Dd]ar)-?(le-?h)" => "$1+$2"; // Darlehen
		"([Aa]h-?nungs)-?(lo-?s)" => "$1#$2"; // Ahnungslose
		"([Ll]os)-?s-?(pra-?n-?g)" => "$1-s$2"; // lossprang
		"([Uu]m)-?(loh-?t)" => "$1+$2"; // feuerumlohten
		"([Ee]in)s-?(an-?k)" => "$1+s$2"; // einsanken (computers are stupid ... :)
		"([Ss]tief)-?(toch)" => "$1|$2"; // Stieftochter
		"^(War)\|(tau)" => "$1-$2"; // Wartau
		"^([Bb]lei)h-?am" => "$1|ham"; // Bleihammer
		"([Tt]heo)\|(lo-?g)" => "$1-$2"; // Theologe
		"([Rr]än-?ke)-?(haf)" => "$1#$2"; // ränkehaft
		"^([Oo]h-?ne)(#hin)" => "$1|$2"; // ohnehin
		"([Pp]ro-?be)\+(auf\+tr)" => "$1|$2"; // Probeauftrag
		"([Pp]ro-?kon)-?s" => "$1+s"; // Prokonsul
		"([Rr]e)-?(in)-?(fek|fi-?z)" => "$1+$2+$3"; // Reinfektion, reinfizieren
		"([Rr]e-?kla-?me)-?(haf)" => "$1#$2"; // reklamehaft
		"([Aa]n)\+(ten-?ne)" => "$1-$2"; // Antenne
		"^([Dd]e)-?m-?(ent)-(ge-?gen)$" => "$1m+$2+$3"; // dementgegen
		"([Kk]o)-?n(-?os-?se-?men-?t)" => "$1n+$2"; // yes .. of course ..
		"^([Ee]hr)-?(ver)" => "$1|$2"; // Ehrverletzung
		"([Ss]tie-?fel)#?(sch(?:a|ä)f-?t)" => "$1-$2"; // Stiefelschaft
		"^([Dd]a)\+(mas-?t)" => "$1-$2"; // Damast
		"^([Dd]e)r\+(i-?v)" => "$1-r$2"; // Derivat
		"^([Dd]es)[-+]?(in)-?f" => "$1+$2+f"; // desinfizieren
		"^([Vv]or)[-+]?(der)[-+]?(tei-?l)" => "$1+$2+|$3"; // Vorderteil
		"^([Aa]uf)-?s-?p-?r" => "$1+spr"; // aufsprühte
		"^([Ww]eh)t-?(a-?t)" => "$1|t$2"; // wehtat
		"([Ss]in)g\|a\|p" => "$1-ga-p"; // Singapore
		"^([Aa]n)-?(sons-?ten)$" => "$1+$2"; // ansonsten
		"([Ww]en)\|(dung)" => "$1-$2"; // Verwendungszweck
		"([Hh]in)\+du($|s$|is)" => "$1-du$2"; // Hindu
		"^([Hh]int-?an)-?(?!\+)" => "$1+"; // hintansetzen
		"^([Ii]n)[-+]?(kon)-" => "$1+$2+"; // inkongruent
		"^([Ii]n)\+(di-?go)" => "$1-$2"; // Indigo
		"^(In)\+(grid)" => "$1-$2"; // Ingrid
		"^So\+da(-|\||s)?" => "So-da"; // Soda
		"^([Uu]n)\+(tre[rsnm]?)" => { "$1-$2", "^[Uu]n\+treu" }; // untre, not: untreu
		"^Ant-i-r" => "Anti|r"; // Antirakete (?)
		"^([Ii]n)-?t-?e-?r(i-?eur)" => "$1-ter+$2"; // Interieur
		"^([Ii]-?o-?ni)-?e" => "$1-e"; // Ionier
		"([Gg]e-?ne-?r\+a)\|(to-?r)" => "$1-$2"; // Generator
		"^([Aa]us)-?(schl)$" => "$1+$2"; // ausschl. (abbreviation)
		"^([Ii]n)kl$" => "$1+kl"; // inkl. (abbreviation)
		"^([Kk]on-?sul)\|(tie-?r)" => "$1-$2"; // konsultieren
		"^([Ss]o)-?(for-?t)" => "$1+$2"; // sofortig
		"^([Ll]os)s-?pr" => "$1-spr"; // losspringen
		"^([Kk]u-?ver)\+t" => "$1-t"; // Kuvert
		"^([Aa]us)-?(ein-?an)" => "$1+$2"; // auseinanderstoben
		"^([Pp]ro-?be)[^|]?(stü)" => "$1|$2"; // Probestück
		"(f-?er)\+(ti-?g)" => "$1-$2"; // friedfertig
		"^([Ww]all).?(fahrts)-?(or-?t)" => "$1-$2|$3"; // Wallfahrtsorten
		"^([Tt]rö-?del)-?(la-?d)" => "$1|$2"; // Trödelladen
		"^([Ll]au)\|(schi-?g)" => "$1-$2"; // lauschigen
		"^([Gg]e\+heim-?nis)-?tu(e-?r)" => "$1|tu-$2"; // Geheimnistuerei
		"^([Hh]olz)(in\+str)" => "$1|$2"; // Holzinstrument
		"^([Kk]upp-?le)-?r" => "$1r+"; // Kupplerinnengesicht
		"^([Gg]e)#(wer-?b)" => "$1+$2"; // Gewerbe
		"^([Gg]e)#(wer)\+\|(be)\+" => "$1+$2-$3|"; // Gewerbeausschuss
		"^([Ii]n-?ter\+).?(es).?(san).?t" => "$1$2-$3-t"; // interessanteste
		"^([Uu]n-?ter\+?kunfts)-?(stel)" => "$1|$2"; // Unterkunftsstelle
		"^([Aa]n\+nah)\|meer\+\|" => "$1-me|er+"; // Annahmeerklärung (...)
		"^([Bb]e\+schwer)\|de-" => "$1-de|"; // Beschwerdeinstanz, Beschwerderückzug (..)
		"^([Pp]ro)-?(be)\+" => "$1-$2|"; // Probedarstellung
		"^([Kk]ir)\|sch(ro-?t)" => "$1sch|$2"; // kirschrot (computers are stupid ... :)
		"^([Ee]i)\|(lands?)$" => "$1-$2"; // Eiland
		"^([Bb]au)\|(manns?)$" => "$1-$2"; // Baumann (name)
		"^([Rr]an)\|(dons?)$" => "$1-$2"; // Randon (name)
		"^([Uu]n)[-+]?(ein)-?(nehm-?ba)" => "$1+$2+$3"; // uneinnehmbar
		"^([Gg]ol-?di)-?g(ro-?t)" => "$1g|$2"; // goldigroten
		"^([Bb]unt)g-?e-?r\+än" => "$1|ge+rän"; // buntgerändertes
		"^([Bb]us)\|(sar-?d)" => "$1-$2"; // Bussarde (computers are stupid ... :)
		"(?<!\|)(sei-?ti-?g(?:s-?t)?e(?:-?rsmn)?)" => "|$1"; // verschiedenseitigen, vielseitigste etc.
		"^([Ee]in)-?(dri-?n-?g)" => "$1+$2"; // Eindringling
		"^([Ww]eg)[-+]?(ran-?d)" => "$1|$2"; // Wegrande
		"(?<!\|)(lip-?pi-?g)" => "|$1"; // dicklippig
		"([Gg]ar)[-+|]?de-?ro-be" => "$1-der+o-be"; // Garderobe
		"([Ss]chlecht)-?(er\+hal-?t)" => "$1|$2"; // schlechterhaltene
		"([Ff]lach)\|da\+(c-?h)" => "$1|da$2"; // flachdachigen
		"((?:f|ch)ts)-?(lo-?se(?:s-?te?)?[rsmn]?)$" => "$1#$2"; // inschriftslosen
		"([Vv]er)[-+]?hut\|zel" => "$1+hut-zel"; // verhutzeltes
		"(?<!\|)[Gg]-?e-?r\+?(uc-?h)" => "|ge+r$1"; // Moschusgeruch
		"^([Ww]el)-?tent[-+]?r" => "$1t|ent+r"; // weltentrückt
		"^([Tt]am)-?tam" => "$1|tam"; // Tamtam
		"^([Dd]er)\+(wi-?s-?c-?h)" => "$1-$2"; // Derwisch
		"^([Ss]chrei-?en)\|de" => "$1-de"; // schreiender
		"([Bb]e)-?(krus-?te-?t)" => "$1+$2"; // weissbekrusteter
		"^(Ü|ü)b-?ri-?g(lies-?s)" => "$1-brig|$2"; // übrigliess
		"^([Rr]auh)-?(reif)" => "$1|$2";  // old ortographe
		"^(Lehm)(mau)" => "$1|$2"; // Lehmmauern (bug in phpspell)
		"(^|\|)([Bb]e)[-+]?(wirt)-?(schaf)-?t" => "$1$2+$3#$4t"; // Bewirtschaftung
		"^([Gg]leis)\|(sen-?d)" => "$1-$2"; // gleissenden (computers are stupid ... :)
		"^([Zz]u)\+(rück)(er\+)" => "$1-$2+$3"; // zurückerwarteten
		"^([Pp]fer-?de)\|(#?lo-?s)" => "$1$2"; // pferdelosen
		"^([Aa]s-?tro)\|l" => "$1-l"; // Astrologen
		"(?<!\|)g-?lut$" => "|glut"; // Sonnenglut (phpsyllable doesn't do a very good job actually ... )
		"^([Hh]er-?be)\+re" => "$1-re"; // herberen
		"^([Gg]e)#(ba-?r)" => "$1+$2"; // gebar
		"^([Tt]ee)k-?(änn-?ch)" => "$1|k$2"; // Teekännchen
		"^([Ss]o)\+(do-?m)" => "$1-$2"; // Sodom
		"^([Gg]e\+ne)\|(sen)" => "$1-$2"; // Genesende (computers are stupid ... :)
		"^([Aa]b)-?(ge)-?(ma-?g)" => "$1+$2+$3"; // abgemagert
		"^([Ss]che)r\+(er\+ei)" => "$1-r$2"; // Schererei
		"^([Aa]r)\|(ti-?g)" => "$1-$2"; // artiger
		"^([Dd]r)(aus)$" => "$1+$2"; // draus
		"^([Ff]rei)-?(den-?k)" => "$1|$2"; // Freidenkerei
		"^([Ww]eg)[-+]?(rei-?s)" => "$1|$2"; // wegreisen
		"^([Vv]er)[-+]?(nehm)-?(las)" => "$1+$2|$3"; // Vernehmlassung et co.
		"^([Pp]ar-?f(?:ü|u)-?m-?e-?rie)-?(la-?den)" => "$1|$2"; // Parfümerieladen (hm ... phpsyllable again ...)
		"^([Ww]ohl)\+(rie-?chen)" => "$1|$2"; // wohlriechende
		"^([Ss]perr)\|(an-?gel)" => "$1-$2"; // sperrangelweit
		"^([Vv]er)[-+]?(wahr)[-+]?(lo)" => "$1+$2#$3"; // Verwarlosung
		"^([Mm]elk)-?(ge)-?f" => "$1|$2+f"; // Melkgefäss
		"^([Ff]inn|[Dd]eutsch|[Ww]elsch|[Ee]ng|[Ss]üd|[Nn]ord|[Oo]st|[Ww]est|[Gg]rön)-(l(?:a|ä)n-?d)" => "$1|$2"; // Finnland etc.
		"([Ii]m)[-+|]?(po)[-+|]?(nie)[-+|]?(ren)[-+|]?d" => "$1-$2-$3-$4-d"; // imponierender (computers are VERY stupid ... :)
		"^([Aa]b)-?(ge)-?(feim)" => "$1+$2+$3"; // abgefeimt
		"\|(der\+wei-se)$" => "-$1"; // überrraschenderweise, bezeichnenderweise etc. 
		"^((?:Ä|ä)r-?me)-?l(auf)-?(schl)" => "$1l|$2+$3"; // Ärmelaufschlägen
		"^([Ee]in)-?h-?er\+" => "$1+her-"; // einherstolzierte
		"^([Gg]er)\+(te)" => "$1-$2"; // Gerte
		"^([Ss]chmer)\+b" => "$1-b"; // Schmerbauch
		"^([Ss]ee?-?len)-?(sor-?ge)" => "$1|$2"; // Seelensorger
		"^([Ee])x\|a-?mi\|na" => "$1-xa-mi-na"; // Examinatoren
		"^([Bb])e[-#]wer\+?\|?b" => "$1e+wer-b"; // Bewerbern
		"^([Jj]e)r\+e-?mi" => "$1-re-mi"; // Jeremiade
		"^([Zz]ot-?tel)(tr)" => "$1|$2"; // Zotteltrab
		"^([Mm]or-?gen)-?(tau)" => "$1|$2"; // Morgentaus
		"^([Mm]e)r\+i-?no-?(?!\|)" => "$1-ri-no|"; // Merinokleide
		"^([Uu]n)-?g-?ra-?zi" => "$1+gra-zi"; // ungraziös
		"^([Rr]eit)s-?to" => "$1|sto"; // Reitstock (phpsyllable ..)
		"^([Bb]lau)s-?tru" => "$1|stru"; // Blaustrumpf (oups ... it did it again ... :)
		"^([Ii]n)\+(gou-?vil-?le)" => "$1-$2"; // Ingouville
		"^([Ff]lüs-?t-?er\+)(to-?n)" => "$1|$2"; // Flüstertone
		"^([Aa]p-?fel)[-|](wein)(n-?ei-?g)" => "$1|$2|$3"; // Apfelweinneigen ... yes, yes, Flaubert has some nice words ... :)
		"^([Aa]n)-?(köm-?m)" => "$1+$2"; // Ankömmling
		"^([Bb]unt)-?(be)-?(bän)" => "$1|$2+$3"; // buntbebänderten
		"^([Ss]chwie-?g-?er)\+?(to)" => "$1+|$2"; // Schwiegertochter
		"^([Aa])-?n(ul-?kun)" => "$1n+$2"; // Flaubert was good ... but the translator wasn't bad neither ... :) 
		"^([Ll]ängst)-?(ver\+)" => "$1|$2"; // längstvergangne
		"^([Gg]e)-?w-?or" => "$1+wor"; // gewordnen
		"([-|]ge)\|(schich-?t)" => "$1+$2"; // Leidensgeschichte
		"^([Zz]u)[-+]?(recht)-?(str)" => "$1+$2|$3"; // zurechtstrich (phpspell ... you're fired! :o)
		"(?<!^|\|)(un)-?(kennt-?nis)" => "|$1+$2"; // Geschichtsunkenntnis
		"^([Ss]chwa-?nen)-?ge[-+]?" => "$1|ge+"; // Schwanengesänge
		"^([Bb]lau)-?(sei-?d)" => "$1|$2"; // blauseidnes
		"^([Hh]er-?den)gl" => "$1|gl"; // Herdenglocken
		"^([Gg]e)[-+]?(rad)-?(li-?n)" => "$1+$2|$3"; // geradlinig
		"^([Vv]io-?lin)k-(as-?t)" => "$1|k$2"; // Violinkasten
		"^([Ff]ein)-?(li-?ni)" => "$1|$2"; // feinlinig
		"^([Ee]in)-?(lü-?d)" => "$1+$2"; // einlüde
		"^([Hh]olz)-?(ge)-?t" => "$1|$2+t"; // Holzgetäfel
		"^([Aa]l-?lon-?ge)p-e" => "$1|pe"; // Allongeperücke
		"([Dd]a)\+(mas-?t)" => "$1-$2"; // Damast
		"^([Vv]er)[-+]?(schwen-?dungs)-?s" => "$1+$2|s"; // Verschwendungssucht
		"^([Bb]a-?re)\|ge" => "$1-ge"; // Barege-Kleid
		"^([Kk]ont-?er\+)(tan-?z)" => "$1|$2"; // Kontertanz
		"^([Hh]in)-?(ge-?bu-?n-?g)" => "$1+$2"; // hingebungsvoll
		"^([Mm]ü-?he)\|(vol)" => "$1-$2"; // mühevolle
		"^([Mm]es-?sin)-?gl" => "$1g|l"; // Messingleiste
		"^([Bb]lau)-?(wol-?l)" => "$1|$2"; // blauwollnen
		"(bau)\|(chi[-|]?g)" => "$1-$2"; // dickbauchigen
		"^([Ww]ie)\|ge\+" => "$1-ge|"; // Wiegemessers
		"^([Ee]nt)-?(gol-?de)" => "$1+$2"; // entgoldeten
		"^([Hh]i)-?(ver)\+t!" => "$1-$2t"; // Hivert (name)
		"^([Ss]tro)-?h(auf)-?(la)" => "$1h|$2+$3"; // Strohaufladen
		"^([Gg]el)-?b(la-?c-?k)" => "$1b|$2"; // gelblackierter
		"^([Mm]ai)-?(lüf-?t)" => "$1|$2"; // Mailüfterl
		"^([Ii]n)\+(ni-?g)" => "$1-$2"; // inniger
		"^([bB]er)\+ta" => "$1-ta"; // Berta-Louise
		"(?<!\|)(käp-?pis?)$" => "|$1"; // Stabsarztskäppis
		"(?<!\|)t-(rin-?k)" => "|t$1"; // Schnapstrinker
		"^([Vv]e)r\+(o-?ni)" => "$1-r$2"; // Veroniken
		"^([Aa]n)-?(ge)-?b-?(un-?d)" => "$1+$2+b$3"; // angebundne
		"^([Gg]as)\|(tie-?r)" => "$1-$2"; // gastieren
		"^([Aa]-?ro-?ma)\|(ti-?s-?c-?h)" => "$1-$2"; // aromatische (computers are stupid ... :)
		"([Hh]aus)-?(tü-?r)" => "$1|$2"; // Haustürklingel
		"([Dd]rei)-?(bla-?t-?t)" => "$1|$2"; // Dreiblatt
		"^([Hh]e)\|(be)\+(fe-?s-?t)" => "$1-$2|$3"; // Hebefestkranz
		"^([Aa]uf)[-+]?(ge)[-+]?(sch)" => "$1+$2+$3"; // aufgeschwemmtes
		"^([Nn]äh)-?(na-?d)" => "$1|$2"; // Nähnadeln
		"^([Ss]troh)-?(ge)[-+]?(fl)" => "$1|$2+$3"; // Strohgeflochtne
		"^([Ss]er-?vier)\|t" => "$1-t"; // serviertes
		"^([Ss]a-?kris-?tei)sch" => "$1|sch"; // Sakristeischlüssel (et sapristi ... darned phpspell ...)
		"^([Rr]au)\|(he)" => "$1-$2"; // rauhe
		"^([Ww]ert)\|(her)\+(st)" => "$1-$2+|$3"; // Wertherstimmung
		"^([Kk]asch)mir-?(kl)" => "$1-mir|$2"; // Kaschmirkleid
		"^([Bb]aum-?wol)\|l" => "$1-l"; // Baumwollenwaren
		"^([Ee]i)\|sen" => "$1-sen"; // Eisenwaren
		"^([Dd]ich)\|(tes-?t)" => "$1-$2"; // dichtesten (computers are stupid ... :)
		"^([Aa]n)[-+]?(ge)[-+]?(st)" => "$1+$2+$3"; // angestochne
		"-(ge)-?w-?(ord-?ne[nrsm]?$)" => "|$1+w$2"; // feuchtgewordnen
		"^([Bb]e)\+(lots?)$" => "$1-$2"; // Belot (name)
		"^([Hh]än-?ge)-?(lam-?p)" => "$1|$2"; // Hängelampen
		"^([Ww]ie)\|(gen)" => "$1-$2"; // wiegenden
		"^([Hh]ei-?de)-?(kr)" => "$1|$2"; // Heidekraut
		"(?<!\|)-?(tu-?c-?h[es]?)$" => "|$1"; // Chiffontuch
		"(\||^)([Gg]en)\|(dar-?m)" => "$1$2-$3"; // Landgendarm
		"^([Tt]rau-?ma)\|(ti-?s-?c-?h)" => "$1-$2"; // traumatische (computers are stupid ... :)
		"^([Uu]r)-?(wüch)" => "$1+$2"; // urwüchsig
		"^([Ee]-?he)-?(ri-?n-?g)" => "$1|$2"; // Ehering
		"^([Kk]o-?se)-?(wor)" => "$1|$2"; // Koseworten
		"^([Rr]echt)\+(schrei)" => "$1|$2"; // Rechtschreibung
		"^([Kk]lump)-?(fü|fu)" => "$1|$2"; // Klumpfüsse
		"([Aa]b)-?(tra-?g(?:un-?g|en?))" => "$1+$2"; // Oberkiefer-Abtragung
		"([Bb]e\+richt)-?(er\+stat)" => "$1|$2"; // Berichterstattung
		"([Uu]r\+lau)\|b" => "$1-b"; // Urlaubern
		"(?<!\|)-?(sch-?li-?chen?)$" => "|$1"; // Pfaffenschlichen
		"^([Gg]e)-?(ne-?s)" => "$1+$2"; // Genesung
		"^([Dd]\'[Ee])\|s-?(pa-?gne)" => "$1s-$2"; // Peau d'Espagne
		"^([Pp]i-?ke)e" => "$1-e"; // Pikee-Unterröcke
		"^([Aa]uf)[-+]?(ge)-n" => "$1+$2+n"; // aufgenestelt
		"^([Ll]i-?mo-?nen)-?(?!\|)" => "$1|"; // Limonenhainen
		"^(Wo)\+(ge)(?!g|-g)" => "$1-$2"; // Woge
		"^([Ff]ox)-?t-?er\+ri" => "$1|ter-ri"; // Foxterrier
		"^([Kk]alt)\+(was-?ser)" => "$1|$2"; // Kaltwasser-Umschläge
		"^([Ee]r)[-+]?s-?ter[-+]{0,2}(ben-?d)" => "$1+ster-$2"; // ersterbender
		"^([Bb]e)[-+|]?(nach)-?(tei)\|(li-?g)" => "$1+$2|$3-$4"; // benachteiligen - no idea why this is so strange ... ?!
		"(?<!\|)-?(t(?:o|ö)-?n(?:e[sn]?)?)$" => "|$1"; // Plaudertone
		"(?<!\|)-?(kr(?:a|ä)n-?z(?:e[ns]?)?)$" => "|$1"; // Strahlenkranze
		"^([bB]lau)-?s-?(tr)" => "$1|str"; // blaustrümpfigen
		"^([Aa]u)[-+|]?(to-?ri)\|(tä-?t)" => "$1-$2-$3"; // Autoritäten
		"^([Mm]o-?de)-?(nar)" => "$1|$2"; // Modenarren
		"^([Ss]amt)-?(ba-?ret)" => "$1|$2"; // Samtbaretten
		"^([Aa]sh)\|(ton)" => "$1-$2"; // Lord Ashton (name)
		"^([Ss]amt\|por-?ti)(e-?re)" => "$1-$2"; // Samtportiere
		"([Gg]e)-?(braus)" => "$1+$2"; // Orgelgebraus
		"^([Ss]aint[-=]Her)b\|(land)" => "$1-b$2"; // Saint-Herbland (name)
		"^([Dd]a)-?(hän-?gen)" => "$1+$2"; // dahängenden
		"\|(lich=)" => "#$1"; // süsslich-gütigen
		"^([Pp]oi-?ti)(er)" => "$1-$2"; // Poitiers
		"^([Ff]rüch-?te)-?(ein)" => "$1|$2"; // Früchteeinmachens
		"^([Aa]b)[-+]?(ge)[-+](beer)[-+]?" => "$1+$2+$3"; // abgebeerter
		"^([Kk]a-?per)[-+](na)(um)" => "$1-$2-$3"; // Kapernaum (Kafarnaum)
		"^([Ss]ie)\|(den)" => "$1-$2"; // siedendem
		"([Bb]au)\|(schi-?g)" => "$1-$2"; // weitbauschige
		"^([Ss]i)-?ch(ent\+)" => "$1ch|$2"; // Sichentblössen
		"^([Bb]er)-?(n\|stein)-?t" => "$1$2|t"; // Bernsteinteint
		"^([Mm]in-?ne)-?(s(?:ä|a)n)" => "$1|$2"; // Minnesänger
		"^([Ss]ter-?bens)-?(un)-?" => "$1|$2+"; // sterbensunglücklich

	#EndSubSection(analyzer)
#EndSection(header)
#BeginSection(font)
	#BeginSubSection(base)
		"IST" => {  /*h*/ 1,  0.5,  0,  0.5,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  9.5,  0.5,  1,  1,  0,  0,  0.5, /**/ 1,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 0.5,  10.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0.5,  9.5,  0.5,  0,  3,  0,  1,  0.5 }
		"ES" => {  /*h*/ 1,  0.5,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1.0,  0,  0,  0, /**/ 2,  5,  0,  0,  1.0,  0,  1,  0 }
		"WAS" => {  /*h*/ 5,  0.5,  0,  0.5,  2,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1.5,  8.5,  0.5,  1,  1,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 5,  10,  0.5,  98,  1.5,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 1.5,  8.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  6,  0.5,  0,  3,  0,  0,  0.5, /**/ 0.5,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 4.25,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 8,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"AUCH" => {  /*h*/ 5,  1,  -1,  0.5,  0.5,  0.5,  0,  "", /**/ "",  "",  "",  "",  1,  1,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  8.5,  0.5,  1,  1.3,  0,  0,  0.5, /**/ 4.2,  10,  0.7,  2,  2.5,  0,  0,  0.6, /**/ 7.8,  5.6,  0.8,  0,  3,  0,  0,  0.5, /**/ 6.9,  -5.2,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5.5,  -8,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 4,  -10,  0.5,  0,  1,  0,  0,  0.5 }
		"TIG" => {  /*h*/ 7.5,  0.5,  0,  0.5,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  18.75,  0.5,  1,  1.5,  0,  0,  0, /**/ 6,  20,  0.5,  2,  2.5,  0,  0,  0.5, /**/ 7.5,  18,  0.5,  0,  3,  0,  0,  0, /**/ 7.5,  10,  0,  0,  1,  0,  1,  0, /**/ 7.5,  12.5,  0,  4,  1,  0,  0,  0 }
		"NICHT" => {  /*h*/ 15,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0.5,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  4,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 6.5,  5,  0.5,  2.5,  2,  0,  0,  0.5, /**/ 7.75,  4,  0.5,  0,  3,  0,  0,  0.5, /**/ 11,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 12.5,  0,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 14,  1,  0.5,  0,  1,  0,  1,  0.5 }
		"ALL" => {  /*h*/ 3,  0.5,  0,  0.5,  0.75,  0.75,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  7,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 3,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"WERD" => {  /*h*/ 1.25,  0.5,  0,  0.5,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0.5,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 0,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 1.25,  0,  0.5,  0,  1.2,  0,  1,  0.5 }
		"IN" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  3,  0,  1,  1,  0,  0,  0, /**/ 3,  4,  0,  0,  1,  0,  0,  0, /**/ 2,  0,  0,  0,  0,  0,  0,  0, /**/ 5,  1,  0,  0,  1,  0,  1,  0 }
		"SEIN" => {  /*h*/ 20,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0.5,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0.5, /**/ 2,  3.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 8,  5,  0.5,  0,  0,  0,  0,  0.5, /**/ 15,  3.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 19,  1,  0.5,  0,  1,  0,  0,  0, /**/ 20,  0,  0,  0,  1,  0,  1,  0 }
		"GEGEN" => {  /*h*/ 8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 0.5,  7.5,  0.5,  1,  1,  0,  0,  0, /*2*/ 1.5,  10,  0.5,  2,  1,  0,  0,  0.5, /*3*/ 4,  8,  0.5,  0,  1,  0,  0,  0, /*4*/ 4,  4.5,  0,  0,  1,  0,  0,  0.5, /*5*/ 6.25,  5.5,  0.5,  0,  1,  0,  0,  0.5, /*6*/ 8,  3,  0,  0,  1,  0,  0,  0, /*7*/ 8,  0,  0,  0,  1,  0,  1,  0 }
		"HAB" => {  /*h*/ 4,  0.5,  0,  0,  1.5,  1.5,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  1,  0.5,  0,  1,  0,  1,  0 }
		"HAT" => {  /*h*/ 4.5,  0.5,  0,  0.5,  1,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  8.75,  0.5,  1,  1.5,  0,  0.5,  0, /**/ 1,  10,  0.5,  2,  2.5,  0,  0,  0.5, /**/ 3.5,  7.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3.5,  1.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  1.0,  0,  2,  0.5, /**/ 0,  2,  0.5,  0,  1.0,  0,  1,  0.5 }
		"DA" => {  /*h*/ 0,  0.5,  0,  0,  0,  2.25,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5 }
		"SIND" => {  /*h*/ 2.5,  0.5,  0,  0.5,  1,  2.5,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2.5,  8.25,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  0,  0,  0,  1,  0,  0,  0 }
		"VOR" => {  /*h*/ 5,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  2.5, /**/ 5,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  1,  0,  0,  0.5, /**/ 0,  6.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 1.25,  5.75,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  1,  3,  0,  0,  0.5, /**/ 5,  2.5,  0.7,  0,  3,  0,  0,  0.7, /**/ 2.5,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  1,  0 }
		"VORAR" => {  /*h*/ 5,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0.5,  2.5, /**/ 5,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  1,  0,  0,  0.5, /**/ 0,  6.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 1.25,  5.75,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  5,  0.5,  1,  3,  0,  0,  0.5, /**/ 8,  2.5,  0.7,  0,  3,  0,  0,  0.7, /**/ 5.5,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ 3,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ 5.5,  5,  0.5,  0,  1,  0,  0,  0, /**/ 8,  7.5,  0.5,  0,  1,  0,  0,  0, /**/ 5.5,  10,  0.5,  0,  1,  0,  0,  0, /**/ 3,  7.5,  0.5,  0,  1,  0,  0,  0, /**/ 5.5,  5,  0.5,  0,  1,  0,  1,  0 }
		"ANT" => {  /*h*/ 26,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  4.5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 7,  5,  0.5,  2,  2,  0,  0,  0.5, /**/ 11.5,  4.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 17.75,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 22,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 26,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"RÜCK" => {  /*h*/ 8,  0.5,  0,  0.5,  2,  2,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.5,  0,  0.5,  1,  1,  0,  0,  0.7, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  1,  0 }
		"UR" => {  /*h*/ 5,  0.5,  0,  0,  0,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  2.5, /**/ 5,  0,  0,  0,  0,  0,  0,  0, /*d*/ -2,  10,  0,  1,  3,  0,  0,  0.5, /**/ 3,  5,  0.5,  0,  1,  0,  0,  0.7, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  1,  0 }
		"ANTI" => {  /*h*/ 25,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  4.5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 8,  5,  0.5,  2.5,  2,  0,  0,  0.5, /**/ 11,  4,  0.5,  0,  3,  0,  0,  0.5, /**/ 18,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 22,  0,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 22.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 23.5,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 24.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 23.5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 22.5,  1,  0.5,  0,  1,  0,  1,  0.5 }
		"ZURÜCK" => {  /*h*/ 5,  0.5,  0,  0.5,  2,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  -10,  0.5,  1,  1,  0,  0,  0.5, /**/ 3.5,  -7.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 5.5,  0.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  2,  0,  0,  0.5, /*6*/ 1,  5,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /*8*/ 1,  1,  0.5,  0,  2,  0,  0,  0.5, /**/ 3.5,  0,  0.5,  0,  1,  0,  2,  0, /**/ 5,  2.5,  0.5,  1,  1,  0,  1,  0.7 }
		"INTER" => {  /*h*/ 5,  0.5,  0,  0.5,  2,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ -2,  -4,  0.5,  1,  1,  0,  0,  0.5, /**/ 1.5,  -3,  0.5,  0,  1,  0,  0,  0.5, /**/ 4,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  0,  0, /**/ 3.5,  0,  0.5,  1,  1,  0,  1,  0.7 }
		"ION" => {  /*h*/ 25,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0.5,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  4.5,  0.5,  1,  1.5,  2,  0,  0.5, /**/ 7,  5,  0.5,  2,  2.5,  0,  0,  0.5, /**/ 11,  4,  0.5,  0,  3,  0,  0,  0.5, /**/ 18,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 22,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 25,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"HAFT" => {  /*h*/ 4,  0.5,  0,  0,  4,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  17,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.8,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 2,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"SCHAFT" => {  /*h*/ 20,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  1.5,  0,  0,  0.5, /**/ 0.75,  3,  0.5,  0,  3,  0,  0,  0.5, /**/ 19.25,  2.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 20,  0,  0.5,  0,  1,  0,  1,  0 }
		"TALL" => {  /*h*/ 3,  0.5,  0,  0.5,  0.75,  0.75,  0,  "", /**/ "",  "",  "",  "",  1,  0,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  15,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 7,  18.5,  0.5,  2,  2,  0,  0,  0.5, /**/ 6.1,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  17,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  12,  0.5,  0,  2.5,  0,  0,  0, /**/ 7,  10,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 8,  12,  0.5,  0,  1,  0,  1,  0.5 }
		"TUNG" => {  /*h*/ 8,  0.5,  0,  0.5,  2,  1,  0,  "", /**/ "",  "",  "",  "",  1,  0,  1,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 7,  18,  0.5,  1,  1.3,  0,  0,  0.5, /**/ 8,  19.5,  0.5,  0,  1.3,  0,  0,  0.5, /**/ 9,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 8,  19.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 7,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 7,  11.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 6,  10,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 5,  12,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 7,  14,  0.5,  0,  1,  0,  1,  0.5 }
		"AUF" => {  /*h*/ 9,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0.5, /**/ 2,  2,  0.5,  0,  2,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 7.5,  2,  0.5,  0,  1,  0,  2,  0.5, /**/ 9,  5,  0.5,  0,  1,  0,  1,  0.5 }
		"AUS" => {  /*h*/ 20,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0.5, /**/ /*3,  3,  0.5,  0,  1,  0,  0,  0.5,*/ /**/ 6,  5,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 13,  4,  0.5,  0,  2.5,  0,  0,  0.5, /**/ /*19,  1,  0.5,  0,  3,  0,  0,  0.5,*/ /**/ 20,  0,  0.5,  0,  1,  0,  1,  0 }
		"-AUS" => {  /*h*/ 20,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 10,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 17,  3,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 19,  1,  0.5,  0,  3,  0,  0,  0.5, /**/ 20,  0,  0.5,  0,  1,  0,  1,  0 }
		"BEI" => {  /*h*/ 18,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0.5, /**/ 3,  2,  0.5,  0,  2,  0,  0,  0.5, /**/ 9,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 15,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 18,  5,  0.5,  0,  1,  0,  1,  0.5 }
		"DURCH" => {  /*h*/ 10,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 3,  10,  0,  1,  1,  0,  0,  0.3, /**/ 0.5,  5,  0.3,  0,  1,  0,  0,  0, /**/ 8,  0,  0,  0,  1,  0,  1,  0 }
		"DIS" => {  /*h*/ 8,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0.5,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0.5, /**/ -1,  7.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  10,  0.5,  0,  1,  0,  0,  0, /**/ 6.5,  5,  0,  0,  1,  0,  1,  0 }
		"SICH" => {  /*h*/ 11.75,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  1,  0,  0,  0.5, /**/ 2,  9.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 3,  10,  0.5,  2.5,  1,  0,  0,  0.5, /**/ 5,  9.5,  0.5,  0,  1,  0,  0,  0, /**/ 8,  5,  0,  0,  1,  0,  1,  0 }
		"SOLCH" => {  /*h*/ 15,  1,  -1,  0.5,  0.5,  0.5,  0,  "", /**/ "",  "",  "",  "",  0,  0,  -0.5,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0.5, /**/ 2.5,  4,  0.5,  0,  1,  0,  0,  0.5, /**/ 4,  5,  0.5,  0,  1,  0,  0,  0.5, /**/ 5.5,  4,  0,  0,  1,  0,  0,  0, /**/ 9,  0,  0,  0,  1,  0,  0,  0, /**/ 10,  3.5,  0,  1,  1.3,  0,  0,  0.5, /**/ 12.5,  5,  0.7,  2,  2.5,  0,  0,  0.8, /**/ 15,  2,  0.8,  0,  3,  0,  0,  0.5, /**/ 15,  -13,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 13,  -15,  0.5,  0,  2,  0,  99,  0.5, /**/ 11.5,  -14,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 10,  -12,  0.5,  0,  1,  0,  2,  0.5, /**/ 13,  -7,  0.5,  0,  1,  0,  1,  0.5, /**/ 15,  -2.5,  0,  4,  1,  0,  0,  0.5 }
		"WIRD" => {  /*h*/ 5,  0.5,  0,  0.5,  2,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  1,  1,  0,  0,  0.5, /**/ 3.5,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  5,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  7.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  10,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  7.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  0,  0, /**/ 5,  5,  0.5,  1,  1,  0,  1,  0.7 }
		"SELB" => {  /*h*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 1,  0.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0.5,  1,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0.5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  0,  0.5,  0,  1,  0,  2,  0.5, /**/ 2,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"WO" => {  /*h*/ 7,  0.5,  0,  0.5,  0.5,  0.5,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1.5,  8.5,  0.5,  1,  1,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 5,  10,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 1.5,  8.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  6,  0.5,  0,  3,  0,  0,  0.5, /**/ 1,  3.25,  0.5,  0,  3,  0,  0,  0.5, /**/ 2.5,  1.5,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 6,  1.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 6.5,  0,  0.5,  0,  1,  0,  1,  0 }
		"VILLEICHT" => {  /*h*/ 5,  0.5,  0,  0.5,  0.75,  0.75,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2,  8.5,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 2,  0,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  12,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 2,  20,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  17,  0.5,  0,  1,  0,  1,  0.5 }
		"HEIT" => {  /*h*/ 24,  0,  1.5,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 24,  20,  0,  1,  1,  0,  0,  0, /**/ 24,  20,  0,  0,  1,  0,  1,  0 }
		"HEIT-1" => {  /*h*/ 24,  0,  1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 24,  20,  0,  1,  1,  0,  0,  0, /**/ 24,  20,  0,  0,  1,  0,  1,  0 }
		"HEIT&UL" => { /*header*/ 21, 0, 2, 0.5, 0, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 21, 20, 0, 1, 1, 0, 0, 0,  /**/ 21, 20, 0, 0, 1, 0, 1, 0 }
		"FORT" => {  /*h*/ 8,  0.5,  0,  0,  1,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 8,  17,  0.5,  2,  2,  0,  0,  0.5, /**/ 6.8,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 4.25,  -9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  2.5,  0.5,  4,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"\" => {  /*h*/ /*spacing between separate words*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#0" => {  /*h*/ 0,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#S#" => {  /*h*/ 3,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0, /*d*/ 0, 0, 0, 1, 0, 5, 0, 0, /**/ 3, 0, 0, 0, 0, 5, 1, 0 }
		"#1" => {  /*h*/ 1,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#2" => {  /*h*/ 2,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#3" => {  /*h*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#4" => {  /*h*/ 4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#5" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#6" => {  /*h*/ 6,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#7" => {  /*h*/ 7,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#8" => {  /*h*/ 8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#9" => {  /*h*/ 9,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }								
		"#10" => {  /*h*/ 10,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }	
		"#1-" => {  /*h*/ -1,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#2-" => {  /*h*/ -2,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#3-" => {  /*h*/ -3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }		
		"#4-" => {  /*h*/ -4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#5-" => {  /*h*/ -5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#6-" => {  /*h*/ -6,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#7-" => {  /*h*/ -7,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#8-" => {  /*h*/ -8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#9-" => {  /*h*/ -9,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }
		"#10-" => {  /*h*/ -10,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  3,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0 }			
		"SCHM" => {  /*h*/ 6,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2,  9,  0.5,  1,  1,  0,  0,  0.5, /**/ 4,  10,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 6,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3,  2.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3,  1.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  0.5,  0.5,  0,  3,  0,  0,  0, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"SCHW" => {  /*h*/ 7,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  17,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  20,  0.5,  98,  1.5,  0,  0,  0.5, /**/ 7,  19,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  17,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"MPF" => {  /*h*/ 6,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 0,  9,  0.5,  1,  1.5,  0,  0,  0, /*2*/ 1.5,  10,  0.5,  2,  2.5,  0,  0,  0.5, /*3*/ 3,  8,  0.5,  0,  3,  0,  0,  0.5, /*4*/ 3,  2,  0.5,  0,  2.5,  0,  0,  0, /*5*/ 4.5,  0,  0.5,  0,  1.5,  0,  0,  0.5, /*6*/ 6,  2.5,  0.5,  0,  1,  0,  0,  0.5, /*7*/ 2.5,  5,  0.5,  0,  1,  0,  0,  0.5, /*8*/ 0.75,  4,  0.5,  0,  1,  0,  0,  0.8, /*9*/ 0,  2.8,  0.8,  0,  1,  0,  0,  0.5, /*10*/ 0.75,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 4.5,  2,  0.5,  0,  1,  0,  2,  0.5, /*11*/ 5.75,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"SCH" => {  /*h*/ 9,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  7,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  10,  0.5,  98,  1.5,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5, /**/ 5,  2.5,  0,  4,  1,  0,  0,  0.5 }
		"^SCH" => {  /*h*/ 9,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  7,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  10,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9.5,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -8,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  -6.5,  0.5,  0,  1,  0,  1,  0.5, /**/ 5,  -6,  0,  4,  1,  0,  0,  0.5 }
		"^SCHM" => {  /*h*/ 6,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2,  9,  0.5,  1,  1,  0,  0,  0.5, /**/ 4,  10,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 6,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3,  2.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3,  1.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  0.5,  0.5,  0,  3,  0,  0,  0, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"^SCHW" => {  /*h*/ 7,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  17,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  20,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 7,  19,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  17,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"^CH" => {  /*h*/ 6,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.2,  8.5,  0.5,  1,  1.3,  0,  0,  0.5, /**/ 4.5,  10,  0.7,  2,  2.5,  0,  0,  0.5, /**/ 7,  6.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 7,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5.5,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 3.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 3,  -7.5,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  -5,  0.5,  0,  1,  0,  1,  0.5, /**/ 7,  -3.5,  0,  4,  1,  0,  0,  0.5 }
		"^ZW" => {  /*h*/ 5,  1,  -1,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  20,  0,  1,  3,  0,  0,  0, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"^Z" => {  /*h*/ 5,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  1,  -1,  0, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  10,  0,  1,  3,  0,  0,  0, /**/ 5,  -5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 4.25,  -9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"CK" => {  /*h*/ 4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  28.5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2,  30,  0.5,  2,  2,  0,  0,  0.5, /**/ 4,  27,  0.5,  0,  2.5,  0,  0,  0, /**/ 4,  25,  0,  0,  3,  0,  0,  0, /**/ 5,  0,  0,  0,  1,  0,  1,  0, /**/ 5,  2.5,  0,  4,  1,  0,  0,  0 }
		"FF" => {  /*h*/ 3,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  27,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.8,  30,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  28,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  1,  0.5,  0,  1,  0,  1,  0.5 }
		"LL" => {  /*h*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2,  8.5,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 2,  0,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 3,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  1.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 2,  0.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  2,  0.5, /**/ 3,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"MM" => {  /*h*/ 13,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  9,  0.5,  1,  1,  0,  0,  0.5, /**/ 1,  10,  0.5, 0,  1.2,  0,  0,  0.5, /**/ 8,  10,  0.5,  0,  2,  0,  0,  0.5, /**/ 10,  8.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 10,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 12,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 12,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 13,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"NN" => {  /*h*/ 18,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 0,  9,  0.5,  1,  1.5,  0,  0,  0.5, /*2*/ 2.75,  10,  0.5,  2,  2.2,  0,  0,  0.5, /*3*/ 7.5,  7,  0.3,  0,  2.7,  0,  0,  0.3, /*4*//* 10.75,  3,  0.5,  0,  2.5,  0,  0,  0.5, *//*5*/ 11,  3.5,  0.3,  0,  2.2,  0,  0,  0.3, /*6a*/ 16,  0,  0.5,  4,  1.5,  0,  0,  0.5, /*6b*/ 16,  0,  0.5,  0,  1.5,  0,  2,  0.5, /*7*/ 18,  1.5,  0.5,  0,  1,  0,  1,  0.5 }
		"PP" => {  /*h*/ 6,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  30,  0,  1,  3,  0,  0,  0, /**/ 0,  3,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 3,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 6,  2,  0,  0,  1,  0,  1,  0 }
		"RR" => {  /*h*/ 10,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  8,  0.5,  1,  1,  0,  0,  0.5, /**/ 5,  10,  0.5,  0,  2,  0,  0,  0.5, /*3*/ 8,  7.75,  0.5,  5,  3,  0,  0,  0.5, /**/ 10,  4,  0.5,  0,  3,  0,  0,  0.5, /*5*/ 9,  0.25,  0.5,  5,  2,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 0.5,  4.75,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 5, 10,  0.5,  4,  1,  0,  0,  0.5, /**/ 5,  10,  0.5,  0,  1,  0,  1,  0.5 }
		"SS" => {  /*h*/ 14,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  9,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  10,  0.5,  2.5,  2,  0,  0,  0.5, /**/ 7.5,  8,  0,  0,  3,  0,  0,  0, /**/ 9.5,  6,  0,  0,  3,  0,  0,  0, /**/ 14,  0,  0,  0,  1,  0,  1,  0 }
		"TT" => {  /*h*/ 0,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  30,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5 }
		"CH" => {  /*h*/ 5,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  8.5,  0.5,  1,  1.3,  0,  0,  0.5, /**/ 2.5,  10,  0.7,  2,  2.5,  0,  0,  0.8, /**/ 5,  7,  0.8,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  99,  0.5, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5, /**/ 5,  2.5,  0,  4,  1,  0,  0,  0.5 }
		"ND" => {  /*h*/ 3.5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3.5,  7,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0,  0,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5 }
		"NG" => {  /*h*/ 4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.5,  7.5,  0.5,  1,  1.3,  0,  0,  0.5, /**/ 3,  9.25,  0.5,  0,  1.3,  0,  0,  0.5, /**/ 5,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  9.25,  0.5,  0,  3,  0,  0,  0.5, /**/ 2.5,  7.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3.5,  1.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  2.25,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 3.5,  4,  0.5,  0,  1,  0,  1,  0.5, /**/ 3.5,  4,  0,  4,  1,  0,  0,  0.5 }
		"NK" => {  /*h*/ 6,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 3,  0,  0,  0,  0,  0,  0,  0, /*d*/ 3,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 6,  17,  0.5,  2,  2,  0,  0,  0.5, /**/ 4.8,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 3,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  2,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  5,  0.5,  0,  1,  0,  1,  0.5, /**/ 4,  5.5,  0,  4,  1,  0,  0,  0.5 }
		"NS" => {  /*h*/ 5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2,  5.5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 5,  7.75,  0.5,  2,  2,  0,  0,  0.5, /**/ 4,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2.5,  9,  0.5,  0,  3,  0,  0,  0.5, /**/ 2.75,  1.25,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  2.5,  0,  99,  0.5, /**/ 0,  2,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 2.5,  2.75,  0.5,  0,  1,  0,  1,  0.5, /**/ 3,  3.5,  0,  4,  1,  0,  0,  0.5 }
		"PF" => {  /*h*/ 8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  7,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  7,  0.5,  2,  1.0,  0,  0,  0.5, /**/ 6,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  11.1,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 7.5,  16.5,  0.5,  0,  1.25,  0,  0,  0.5, /**/ 2,  20,  0.5,  0,  2.25,  0,  0,  0.5, /**/ 0,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 2,  0,  0.5,  4,  1.25,  0,  0,  0.5, /**/ 3,  0,  0.5,  0,  1.25,  0,  2,  0.5, /**/ 6,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"SP" => {  /*h*/ 8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 0,  18,  0.5,  1,  1.5,  0,  0,  0.5, /*2*/ 2,  20,  0.5,  2,  2,  0,  0,  0.5, /*3*/ 4,  18,  0.5,  0,  2.5,  0,  0,  0.5, /*4*/ /*4,  15,  0.5,  0,  3,  0,  0,  0.5,*/ /*5*/ /*4,  5,  0.5,  0,  2.5,  0,  0,  0.5,*/ /*6*/ 4,  3,  0.5,  0,  2,  0,  0,  0.5, /*7*/ 6,  0,  0.5,  4,  1.5,  0,  0,  0.5, /*8*/ 6,  0,  0.5,  0,  1.5,  0,  2,  0.5, /*9*/ 8,  2,  0.5,  0,  1,  0,  1,  0 }
		"ST" => {  /*h*/ 3,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  17,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.8,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  18,  0.5,  0,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  1,  0 }
		"ZW" => {  /*h*/ 5,  1,  -1,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  20,  0,  1,  3,  0,  0,  0, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9,  0.5,  0,  0,  0,  0,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"EN" => {  /*h*/ 5,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 5,  0,  0,  1,  1,  0,  0,  0, /**/ 5,  0,  0,  0,  1,  0,  1,  0 }
		"EM" => {  /*h*/ 18,  5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 5,  0,  0,  1,  1,  0,  0,  0, /**/ 13,  0,  0.5,  1,  1,  0,  1,  0 }
		"/EN" => {  /*h*/ 5,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 10,  0,  0,  1,  1,  0,  0,  0, /**/ 10,  0,  0,  0,  1,  0,  1,  0 }
		"/EM" => {  /*h*/ 18,  5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 10,  0,  0,  1,  1,  0,  0,  0, /**/ 15,  0,  0.5,  1,  1,  0,  1,  0 }
		"DEN" => {  /*h*/ 5,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 5,  0,  0,  0,  1,  0,  1,  0 }
		"DEM" => {  /*h*/ 13,  5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 13,  0,  0.5,  1,  1,  0,  1,  0 }
		"VR+AR" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0.5,  2.5, /**/ 5,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.5,  5,  0.5,  1,  3,  0,  0,  0.5, /**/ 5,  2.5,  0.7,  0,  3,  0,  0,  0.7, /**/ 2.5,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  0,  0, /**/ 2.5,  5,  0.5,  0,  1,  0,  0,  0.7, /**/ 5,  7.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  10,  0.7,  0,  1.0,  0,  0,  0.5, /**/ 0,  7.5,  0.7,  0,  1.0,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  1,  0 }
		"B" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  0,  0.75,  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  3,  0,  0,  0.5, /* 0,  4,  0.5,  0,  2.5,  0,  0,  0.5, */ 0,  3,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  4,  1.5,  0,  0,  0, /**/ 2.25,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4.5,  2,  0.5,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"@#/" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ -5,  -4,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#_" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ 5,  0,  0.0,  0,  1.0,  0,  1,  0.0  }
		"C" => {  /*h*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1,  9.5,  0.5,  1,  1,  0,  0,  0.5, /**/ 3,  10,  0.5,  98,  3,  0,  0,  0.5, /**/ 1,  9.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  7.5,  0.5,  0,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0,  /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5, /*test:diacritics2*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"D" => {  /*h*/ 0,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5, /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"F" => {  /*h*/ 4,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  17,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.8,  20,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  18,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 2,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  2,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 0,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"G" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1.75,  8.75,  0.5,  1,  1.5,  0,  0,  0, /**/ 2,  10,  0.5,  2,  2.5,  0,  0,  0.5, /**/ 4.5,  8,  0.5,  0,  3,  0,  0,  0, /**/ 4.5,  0,  0,  0,  1,  0,  1,  0, /**/ 4.5,  2.5,  0,  4,  1,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 7,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"H" => {  /*h*/ 4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  9,  0.5,  1,  1.5,  0,  0.5,  0.5, /**/ 1.75,  10,  0.5,  2,  2.5,  0,  0,  0.5, /**/ 3.5,  7.2,  0,  0,  3,  0,  0,  0, /**/ 3.5,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.95, 0, 0.5, 0, 4, 0, 0, 0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /**/ 0,  0.5,  0.5,  0,  2.5,  0,  99,  0.5, /**/ 0,  2.4,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 3.5,  4.6,  0.5,  0,  1,  0,  1,  0.5, /**/ 3.5,  5,  0,  4,  1,  0,  0,  0.5 }
		"J" => {  /*h*/ 3,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 3,  10,  0,  1,  3,  0,  0,  0.5, /**/ 3,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  2.5,  0,  0,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /**/ 0,  1.5,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  1.5,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 3,  5,  0.5,  0,  1,  0,  1,  0.5 }
		"J^" => {  /*h*/ 3,  0.5,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2,  10,  0,  1,  3,  0,  0,  0.5, /**/ 3,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  1.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 3,  5,  0.5,  0,  1,  0,  1,  0.5 }
		"K" => {  /*h*/ 4,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  18,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2,  20,  0.5,  2,  2,  0,  0,  0.5, /**/ 4,  18,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 4,  15,  0.5,  0,  3,  0,  0,  0, /**/ 4,  0,  0,  0,  1,  0,  1,  0, /**/ 4,  2.5,  0,  4,  1,  0,  0,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"L" => {  /*h*/ 3,  0.5,  0,  0.5,  0, 0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 3,  8.5,  0.5,  2,  2,  0,  0,  0.5, /**/ 1.1,  10,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 2,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 3.25,  1.5,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"@L" => {  /*h*/ 0,  0,  0,  0.5,  2,  2,  0,  "", /**/ "",  "",  "yes",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  1,  0.5,  1,  0,  0,  0.5, /**/ 1,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ -1,  1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"@L3" => {  /*h*/ 0,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  1,  0.5,  1.0,  0,  0,  0.5, /**/ -1,  0.75,  0.5,  0,  1.0,  0,  0,  0.5, /**/ -2.75,  0,  0.5,  0,  1.0,  0,  0,  0.5, /**/ -1,  -0.75,  0.5,  0,  1.0,  0,  2,  0.5, /**/ 0,  0,  0.5,  0,  1.0,  0,  1,  0.5 }
		"&L" => {  /*h*/ 2,  0.5,  0,  0.5,  1,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 1,  0.5,  0.5,  0,  2,  0,  0,  0.5, /**/ 0.5,  1,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 0.5,  0,  0.5,  0,  2.5,  0,  1,  0 }
		"M" => {  /*h*/ 8,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  8.75,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 1.5,  10,  0.5,  2,  2.5,  0,  0,  0.5,  /**/ 3.5,  7.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 3.5,  2,  0.5,  0,  2.5,  0,  0,  0, /**/ 6,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 6,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 8,  1.75,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"N" => {  /*h*/ 11,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  4.25,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 1.9,  5,  0.5,  2,  2,  0,  0,  0.5, /**/ 4.5,  3.9,  0.5,  0,  3,  0,  0,  0.5, /* 5.5,  2,  0.5,  0,  2.5,  0,  0,  0.5, *//**/ 7.5,  1,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 9.5,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 9.5,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 11,  1,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"N=" => {  /*h*/ 12,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  1,  1,  0,  0,  0.5, /**/ 0,  2.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  4.25,  0.5,  1,  1.5,  0,  0,  0.5, /**/ 2.9,  5,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 5.5,  3.9,  0.5,  0,  1.0,  0,  0,  0.5, /* 6.5,  2,  0.5,  0,  2.5,  0,  0,  0.5, *//**/ 8.5,  1,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 10.5,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 10.5,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 12,  1,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"P" => {  /*h*/ 4,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  0.0, 0.75,  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  20,  0,  1,  3,  0,  0,  0, /**/ 0,  2.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 4,  2,  0,  0,  1,  0,  1,  0, /*test:diacritics2*/ 1,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"Q" => {  /*h*/ 3,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1,  19,  0.5,  1,  1,  0,  0,  0.5, /**/ 3,  20,  0.5,  98,  3,  0,  0,  0.5, /**/ 1,  19,  0.5,  0,  3,  0,  0,  0.5, /**/ 0,  15,  0.5,  0,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"VR" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  2.5, /**/ 5,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 2.5,  5,  0.5,  1,  1.5,  0,  0,  0.5, /*2*/ 3.75,  4,  0.7,  5,  2.5,  0,  0,  0.7, /*3*/ 5,  2.5,  0.5,  0,  2.5,  0,  0,  0.5, /*4*/ 4.5,  0.5,  0.7,  5,  2.5,  0,  0,  0.7, /**/ 3.25,  0.15,  0.7,  5,  1.5,  0,  0,  0.7, /**/ 2.5,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  4,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"AR" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.5,  0,  0.5,  1,  1,  0,  0,  0.7, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  2.5,  0.5,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"AR^" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  3,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2.5,  0,  0.5,  1,  1,  0,  0,  0.7, /**/ 5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  0,  0, /**/ 5,  2.5,  0.7,  0,  1,  0,  1,  0.7 }
		"AR5" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  2.5,  0.7,  1,  1,  0,  0,  0.7, /**/ 2.5,  5,  0.7,  0,  3,  0,  0,  0.5, /**/ 0,  2.5,  0.7,  0,  3,  0,  0,  0.5, /**/ 2.5,  0,  0.5,  0,  1,  0,  0,  0, /**/ 2.5,  0,  0.5,  1,  1,  0,  1,  0.7 }
		"AUF+AR" => {  /*h*/ 10.5,  0.5,  0,  0.0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3.0,  0,  0,  0.5, /**/ 1.75,  2.5,  0.5,  0,  2,  0,  0,  0.0, /*d2*/ 5.75,  0,  0.5,  0,  1,  0,  0,  0.7, /**/ 10.5,  2.5,  0.7,  0,  1,  0,  0,  0.7, /**/ 8,  5,  0.7,  0,  1.0,  0,  0,  0.5, /**/ 5.5,  2.5,  0.7,  0,  1.0,  0,  0,  0.5, /**/ 8,  0,  0.5,  0,  1,  0,  1,  0 }
		"@R" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.7,  0,  1,  0,  0,  0.7, /**/ -2.5,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -4,  0,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -2.5,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  0,  0.5,  0,  1,  0,  1,  0.7 }
		"@R3^" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ -2.5,  4,  0.7,  0,  1,  0,  0,  0.5, /**/ -5,  1.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  1.5,  0.5,  0,  1,  0,  1,  0.7 }
		"@R6" => {  /*h*/ 0,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.7,  0,  1,  0,  0,  0.7, /**/ 2,  2.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -0.25,  5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  2.5,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  0,  0.5,  0,  1,  0,  1,  0.7 }
		"S" => {  /*h*/ 6.75,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d1*/ 0,  4,  0.5,  1,  1.5,  0,  0,  0.5, /*2*/ /*1,  5,  0.5,  2,  2,  0,  0,  0.5,*/ /**/ 2,  5,  0.5,  2,  3,  0,  0,  0, /*3*/ 4,  4,  0.5,  0,  3,  0,  0,  0, /*4*/ 8.75,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"=ES" => {  /*h*/ 18.75,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 2,  5,  0.5,  1,  1.5,  0,  0,  0.5, /*d*/ 6,  5.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 10,  5.5,  0.5,  0,  2,  0,  0,  0.5, /**/ 12,  5,  0.5,  0,  3,  0,  0,  0.5, /**/ 14,  4,  0.5,  0,  3,  0,  0,  0, /**/ 18.75,  0,  0,  0,  1,  0,  1,  0 }
		"S=" => {  /*h*/ 9.75,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  1,  1.0,  0,  0,  0.5,/**/ 0,  2.5,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 1,  4,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 2,  5,  0.5,  0,  1.0,  0,  0,  0.5, /**/ 3,  5,  0.5,  0,  2.0,  0,  0,  0, /**/ 5,  4,  0.5,  0,  3,  0,  0,  0, /**/ 9.75,  0,  0,  0,  1.0,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"T" => {  /*h*/ 0,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  20,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /**/ 0,  2.5,  0,  4,  1,  0,  0,  0.5, /*diacritics*/ -1,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"&T" => {  /*h*/ 4,  0,  1.5,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  20,  0,  1,  1,  0,  0,  0, /**/ 4,  20,  0,  0,  1,  0,  1,  0 }
		"&T-1" => {  /*h*/ 4,  0,  1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  20,  0,  1,  1,  0,  1,  0, /**/ 4,  20,  0,  0,  1,  0,  1,  0 }
		"&T3/4" => {  /*h*/ 4,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  15,  0,  1,  1,  0,  1,  0, /**/ 4,  15,  0,  0,  1,  0,  1,  0, /**/ 4,  15,  0,  4,  1,  0,  1,  0 }
		"&&T" => {  /*h*/ 4,  0,  1.5,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  20,  0,  1,  1,  0,  1,  0, /**/ 4,  20,  0,  0,  1,  0,  1,  0 }
		"&T34" => {  /*h*/ 4,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  1,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  15,  0,  1,  1,  0,  1,  0, /**/ 4,  15,  0,  0,  1,  0,  1,  0, /**/ 4,  15,  0,  4,  1,  0,  1,  0 }
		"ET" => {  /*h*/ 6,  0,  2.5,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 6,  30,  0,  1,  1,  0,  1,  0, /**/ 6,  30,  0,  0,  1,  0,  1,  0 }
		"ET3/4" => {  /*h*/ 4,  0,  1.5,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  20,  0,  1,  1,  0,  1,  0, /**/ 4,  20,  0,  0,  1,  0,  1,  0 }
		"V" => {  /*h*/ 7,  0.5,  0,  0.5, 1.5,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.25,  16.75,  0.5,  1,  1,  0,  0,  0.5, /**/ 2.25,  19.5,  0.6,  2,  1,  0,  0,  0, /**/ 6,  20,  0,  98,  0,  0,  0,  0.5, /**/ 2.25,  19.5,  0.6,  0,  1.5,  0,  0,  0.5, /**/ 0.25,  16.75,  0.5,  0,  2.5,  0,  0,  0.5, /**/ -0.75,  14,  0.5,  0,  3,  0,  0,  0.5, /**/ -1.5,  9.75,  0.5,  0,  3,  0,  0,  0.5, /**/ -0.5,  4.5,  0.5,  0,  3,  0,  0,  0.5, /**/ 1,  2,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3.5,  0.25,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 5,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 7,  0.5,  0.5,  0,  1,  0,  1,  0.5, /*test:diacritics2*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"W" => {  /*h*/ 7,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 1.5,  8.5,  0.5,  1,  1,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 5,  10,  0.5,  98,  1.5,  0,  0,  0.5, /**/ 2.25,  9.25,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 1.5,  8.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 0,  6,  0.5,  0,  3,  0,  0,  0.5, /**/ 0.5,  2,  0.5,  0,  3,  0,  0,  0.5, /**/ 4,  0,  0.5,  4,  1.5,  0,  0,  0.5, /**/ 4.5,  0,  0.5,  0,  1.5,  0,  2,  0.5, /**/ 7,  1.5,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"X" => {  /*h*/ 7,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  1.0,  0,  0,  0.5, /**/ 3,  7.5,  0.5,  2,  1.5,  0,  0,  0.5, /**/ 3,  9.5,  0.5,  0,  2.0,  0,  0,  0.5, /**/ 1,  9.75,  0.5,  0,  2.5,  0,  0,  0.5, /**/ -0.5,  6,  0.5,  0,  2.0,  0,  0,  0.5, /**/ 0,  5,  0.5,  0,  1.5,  0,  0,  0, /**/ 7,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"Y" => {  /*h*/ 10,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  3,  0,  0,  0, /**/ 10,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 4,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"Z" => {  /*h*/ 5,  1,  -1,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 5,  10,  0,  1,  3,  0,  0,  0, /**/ 5,  -5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 4.25,  -9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /*diacritics*/ 3,  -15,  0,  "@#_",  0,  0,  0,  0, /*diacritics*/ 3,  -15,  0,  "@#/",  0,  0,  0,  0, /**/ 1.5,  -9,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -7,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  2.5,  0.5,  4,  1,  0,  2,  0.5, /**/ 5,  0,  0.5,  0,  1,  0,  1,  0.5 }
		"&E" => {  /*h*/ 3,  0.5,  0,  0,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 0,  1.5,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 2,  0,  0.5,  0,  1.2,  0,  2,  0.5, /**/ 3,  0,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"&A" => {  /*h*/ 0,  0.5,  0,  0,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"&U" => {  /*h*/ 5,  0.5,  0,  0,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 5,  0,  0,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"&O" => {  /*h*/ 6.75,  0.5,  0,  0.5,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  1.5,  0,  0,  0.5, /**/ 0.75,  3,  0.5,  0,  3,  0,  0,  0.5, /**/ 6,  2.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 6.75,  0,  0.5,  0,  1,  0,  1,  0, /*diacritics*/ 3,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"&I" => {  /*h*/ 2,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  1,  0.5,  1,  2,  0,  0,  0.5, /**/ 1,  0.5,  0.5,  0,  2,  0,  0,  0.5, /**/ 0.5,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1,  0,  0,  0, /**/ 0.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 0.5,  1,  0.5,  0,  1,  0,  1,  0.5, /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"#U#" => {  /*h*/ 5,  0.5,  0,  0,  0,  2,  0,  "", /**/ "",  "",  "",  "",  1,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 5,  5,  0,  0,  3,  0,  0,  0, /**/ 10,  0,  0,  0,  1,  0,  1,  0 }
		"-E" => {  /*h*/ 1.25,  0.5,  0,  0,  4,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ -1,  5,  0.5,  1,  3,  0,  0,  0, /**/ -1,  5,  0,  0,  3,  0,  1,  0 }
		"-A" => {  /*h*/ 0,  0.5,  0,  0.5,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0 }
		"-U" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  3,  0,  0,  0, /**/ 5,  0,  0,  0,  1,  0,  1,  0 }
		"-O" => {  /*h*/ 6.75,  0.5,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  5,  0,  1,  1.5,  0,  0,  0.5, /**/ 0.75,  3,  0.5,  0,  3,  0,  0,  0.5, /**/ 6,  2.5,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 6.75,  0,  0.5,  0,  1,  0,  1,  0 }
		"-I" => {  /*h*/ 3,  0.5,  0,  0.5,  3,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  1,  0.5,  1,  1,  0,  0,  0.5, /**/ 1,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 2,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  0,  0.5,  0,  1,  0,  0,  0, /**/ 0,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  2,  0.5,  0,  1,  0,  1,  0.5 }
		"-EI" => {  /*h*/ 1.25,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  10,  0,  1,  3,  0,  0,  0, /**/ 4,  10,  1,  0,  3,  0,  1,  0 }
		"-^EI" => {  /*h*/ 1.25,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ /*no!*/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  10,  0,  1,  3,  0,  0,  0, /**/ 4,  10,  1,  0,  3,  0,  1,  0 }
		"-EI2" => {  /*h*/ 1.25,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 1,  0,  0,  0,  0,  0,  0,  0, /*d*/ 4,  15,  0,  1,  3,  0,  0,  0, /**/ 4,  10,  1,  0,  3,  0,  1,  0 }
		"/I" => {  /*h*/ 1.25,  0.5,  0,  0.5,  1,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  10,  0,  1,  1,  0,  0,  0 }
		"0-" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0.5 }
		"0N-" => {  /*h*/ 1,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  5,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0.5 }
		"0D-" => {  /*h*/ 3,  0,  -0.5,  0,  0,  0,  1,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0.5 }
		"0U-" => {  /*h*/ 5,  0,  0,  0,  0,  0,  1,  "", /**/ "",  "",  "",  "",  0,  0.5,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  0,  0,  0, /**/ 0,  0,  0,  0,  1,  0,  1,  0.5 }
		"PSPACE" => {  /*h*/ 2,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  5,  0,  0, /**/ 2,  0,  0,  0,  1,  5,  2,  0 }
		"~~" => {  /*h*/ 12.5,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  9,  0,  1,  1,  5,  0,  0.5, /**/ 2.5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 5,  9,  0,  0,  1,  0,  0,  0.5, /**/ 7.5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 10,  9,  0,  0,  1,  0,  0,  0.5, /**/ 12.5,  11,  0,  0,  1,  0,  1,  0.5, /**/ 15,  9,  0,  0,  1,  0,  1,  0.5 }
		"~" => {  /*h*/ 12.5,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  9,  0,  1,  1,  5,  0,  0.5, /**/ 2.5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 5,  9,  0,  0,  1,  0,  0,  0.5, /**/ 7.5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 10,  9,  0,  0,  1,  0,  0,  0.5, /**/ 12.5,  11,  0,  0,  1,  0,  1,  0.5, /**/ 15,  9,  0,  0,  1,  0,  1,  0.5 }
		"…" => {  /*h:ellipsis*/ 9,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d1*/ 0.5,  0,  0,  1,  1,  5,  0,  0, /**/ 1,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 0,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  0,  0,  0,  1,  0,  1,  0.5, /*d2*/ 4.5,  0,  0,  1,  1,  5,  0,  0, /**/ 5,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 4.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 4,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 4.5,  0,  0,  0,  1,  0,  1,  0.5, /*d3*/ 8.5,  0,  0,  1,  1,  5,  0,  0, /**/ 9,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 8.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 8,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 8.5,  0,  0,  0,  1,  0,  1,  0.5 }
		"." => {  /*h*/ 2,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0,  1,  1,  5,  0,  0, /**/ 1,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 0,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  0,  0,  0,  1,  0,  1,  0.5 }
		"," => {  /*h*/ 3,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 2,  -2,  0,  1,  1,  5,  0,  0, /**/ 3,  1,  0,  0,  1,  0,  1,  0.5 }
		";" => {  /*h*/ 3,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 2.5,  4.5,  0,  1,  1,  5,  0,  0, /**/ 3,  5,  0,  0,  1,  0,  1,  0.5, /**/ 2.5,  5.5,  0,  0,  1,  0,  1,  0.5, /**/ 2,  5,  0,  0,  1,  0,  1,  0.5, /**/ 2.5,  4.5,  0,  0,  1,  0,  1,  0.5, /**/ 3,  1,  0,  1,  1,  5,  0,  0, /**/ 2,  -2,  0,  0,  1,  0,  1,  0.5 }
		":" => {  /*h*/ 3,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0.5,  4.5,  0,  1,  1,  5,  0,  0, /**/ 1,  5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  5.5,  0,  0,  1,  0,  1,  0.5, /**/ 0,  5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  4.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  0,  0,  1,  1,  5,  0,  0, /**/ 1,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 0,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  0,  0,  0,  1,  0,  1,  0.5 }
		"!" => {  /*h*/ 2,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0.5,  20,  0,  1,  1,  5,  0,  0, /**/ 0.5,  5,  0,  1,  1,  0,  0,  0, /**/ 0.5,  0,  0,  1,  1,  5,  0,  0, /**/ 1,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 0,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 0.5,  0,  0,  0,  1,  0,  1,  0.5 }
		"?" => {  /*h*/ 5,  0,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  15,  0,  0,  1,  5,  0,  0.5, /**/ 1.25,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  20,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.75,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  15,  0.5,  0,  1,  0,  0,  0.5, /**/ 5,  13,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 2.5,  5,  0.5,  0,  1,  0,  0,  0, /**/ 2.5,  0,  0,  1,  1,  5,  0,  0, /**/ 3,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 2.5,  1,  0,  0,  1,  0,  1,  0.5, /**/ 2,  0.5,  0,  0,  1,  0,  1,  0.5, /**/ 2.5,  0,  0,  0,  1,  0,  1,  0.5 }
		"=" => {  /*h*/ 5,  0,  0,  0,  3,  3,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  11,  0,  1,  1,  5,  0,  0.5, /**/ 5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 0,  9,  0,  0,  1,  5,  0,  0.5, /**/ 5,  9,  0,  0,  1,  0,  1,  0.5 }
		"'" => {  /*h*/ 1,  0,  0,  0,  3,  3,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  14,  0,  1,  1,  5,  0,  0.5, /**/ 1,  15,  0,  0,  1,  0,  0,  0.5, /**/ 1,  18,  0,  0,  1,  0,  1,  0.5 }
		""" => {  /*h*/ 3,  0,  0,  0,  2,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  14,  0,  1,  1,  5,  0,  0.5, /**/ 1,  15,  0,  0,  1,  0,  0,  0.5, /**/ 1,  18,  0,  0,  1,  0,  0,  0.5, /**/ 2,  14,  0,  0,  1,  5,  0,  0.5, /**/ 3,  15,  0,  0,  1,  0,  0,  0.5, /**/ 3,  18,  0,  0,  1,  0,  1,  0.5 }
		"/" => {  /*h*/ 6,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0, /*d*/ 0,  1,  0,  1,  1,  5,  0,  0, /**/ 6,  19,  0,  0,  1,  0,  1,  0.5 }
		"#Q#" => {  /*h*/ 3,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  14,  0,  1,  1,  5,  0,  0.5, /**/ 1,  15,  0,  0,  1,  0,  0,  0.5, /**/ 1,  18,  0,  0,  1,  0,  0,  0.5, /**/ 2,  14,  0,  1,  1,  5,  0,  0.5, /**/ 3,  15,  0,  0,  1,  0,  0,  0.5, /**/ 3,  18,  0,  0,  1,  0,  0,  0.5 }
		"(" => {  /*h*/ 4,  0,  0,  0,  0,  2,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 4,  13,  0,  1,  1,  5,  0,  0, /**/ 0,  13,  0,  0,  1,  0,  0,  0, /**/ 0,  1,  0,  0,  1,  0,  0,  0, /**/ 4,  1,  0,  0,  1,  0,  0,  0 }
		")" => {  /*h*/ 4,  0,  0,  0,  2,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  13,  0,  1,  1,  5,  0,  0, /**/ 4,  13,  0,  0,  1,  0,  0,  0, /**/ 4,  1,  0,  0,  1,  0,  0,  0, /**/ 0,  1,  0,  0,  1,  0,  0,  0 }
		"A" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "narrow",  "yes",  0,  0 }
		"#0S" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "none",  "yes",  0,  0 }
		"#N" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "narrow",  "no",  0,  0 }
		"#W" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "wide",  "no",  0,  0 }
		"#NS" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "narrow",  "yes",  0,  0 }
		"#WS" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "wide",  "yes",  0,  0 }
		"#NDS" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "narrow",  "yes",  0,  0 }
		"#WDS" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "wide",  "yes",  0,  0 }
		"#WD" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "wide",  "no",  0,  0 }
		"#WU" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "wide",  "no",  0,  0 }
		"#WUS" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "wide",  "yes",  0,  0 }
		"E" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "wide",  "no",  0,  0 }
		"I" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "narrow",  "no",  0,  0 }
		"O" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "narrow",  "no",  0,  0 }
		"U" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "narrow",  "yes",  0,  0 }
		"Ä" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "no",  "wide",  "yes",  0,  0 }
		"Ö" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "wide",  "no",  0,  0 }
		"Ü" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "down",  "wide",  "yes",  0,  0 }
		"EU" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "wide",  "yes",  0,  0 }
		"AU" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "narrow",  "yes",  0,  0 }
		"EI" => {  /*h*/ 0,  0,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  2,  0,  0,  0, /**/ 0,  0,  0,  "up",  "wide",  "no",  0,  0 }
		"0" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 3.5,  1,  0,  0,  1,  5,  0,  0.5, /**/ 6,  2.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 6,  17.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  17.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 1,  2.5,  0.5,  0,  1,  0,  0,  0, /**/ 3.5,  1,  0,  1,  1,  0,  0,  0, /**/ 6,  2.5,  0,  0,  1,  5,  1,  0.5 }
		"1" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  1,  0, /*d*/ 0,  11,  0,  0,  1,  5,  0,  0, /**/ 7,  19,  0,  0,  1,  0,  0,  0, /**/ 7,  1,  0,  0,  1,  0,  0,  0 }
		"2" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  14,  0,  0,  1,  5,  0,  0.5, /**/ 1.25,  18,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 5.75,  18,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  15,  0.5,  0,  1,  0,  0,  0, /**/ 0,  1,  0,  0,  1,  0,  0,  0.5, /**/ 7,  1,  0,  0,  1,  0,  0,  0 }
		"3" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  14,  0,  0,  1,  5,  0,  0.5, /**/ 1.25,  18,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 5.75,  18,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  15,  0.5,  0,  1,  0,  0,  0, /**/ 3.5,  11,  0,  0,  1,  0,  0,  0.5, /**/ 7,  7,  0.5,  0,  1,  0,  0,  0.5, /**/ 6,  2.5,  0.5,  0,  1,  0,  0,  0, /**/ 3.5,  1,  0,  1,  1,  0,  0,  0, /**/ 0,  5,  0,  0,  1,  0,  1,  0 }
		"4" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 3.5,  19,  0,  0,  1,  5,  0,  0, /**/ 0,  11,  0,  0,  1,  0,  0,  0.5, /**/ 7,  11,  0,  0,  1,  0,  0,  0, /**/ 5.5,  19,  0,  0,  1,  5,  0,  0, /**/ 5.5,  1,  0,  0,  1,  0,  0,  0 }
		"5" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 7,  19,  0,  0,  1,  5,  0,  0, /**/ 0,  19,  0,  0,  1,  0,  0,  0, /**/ 0,  11,  0,  0,  1,  0,  0,  0.5, /**/ 6,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  5,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  4,  0.5,  0,  1,  0,  0,  0 }
		"6" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 7,  19,  0,  0,  1,  5,  0,  0.5, /**/ 1,  11,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  5,  0.5,  0,  1,  0,  0,  0.5, /**/ 1.5,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 6,  2,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  5,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  10,  0.5,  1,  1,  0,  0,  0.5, /**/ 0,  5,  0.5,  0,  1,  0,  1,  0.5 }
		"7" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  19,  0,  0,  1,  5,  0,  0, /**/ 7,  19,  0,  0,  1,  0,  0,  0, /**/ 3,  1,  0,  0,  1,  0,  0,  0, /**/ 3.5,  11,  0,  0,  1,  5,  0,  0, /**/ 6.5,  11,  0,  0,  1,  0,  0,  0 }
		"8" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 3.5,  11,  0,  0,  1,  5,  0,  0.5, /**/ 7,  15,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  15,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  11,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  6,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  6,  0.5,  0,  1,  0,  0,  0, /**/ 3.5,  11,  0,  1,  1,  0,  0,  0 }
		"9" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 7,  14,  0,  0,  1,  5,  0,  0.5, /**/ 3.5,  10,  0.5,  0,  1,  0,  0,  0.5, /**/ 0,  15,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  19,  0.5,  0,  1,  0,  0,  0.5, /**/ 7,  15,  0.5,  0,  1,  0,  0,  0.5, /**/ 6,  6,  0.5,  0,  1,  0,  0,  0.5, /**/ 3.5,  1,  0.5,  0,  1,  0,  0,  0 }
		"#A+" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0,  1,  1,  5,  0,  0, /**/ 3.5,  19,  0,  0,  1,  0,  0,  0, /**/ 7,  0,  0,  0,  1,  0,  0,  0, /**/ 1.75,  9.5,  0,  0,  1,  5,  0,  0, /**/ 5.25,  9.5,  0,  0,  1,  0,  1,  0 }
		"#A-" => {  /*h*/ 7,  0,  0,  0,  4,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  1,  0,  0,  0,  0,  0, /*d*/ 5.25,  9,  0,  1,  1,  5,  0,  0.5, /**/ 4.5,  9.5,  0.5,  0,  1,  0,  0,  0.5, /**/ 0.5,  3.75,  0.5,  0,  1,  0,  0,  0.5, /**/ 0.5,  1,  0.5,  0,  1,  0,  0,  0.5, /**/ 1.5,  0,  0.5,  0,  1,  0,  0,  0, /**/ 5.25,  9,  0,  0,  1,  0,  0,  0.5, /**/ 5.25,  1,  0.5,  0,  1,  0,  0,  0, /**/ 6,  0,  0,  0,  1,  0,  1,  0 }
		"#_#" => {  /*h*/ 1,  0.5,  0,  0,  4,  4,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  1,  0,  0,  0,  0,  0,  0, /*d*/ 0,  -4.5,  0,  1,  1.0,  0,  0,  0, /**/ 7,  -4.5,  0,  0,  1.0,  0,  1,  0 }
		"_._" => {  /*h*/ 3,  0,  0,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*stützpunkt_sch*/ 2.5,  8,  0.5,  1,  1,  0,  1,  0.5 }
	#EndSubSection(base)
	#BeginSubSection(combiner)
		"D" => { "@R3^", 0, 0 }
		"C" => { "@R", 0, 0 }
		"ND" => { "@R", 0, 0 }
		//"T" => { "@R", 0, 0 }
		"T" => { "@R3^", 0, 0 }
		"G" => { "@R3^", 0, 0 }
		"K" => { "@R", 0, 0 }
		"K" => { "@R3^", 0, 0 }
		"CH" => { "@R", 0, 0 }
		"NK" => { "@R", 0, 0 }
		"NG" => { "@R", 0, 0 }
		"NS" => { "@R", 0, 0 }
		"H" => { "@R", 0, 0 }
		"SCH" => { "@R", 0, 0 }
		"ST" => { "@R3^", 0, 0 }
		"L" => { "@L", 0, 0 }
		"B" => { "@L", 0, 0 }
		"G" => { "@L3", 0, 0 }
		"M" => { "@L", 0, 0 }
		"MM" => { "@L", 0, 0 }
		"F" => { "@L", 0, 0 }
		"P" => { "@L", 0, 0 }
		"PF" => { "@L", 0, 0 }
		"V" => { "@L", 0, 0 }
		"SP" => { "@L", 0, 0 }
		"W" => { "@L", 0, 0 }
		"T" => { "@L3", 0, 0 }
		"TT" => { "@L3", 0, 0 }
		"PP" => { "@L", 0, 0 }
		"CK" => { "@L3", 0, 0 }
		"FF" => { "@L", 0, 0 }
		"NG" => { "@L3", 0, 0 }
		"NS" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"D" => { "@L3", 0, 0 }
		"C" => { "@L3", 0, 0 }
		"ND" => { "@L3", 0, 0 }
		"ST" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"K" => { "@L3", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"SCH" => { "@L3", 0, 0 }
		"CH" => { "@L3", 0, 0 }
		"B" => { "@R6", 0, 0 }
		"SP" => { "@R6", 0, 0 }
		"F" => { "@R6", 0, 0 }
		"M" => { "@R6", 0, 0 }
		"P" => { "@R6", 0, 0 }
		"PF" => { "@R6", 0, 0 }
		"V" => { "@R6", 0, 0 }
		"W" => { "@R6", 0, 0 }
		"Z" => { "@R", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"DA" => { "@R", 0, 0 }
		"N" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"N" => { "@L", 0, 0 }
		"NN" => { "@L", 0, 0 }
		"VR" => { "@L", 0, 0.5 }
		"RR" => { "@L", 0, 1 }
		"CK" => { "@L", 0, 0 }
		"L" => { "@R6", 0, 0 }
		"TT" => { "@R3^", 0, 0 }
		"PP" => { "@R6", 0, 0 }
		"CK" => { "@R3^", 0, 0 }
		"FF" => { "@R6", 0, 0 }
		"^CH" => { "@L3", 0, 0 }
		"^CH" => { "@R", 0, 0 }
		"^SCH" => { "@L3", 0, 0 }
		"B" => { "@#/", "", "" }
		"C" => { "@#/", "", "" }
		"F" => { "@#/", "", "" }
		"G" => { "@#/", "", "" }
		"L" => { "@#/", "", "" }
		"M" => { "@#/", "", "" }
		"V" => { "@#/", "", "" }
		"W" => { "@#/", "", "" }
		"Z" => { "@#/", "", "" }
		"&A" => { "@#_", "", "" }
		"B" => { "@#_", "", "" }
		"C" => { "@#_", "", "" }
		"D" => { "@#_", "", "" }
		"&E" => { "@#_", "", "" }
		"F" => { "@#_", "", "" }
		"G" => { "@#_", "", "" }
		"H" => { "@#_", "", "" }
		"&I" => { "@#_", "", "" }
		"J" => { "@#_", "", "" }
		"K" => { "@#_", "", "" }
		"L" => { "@#_", "", "" }
		"M" => { "@#_", "", "" }
		"N" => { "@#_", "", "" }
		"N=" => { "@#_", "", "" }
		"&O" => { "@#_", "", "" }
		"P" => { "@#_", "", "" }
		"Q" => { "@#_", "", "" }
		"VR" => { "@#_", "", "" }
		"AR" => { "@#_", "", "" }
		"S" => { "@#_", "", "" }
		"S=" => { "@#_", "", "" }
		"T" => { "@#_", "", "" }
		"&U" => { "@#_", "", "" }
		"V" => { "@#_", "", "" }
		"W" => { "@#_", "", "" }
		"X" => { "@#_", "", "" }
		"Y" => { "@#_", "", "" }
		"Z" => { "@#_", "", "" }
	#EndSubSection(combiner)
	#BeginSubSection(shifter)
		"DEM" => { "^DEM", 0, 5, 0, 0 }
		"DEN" => { "^DEN", 0, 5, 0, 0 }
		"DEM" => { "^^DEM", 0, 10, 0, 0 }
		"DEN" => { "^^DEN", 0, 10, 0, 0 }
		"=ES" => { "&EITES", 10, 14.5, 0, 1 }
		"=ES" => { "&TES", 2, 14.5, 0, 1 }
		"B" => { "&TB", 4, 10, 0, 1 }
		"NG" => { "&TNG", 4, 10, 0, 1 }
		"NS" => { "&TNS", 4, 10, 0, 1 }
		"C" => { "&TC", 4, 10, 0, 1 }
		"D" => { "&TD", 4, 10, 0, 1 }
		"G" => { "&TG", 4, 10, 0, 1 }
		"H" => { "&TH", 4, 10, 0, 1 }
		"J" => { "&TJ", 4, 10, 0, 1 }
		"L" => { "&T#L", 4, 10, 0, 1 }
		"@L3" => { "&T@L3", 4, 16.5, 0, 1.5 }
		"ALL" => { "&TALL", 4, 10, 0, 1 }
		"M" => { "&TM", 4, 10, 0, 1 }
		"W" => { "&TW", 4, 10, 0, 1 }
		"X" => { "&TX", 4, 10, 0, 1 }
		"Y" => { "&TY", 4, 10, 0, 1 }
		"&E" => { "&T&E", 4, 15, 0, 1.5 }
		"SCHAFT" => { "&TSCHAFT", 4, 15, 0, 1.5 }
		"ION" => { "&TION", 4, 10, 0, 1 }
		"N" => { "&TN", 4, 15, 0, 1.5 }
		"VR" => { "&TVR", 4, 15, 0, 1.5 }
		"AR5" => { "&TAR5", 4, 15, 0, 1.5 }
		"S" => { "&TS", 4, 15, 0, 1.5 }
		"&U" => { "&T&U", 4, 15, 0, 1.5 }
		"&O" => { "&T&O", 4, 15, 0, 1.5 }
		"&I" => { "&T&I", 4, 15, 0, 1.5 }
		"CH" => { "&TCH", 4, 20, 0, 1 }
		"SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"^Z" => { "&T^Z", 4, 20, 0, 1 }
		"^CH" => { "&T^CH", 4, 20, 0, 1 }
		"^SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"Z" => { "&TZ", 4, 20, 0, 1 }
		"F@L" => { "&TF@L", 4, 10, 0, 1 }
		"F" => { "&TF", 4, 10, 0, 1 }
		"HAFT" => { "&THAFT", 4, 10, 0, 1 }
		"K" => { "&TK", 4, 20, 0, 1 }
		"P" => { "&TP", 4, 20, 0, 1 }
		"Q" => { "&TQ", 4, 20, 0, 1 }
		"V" => { "&TV", 4, 20, 0, 1 }
		"NK" => { "&TK", 4, 20, 0, 1 }
		"PF" => { "&TPF", 4, 20, 0, 1 }
		"SP" => { "&TSP", 4, 20, 0, 1 }
		"ST" => { "&TST", 4, 10, 0, 1 }
		"SCHW" => { "&TSCHW", 4, 30, 0, 1 }
		"ZW" => { "&TZW", 4, 30, 0, 1 }
		"B" => { "&EITB", 18, 10, 0, 1 }
		"NG" => { "&EITNG", 18, 10, 0, 1 }
		"NS" => { "&EITNS", 18, 10, 0, 1 }
		"C" => { "&EITC", 18, 10, 0, 1 }
		"D" => { "&EITD", 18, 10, 0, 1 }
		"G" => { "&EITG", 18, 10, 0, 1 }
		"H" => { "&EITH", 18, 10, 0, 1 }
		"J" => { "&EITJ", 18, 10, 0, 1 }
		"L" => { "&EITL", 18, 10, 0, 1 }
		"@L3" => { "&EIT@L3", 18, 10, 0, 1 }
		"ALL" => { "&EITALL", 18, 10, 0, 1 }
		"M" => { "&EITM", 18, 10, 0, 1 }
		"W" => { "&EITW", 18, 10, 0, 1 }
		"X" => { "&EITX", 18, 10, 0, 1 }
		"Y" => { "&EITY", 18, 10, 0, 1 }
		"&E" => { "&EIT&E", 18, 15, 0, 1.5 }
		"SCHAFT" => { "&EITSCHAFT", 18, 15, 0, 1.5 }
		"N" => { "&EITN", 18, 15, 0, 1.5 }
		"VR" => { "&EITVR", 18, 15, 0, 1.5 }
		"S" => { "&EITS", 18, 15, 0, 1.5 }
		"U" => { "&EITU", 18, 15, 0, 1.5 }
		"&O" => { "&EIT&O", 18, 15, 0, 1.5 }
		"CH" => { "&EITCH", 18, 20, 0, 1 }
		"SCH" => { "&EITSCH", 18, 20, 0, 2 }
		"Z" => { "&EITZ", 18, 20, 0, 1 }
		"^Z" => { "&EIT^Z", 4, 20, 0, 1 }
		"^CH" => { "&EIT^CH", 4, 20, 0, 1 }
		"^SCH" => { "&EIT^SCH", 4, 20, 0, 1 }
		"F" => { "&EITF", 18, 10, 0, 1 }
		"K" => { "&EITK", 18, 20, 0, 1 }
		"P" => { "&EITP", 18, 20, 0, 1 }
		"Q" => { "&EITQ", 18, 20, 0, 1 }
		"V" => { "&EITV", 18, 20, 0, 1 }
		"NK" => { "&EITK", 18, 20, 0, 1 }
		"PF" => { "&EITPF", 18, 20, 0, 1 }
		"SP" => { "&EITSP", 18, 20, 0, 1 }
		"ST" => { "&EITST", 18, 10, 0, 1 }
		"SCHW" => { "&EITSCHW", 18, 30, 0, 1 }
		"ZW" => { "&EITZW", 18, 30, 0, 1 }
		"@L3" => { "&T@L3", 4, 15, 0, 1.5 }
		"@R" => { "&T@R", 4, 15, 0, 1.5 }
		"@L3" => { "&EIT@L3", 18, 15, 0, 1.5 }
		"@R" => { "&EIT@R", 18, 15, 0, 1.5 }
		"N=" => { "NICHT2", 0, 5, 0, 0.5 }
	#EndSubSection(shifter)
#EndSection(font)

#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		
		// abbreviator: eliminates . in abbreviations (based on a list) 
		// all words conserve original upper/lower case distinction
		"(^| )(Adr|[Aa]llg|Art|[Aa]usschl|[Ee]inschl|[Bb]etr|[Bb]zw|[Cc]a|[Cc]m|[Dd]ipl|Dir|Dr|[Ee]idg|[Mm]ed|[Dd]esgl|[Dd]iv|[Dd]o|[Kk]ap|[Kk]at|[Ll]it|[Mm]in|[Mm]ot|[Ff]ak|Gebr|[Oo]ff|[Pp]hil|[Pp]pa|Präs|Prof|[Pp]rov|Reg|Sko|[Ss]og|[Ss]pez|[Ss]t|[Oo]bl|[Vv]gl|[Vv]\. ?Chr|[Zz]iff)\." => "$1$2";
		"((?: |^)[Vv])\|?\.\|? ?(Chr[ ,])" => "$1$2"; // abbreviation v. Chr.
		"((?: |^)[Aa])\|?\.\|? ?([Dd])\." => "$1 $2"; // abbreviation a.D. (ausser Dienst)

		// Abbreviation sog. [Ss]og| can't be done because of verb sog (past tense)
		"([Ee]ntspr|[Ee]v|[Ee]vtl|Ex|[Ee]xkl|Fa|Fr|GmbH|Ing|[Ii]nkl)\." => "$1";
		"(Nr|Prosp|Qual|Tel|Jan|Febr|Apr|Jun|Jul|Aug|Sept|Okt|Nov|Dez)\." => "$1";
		// words with two points
		"[Dd]\. ?h\." => "das+h";
		"[Uu]\.a\." => "UA";
		"[Zz]\.B\." => "z+b";
		"[Zz]\.[Tt]\." => "z+t";
		"[Aa]nm\. ?d\. ?[Rr]ed\.?" => "Anm der Red";
		"[Aa]\. [cC][Tt]\." => "a ct"; // année courante
		
		"([Ff]ort) ([Nn]ational)" => "#$1 $2"; // Fort National

		// transcribe parenthesis directly to avoid following bug ...
		//"( |^)((?:[a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)+)\(([0-9]+)\)([ .?!:;]|$)" => "$1$2\|#BROP$3#BRCL$4"; // Oued(4) => Footnotes
		// darned escaping hell ... !!! doesn't work => separate the whole stuff with a space and live with it!
		"( |^)((?:[a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)+)\(([0-9]+)\)([ .?!:;]|$)" => "$1$2 ($3)$4"; // Oued(4) => Footnotes

		// numbers in parathesis are written twice
		// e.g. (1959) => (1959 1959)
		// this is due to handling of pre- and posttoken
		// its a bug that should be corrected in source code
		// for the moment fix it with a regex-rule
		"\(([0-9]+)\)" => "($1[#0])"; // inserting artificial distance 0 separates pre- and posttokens 
		"\(([0-9]+)([.])(\))?" => "($1[#0]$2[#0]$3"; // further corrections to avoid bug
		
		// global replacements in the whole text
		" # " => " dash "; // # filtered out in parallel edition, so write it as a word (workaround)

		"-([Ee]s)-" => "-#$1-"; // Hammam-es-Salamin

		// special rules for texts coming from Project Gutenberg
		"tstopt(9)(?<!\[|\[.||\[..|\[...||\[....)#" => ""; // eliminate all other dashes: this is due to the Gutenberg Project, where all "Fraktur" are marked with dash (eliminate this rules if it modifies your original text in an undesired way)
		"tstopt(9)--" => "[~~]"; // -- in Project Gutenberg corresponds to long single -		
		"tstopt(9)(?<![^ ])_([^_]+)_(?![^ -.,;:!?])" => "$1"; // _X_ means italic in Gutenberg
		"tstopt(9)^_([^_]+)_(?![^ -.,;:!?])" => "$1"; // _X_ means italic in Gutenberg
		"tstopt(9)(?<![^ ])_([^_]+)_$" => "$1"; // _X_ means italic in Gutenberg
		"tstopt(9)^_([^_]+)_$" => "$1"; // _X_ means italic in Gutenberg
		"tstopt(9) #([^ ]*?)#([ ,;:.'"])" => " $1$2"; // does this rule break fortune cookies?!?

		// special rules after usage MKCOR (AE/OE/UE because auf utf8 incompatibility)
		// include them using same option 9 as for gutenberg
		"tstopt(9)AE" => "ä";
		"tstopt(9)OE" => "ö";
		"tstopt(9)UE" => "ü";

	 	// websites: www.xxxxxxxx.yy => solution for dots inside words
		"([a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)\.([a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)" => "$1|.|$2";

		
		// special italian
		" [Dd]a capo" => " d|a capo";

		"(-)([.,!?;:])" => "$1 $2"; // separate for later rule " - "
		"([.,!?;:])(-)" => "$1 $2"; // separate for later rule " - "
		"&ndash;" => "-"; // blocks calculation in layouted mode
		"-$" => " - "; // end of text
		"^-" => " - "; // beginning of text
		" - " => " [~~] ";
		" -([.,;:!?])" => " [~~]$1";
		"&hellip;" => "…"; // ellipsis (try to use one character defined as global variable punctuation in php)
		"\.\.\." => "…";
		//"…" => "…";
		"–" => "[~~]"; // blocks calculation in layouted mode
 		" &ndash; " => " [~~] "; // Gedankenstrich
		"&ndash;" => "="; // blocks calculation in layouted mode // probably obsolete?!
		"&rs?aquo;" => "«"; 
		"&ls?aquo;" => "»";
		"‘" => "'"; // there's a myriad of variants of ' ...
		"’" => "'"; // another one from Matto regiert
		"›" => "»";
		"‹" => "«";
		"„" => """;
		"“" => """;
		"—" => " [~~] "; // blocks calculation in layouted mode! (why?)
		"ß" => "ss";
		"&szlig;" => "ss";
		"«" => """; //"|[#Q#][#5]]\\|"; // originally in filter but can't be done in stage3!
		"»" => """; //"|[#5][#Q#]|";
		" " => " "; // this seems to be another white space (no idea, what utf8-code it is ... !!!

		// soundsoviel => separate: soundso viel
		"([Ss]oundso)(viel)" => "$1 $2";

		// protect handwritten "Es ist"
		"(handwriting.*? [Ee]s) (ist .*?shorthand>)" => "$1#$2";
		// substitute shorthand "Es ist" 
		" [Ee]s( *?)ist " => " es_ist ";  // avoid "semicolon-look of "Es ist";
		// rewrite handwritten "Es ist"
		"([Ee]s)#(ist)" => "$1 $2"; 

		// old ortograph
		"([Gg]ar)(nicht)" => "$1 $2"; 
		"([Mm]it) (nichten)" => "$1$2"; mit nichten / mitnichten

		// mark all recognizable Waren (not verb) with #Waren
		"(?<=[^ #])war(en|t)" => "#war$1"; // Backwaren (something + waren); Torwart
		"(?<!#)Waren(?![ .,;:?!])" => "#Waren"; // Warenbehälter (Waren + something)
		"(?<!#)Waren(?! *?[Ss]ie[ .,!?])" => "#Waren$1"; // Waren + no inversion (sie / Sie)
		"(?<!#)([Ww]ar[tn])([^.,;:?!]*?)(\!)" => "#$1$2$3"; // wart! (exclamation mark)

		// special rule for acronyms like FBI-Spezialeinheit (separate words)
		"([A-Z]{2,})-" => "$1[=] ";

		// since it is not possible to include more than one function in global (for the moment)
		// include the "abbreviator" this way 

		
		
		"(?<=^| )([Ee]ben)(des)" => "$1 $2"; // ebendeswegen

		// roman numbers
		// difficult ... I and V can't be included because of confusion with capital i and v
		// in addition there are many roman numbers ... so just include these as examples
		// problem must be solved differently (with function inside VSTENO)
		// the following rule doesn't work: use markers inside original text instead
		//" (II|III|IV|VI|VII|VIII|IX|XI|XII|XIII|XIV|XV|XVI|XVII|XVIII|XIX|XX) " => "<@token_type=svgtext> #ncrnm#$1 <@token_type=shorthand>";

		// 1990er (suffix)
		"(?<=^| )((?:19|20)[0-9][0-9])er(?=[ ,\.-]|$)" => "$1#er";
		
		// syntaxis: contractions for opt 01
		"tstopt(01)[Ii]ch muss" => "#ich_muss";
		"tstopt(01)[Mm]uss ich" => "#muss_ich";
		"tstopt(01) [Ee]r muss" => " #er_muss";
		"tstopt(01)[Ww]ir müss" => "#wir_müss";
		"tstopt(01)[Ww]ir können sie" => "#wir_können_sie";
		"tstopt(01)[Mm]üssen wir" => "#müssen_wir";
		"tstopt(01)[Ww]ir muss" => "#wir_muss";
		"tstopt(01)[Ii]ch will" => "#ich_will";
		"tstopt(01)[Ww]ir sind" => "#wir_sind";
		"tstopt(01)[Ww]ir können" => "#wir_können";
		"tstopt(01)[Ii]ch kann(?!t)" => "#ich_kann";
		"tstopt(01)[Ww]ir haben" => "#wir_haben";
		"tstopt(01)[Ii]ch könnte" => "#ich_könnte";
		"tstopt(01)[Kk]ann er" => "#kann_er";
		"tstopt(01) [Ii]n der" => " #in_der";
		"tstopt(01)[Ii]n dies" => "#in_dies";
		"tstopt(01)[Ii]n die" => "#in_die";
		"tstopt(01)[Ii]n den" => "#in_den";
		"tstopt(01)[Ss]ie sich" => "#sie_sich";
		"tstopt(01)[Aa]uf der" => "#auf_der";
		"tstopt(01)[Bb]ei der" => "#bei_der";
		"tstopt(01)[Vv]on der" => "#von_der";
		"tstopt(01)[Mm]it der" => "#mit_der";
		"tstopt(01)[Kk]ann ich" => "#kann_ich";
		"tstopt(01)[Ww]ill ich" => "#will_ich";
		"tstopt(01)[Ss]oll ich" => "#soll_ich";
		"tstopt(01)[Ww]enn ich" => "#wenn_ich";
		"tstopt(01)[Kk]auf ich" => "#kauf_ich";
		"tstopt(01)[Hh]abe? ich" => "#habe_ich";
		"tstopt(01)[Ii]ch habe?" => "#ich_habe";
		"tstopt(01)[Bb]in ich" => "#bin_ich";
		"tstopt(01)[Ii]ch bin" => "#ich_bin";
		"tstopt(01)[Ii]ch glaube? nicht" => "#ich_glaub_nicht";
		"tstopt(01)[Ii]ch glaub" => "#ich_glaub";
		"tstopt(01)[Ww]ir wollen" => "#wir_wollen";
		"tstopt(01)[Ww]urde ich" => "#wurde_ich";
		"tstopt(1)[Ww]ir wurden" => "#wir_wurd"; // only in HF1
		"tstopt(1)[Ww]urden wir" => "#wurd_wir"; // only in HF1
		"tstopt(1)[Ww]ir nehmen" => "#wir_nehm"; // only in HF1
		"tstopt(0)[Ww]ir nehmen" => "#wir_nehmen";
		"tstopt(0)[Ss]o genannt" => "#so_genannt";
		"tstopt(0)[Ww]ie viel" => "#wie_viel";
		"tstopt(0)[Dd]och noch" => "#doch_noch";
		"tstopt(0)[Mm]an konnte" => "#man_konnte";
		"tstopt(0)[Ss]oll man" => "#soll_man";
		"tstopt(0)[Ll]iegen lassen" => "#liegen_lassen";
		"tstopt(0)[Aa]uch noch" => "#auch_noch";
		"tstopt(0)[Aa]uch schon" => "#auch_schon";
		"tstopt(0)[Ii]mmer schon" => "#immer_schon";
		"tstopt(0)[Ww]ollen wir" => "#wollen_wir";
		"tstopt(0)[Ww]issen [Ss]ie" => "#wissen_sie";
		"tstopt(0)[Nn]ach dem" => "#nach_dem";
		"tstopt(0)[Mm]üssen [Ss]ie" => "#müssen_sie";
		"tstopt(0)[Ss]o sehr" => "#so_sehr";
		"tstopt(0)[Uu]mso mehr" => "#umso_mehr";
		"tstopt(0)[Aa]uf über" => "#auf_über";
		"tstopt(0)[Ss]age ich" => "#sage_ich";
		"tstopt(0)[Hh]at er" => "#hat_er";
		"tstopt(0)[Kk]önnen wir" => "#können_wir";
		"tstopt(0)[Ss]o viel" => "#so_viel";
		"tstopt(0)[Ww]erden muss" => "#werden_muss";
		"tstopt(0)[Ww]erden konnte" => "#werden_konnte";
		"tstopt(0)[Ww]erden will" => "#werden_will";
		"tstopt(0)[Ww]erden soll" => "#werden_soll";
		"tstopt(0)[Ss]ein wird" => "#sein_wird";
		"tstopt(0)[Ww]ir [Ss]ie" => "#wir_sie";
		"tstopt(0)[Nn]icht mehr" => "#nicht_mehr";
		"tstopt(0)[Hh]ätte ich" => "#hätte_ich";
		"tstopt(0)[Ss]ehr viel" => "#sehr_viel";
		"tstopt(0)[Zz]u viel" => "#zu_viel";
		"tstopt(0)[Jj]a noch" => "#ja_noch";
		"tstopt(0)[Gg]ehen [Ss]ie" => "#gehen_sie";
		"tstopt(0)[Ww]ir [Ii]hnen" => "#wir_ihnen";
		"tstopt(0)[Gg]enau so" => "#genau_so";
		"tstopt(0)[Hh]aben wir uns" => "#haben_wir_uns";
		"tstopt(0)[Ww]ir uns" => "#wir_uns";
		"tstopt(0)[Hh]aben wir" => "#haben_wir";
		"tstopt(0)[Hh]aben [Ss]ie" => "#haben_sie";
		"tstopt(0)[Vv]ersichern [Ii]hnen" => "#versichern_ihnen";
		"tstopt(0)[Dd]as heisst" => "#das_heisst";
		"tstopt(0)[Ss]ehr lang" => "#sehr_lang";
		"tstopt(0)[Ii]ch zieh" => "#ich_zieh";
		"tstopt(0)[Ii]ch zog" => "#ich_zog";
		"tstopt(0) [Dd]er Zeit" => "#der_zeit";
		"tstopt(0)[Ii]ch hoffe? nicht" => "#ich_hoff_nicht";
		"tstopt(0)[Ii]ch hoff" => "#ich_hoff";
		"tstopt(0)[Vv]or kurz" => "#vor_kurz";
		"tstopt(0)[Ee]rfuhr ich" => "#erfuhr_ich";
		"tstopt(0)[Ww]erden [Ss]ie" => "#werden_sie";
		"tstopt(0)[Mm]it dem" => "#mit_dem";
		"tstopt(0)[Hh]atten [Ss]ie" => "#hatten_sie";
		"tstopt(0)[Aa]n der" => "#an_der";
		"tstopt(0)[Nn]icht immer" => "#nicht_immer";
		"tstopt(0)[Aa]uf den" => "#auf_den";
		"tstopt(0)[Aa]uf uns" => "#auf_uns";
		"tstopt(0)[Mm]it [Ii]hnen" => "#mit_ihnen";
		"tstopt(0)[Nn]icht viel" => "#nicht_viel";
		"tstopt(0)[Vv]on einander" => "#von_einander";
		
		"tstopt(0)[Zz]um Beispiel" => "zb";
		"tstopt(0)[Ii]ch mag" => "#ich_mag";
		"tstopt(1)[Mm]it ihr" => "mit|ihr"; // only in HF1 - try to do it the cheap way ...
		"tstopt(1)[Ss]eid ihr" => "seid|ihr"; // only in HF1 - try to do it the cheap way ...
		"tstopt(01)[Aa]dressen" => "adren";
		"tstopt(01)[Aa]dresse" => "adr";
		"tstopt(01)[Aa]rtikel" => "artl";
		"tstopt(01)[Ee]ntsprechen?" => "ent+spr";
		
		// the question of "zu" ... 
		"tstopt(0)(?<!raten) [Zz]u (?!viel|gross|klein|bequem|klar|bunt|selten|oft|wenig|lang|kurz|spät|früh|Leb[#+|-]?zei-?t|Be[#+|-]?ginn|mir|dir|ihm|ihr|uns|euch|[Ii]hnen|deren|dessen|dem|der|hoch|tief|[Nn](?:a|ä)ch-?t|[Zz]ei-?t|glei-?ch)" => " "; // by default leave it out (but add all cases where it shouldn't be left out ...)
		
		// inner zu
		"tstopt(01)([Zz]u)zu" => "$1"; // zuzustimmen
		"tstopt(01)([Ee]in[#+-]?)zu[#+-]?(le-?g)" => "$1$2"; // einzulegen
		"tstopt(01)([Aa]uf[#+-]?)zu[#+-]?(sto-?c-?k)" => "$1$2"; // aufzustocken
		"tstopt(01)([Dd]urch[#+-]?)zu[#+-]?(se-?t-?zen)" => "$1$2"; // durchzusetzen
		"tstopt(01)([Aa]n[#+-]?)zu[#+-]?(zün-?den)" => "$1$2"; // anzuzünden
		"tstopt(01)([Aa]b[#+-]?)zu[#+-]?(le-?gen|{LEG}{EN})" => "$1$2"; 

		"A propos" => "a propos"; // transform A to a in order to avoid underscore for a (single character) 
		
	#EndSubSection(global,#>stage1)
	#BeginSubSection(dasher,#>stage2)

		"(?:°)" => "[DEGREE]"; // circle symbol for degree celsius

		//"([Rr]en-?dez)=[Vv]ous" => "$1=vus"; // "early-phonetizer because it's easier to do it here 

		
		// single letters with diacronics (upper case)
		// combined with x- (<=> x=) => replaced with more general rules (see next)
		//"^D=" => "[D@#_]="; // D-Zug
		//"^O=" => "[0N-][#0][&O@#_]="; // // O-Beine
		
		// standing alone or combined with x-
		"^([BCDFGKLMPQTVWXY])(=|$)" => "[$1@#_]$2"; 
		"^([NS])(=|$)" => "[$1=@#_]$2"; 
		"^(R)(=|$)" => "[AR@#_]$2"; 
		"^A(=|$)" => "[0N-][#4][A][&A@#_]$1"; 
		"^E(=|$)" => "[0N-][E][&E@#_]$1";
		"^I(=|$)" => "[0N-][#4][&I@#_]$1"; 
		"^O(=|$)" => "[0N-][#2][&O@#_]$1"; 
		"^U(=|$)" => "[0N-][#4][A][&U@#_]$1"; 
		"^Ä(=|$)" => "[0N-][Ä][&A@#_]$1"; 
		"^Ö(=|$)" => "[0N-][E][&O@#_]$1"; 
		"^Ü(=|$)" => "[0N-][Ä][&U@#_]$1"; 
		"^([HJZ])(=|$)" => "[$1@#_][#0]$2"; // add empty spacing => not considered as last character in chain (= fully written with underlength)

		// combined at the end of a word -x
		// standing alone or combined with x-
		"=([BCDFGKLMPQTVWXY])($)" => "\\=\\[$1@#_]$2"; 
		"=([NS])($)" => "\\=\\[$1=@#_]$2"; 
		"=(R)($)" => "\\=\\[AR@#_]$2"; 
		"=A($)" => "\\=\\[0N-][#4][A][&A@#_]$1"; 
		"=E($)" => "\\=\\[0N-][E][&E@#_]$1";
		"=I($)" => "\\=\\[0N-][#4][&I@#_]$1"; 
		"=O($)" => "\\=\\[0N-][#2][&O@#_]$1"; 
		"=U($)" => "\\=\\[0N-][#4][A][&U@#_]$1"; 
		"=Ä($)" => "\\=\\[0N-][Ä][&A@#_]$1"; 
		"=Ö($)" => "\\=\\[0N-][E][&O@#_]$1"; 
		"=Ü($)" => "\\=\\[0N-][Ä][&U@#_]$1"; 
		"=([HJZ])($)" => "\\=\\[$1@#_][#0]$2"; // add empty spacing => not considered as last character in chain (= fully written with underlength)

		"(?<!\[|\[N)=(?!@)" => "\\[=]\\";

		"^(A)$" => "[#_#]\[#5-][#5-][0N-]$1"; // "underscorer"
		"^(E)$" => "[#9][#_#]\[#9-][#5-][#5-][0N-]$1[&E]"; // "underscorer" => should be solved with diacritics ...
		//"^([A-Z])$" => "[#_#]\[#5-][#5-]$1"; // "underscorer" => should be solved with diacritics ...
		"(\[#_#\]\\\[#5-\]\[#5-\])[U]" => "$1[#U#]";
		"(?<!\|)'s" => "|'\[S]"; // apostrophizer: hat's 
		"(?<!\[)\/" => "[/]"; // mark / that where originally there (e.g. km/h)
		"[Cc]ou-?ver" => "ku-ver"; // Couvert

		"tstopt(01)'s$" => "s";
		"tstopt(01)\|s$" => "s";

		"^S$" => "[S=@#_]"; // S. Durchlaucht (Ettlinger)
	
	#EndSubSection(dasher)
	#BeginSubSection(splitter1)
		// check if word contains more then 1 upper case
		// mark it with #£# to have a branch condition
		"(?<!crnm#|\[)([A-Z]|Ä|Ö|Ü)([A-Z]|Ä|Ö|Ü)" => "#crnm#$1$2"; // avoid vowels in #acronym# (because otherwhise phpsyllable will add - ...
	#EndSubSection(splitter1,!>acronymator,=>packer)
	#BeginSubSection(acronymator)
		// filter marker #acronym# out again
		"#crnm#" => "";
		//"([A-Z]|Ä|Ö|Ü)" => "strtolower()";
		// only transform upper case of potential 2nd word (suppose acronym is 1st word ...)
		"(=(?:[A-Z]|Ä|Ö|Ü))" => "strtolower()";
		"(?<!\||\[)=" => "|=\\"; // mark word as 2 words
		"(?<!\[)=" => "[=]";	// necessary because of packer
		// now only transform upper case words (from acronym)
		"(?<!\[)([BCDFGHJKLMPQTVWXYZ])" => "[$1@#_][#6]"; // add diacritics _
		"^R" => "[AR@#_][#6]"; // add diacritics _
		"^N" => "[N=@#_][#6]"; // add diacritics _
		"^S" => "[S=@#_][#6]"; // add diacritics _
		"(?<!\[)N" => "[N@#_][#6]";
		"(?<!\[)S" => "[S@#_][#6]";
		"(?<!\[|A|V)R" => "[VR@#_][#6]";
		"(?<!\[|&)A" => "[A][&A@#_][#6]";
		"(?<!\[|&)E" => "[E][&E@#_][#6]";
		"(?<!\[|&)I" => "[&I@#_][#6]";
		"(?<!\[|&)O" => "[&O@#_][#6]";
		"(?<!\[|&)U" => "[A][&U@#_][#6]";
		"(?<!\[|&)Ä" => "[E][&A@#_][#6]";
		"(?<!\[|&)Ö" => "[E][&O@#_][#6]";
		"(?<!\[|&)Ü" => "[E][&U@#_][#6]";
		//"^\[E\]" => "[0N-][E]";  // not sure if that should be done here
		"^(\[[ns]\])" => "[0N-]$1"; // idem
		// correct distances for vowels
		"\[#6\]\[E\]" => "[E]";
		// tokens at beginning
		"^(\[A\]\[&A@#_\])" => "[0N-][#4]$1";
		"^(\[A\]\[&U@#_\])" => "[0N-][#4]$1";
		"^(\[&I@#_\])" => "[0N-][#3]$1";
		//"([a-z])" => "strtoupper()";  // leave other tokens as untreated (will be processed normally)
	#EndSubSection(acronymater)
	#BeginSubSection(packer)
		// filter out all markes from acronymator
		// some shorthand tokens use special chars (like -#+=/ etc.) in their definition
		// this can lead to confusions in the transcriptor: e.g. - might be the character - 
		// (which has to be drawn as such) or a part of a token definition (like [0N-]
		// in order to avoid that, "packer" bundles those characters adding brackets []
		// later the transcriptor converts them back into normal characters
		//"(?<!\[)=" => "[=]\";
		//"#ncrnm#" => ""; 
	#EndSubSection(packer)
	#BeginSubSection(decapitalizer)

		"(\')-([a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)" => "$1$2";
		"([a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)(\')([a-zA-Z]|ä|ö|ü|Ä|Ö|Ü)" => "$1|$2|$3"; // z'Morge, b'hüetis

		"sch(a|ä)ft(s|-?l?-?er\+?(?:in(?:-nen)?)?|-?chens?)?($|\|)" => { "{SCHAFT}$2$3", "[Gg]e(?:-|\+|#)?schäf-?t", "[Ss]tie-?fel[-+|]sch(?:a|ä)f-?t" }; // from r: must be done before decapitalizer
		"schaf-te" => "{SCHAFT}e"; // gewirtschaftet
		"{SCHAFT}e-?t" => "{SCHAFT}{ET}"; // bewirtschaftetest
		
		// must come before decapitalizer
		"tstopt(01)^Macht(\||$)" => "{MACHT}$1"; // well, another of these almost impossible cases ... Die Macht vs Macht das Fenster zu ... (written differently ...) 
		"tstopt(01)^Ohn[#+-]?ma-?cht$" => "Ohn{MACHT}";

		"([A-Z])" => "strtolower()";
		//"{schaft}" => "{SCHAFT}"; // restore upper case (.. yeah yeah ... start messing up ... :)
		// restore abbreviations in general
		"({.*?})" => "strtoupper()";

	#EndSubSection(decapitalizer)
	#BeginSubSection(phonetizer)
		
		"^([Aa]-?t-?t?a-?li)e" => "$1-e"; // Attalie
		"([Mm]u-?mi)(en)?$" => "$1-$2"; // Königsmumien
		"^([Hh]os-?ti)e" => "$1-e"; // Hostie
		"^([Ll]i)(e-?ge-?ard)" => "$1-$2"; // Liégeard (name)
		"^([Vv]ir-?gi-?ni)e" => "$1-e"; // Virginie (name)
		"^([Tt]el-?li)(ers?)\+?" => "$1-$2"; // Tellier (name)
		"^([Pp]i)(e-?tros?)$" => "$1-$2"; // Pietro 
		"^([Pp]i)(e-?r-?rots?)$" => "$1-$2"; // Pierrot
		"^([Rr]e-?fu-?gi)é" => "$1-e"; // Refugié
		"^([Ff]e-?li-?ci)(es?)$" => "$1-$2"; // Felicie
		"^([Pp]re-?mi)-?e(-?r)" => "$1-E$2"; // Premiere
		"([vV]il-?li)er" => "$1-Er"; // Andervillier
		"^([Vv]au-?bi)es" => "$1-E-s"; // Vaubiessard
		"([Gg]on-?do-?li)-?e-?re" => "$1-E-re"; // Gondoliere 
		"iè-re$" => "i-E-re"; // Ferronnière

		"^([Bb]o-?u-?gi)e$" => "$1-e"; // Bougie (name)

		"([Aa])ï" => "$1-i"; // Aïssi

		"^([Pp]i)(?:e|è)(-?ces?)$" => "$1-e$2"; // pièce de résistance
		"^([Cc]a-?ra-?bi-?ni)(e-?r)" => "$1-$2"; // carabinieri
		"^([Hh]ier?-?h)er" => "$1Er"; // hierher-
		"(\|[Hh])er" => "$1Er"; // hiehergewünscht

		"([Pp]ro)-?phe-?t" => "$1fEt"; // prophetische
 
		"([Ss])ehn\|s" => "$1en|s"; // Sehnsucht (easier to do that here)

		"[Pp]or.?te.?feu.?i.?l.?le" => "Porte|fö[^LL^]"; // Portefeuille
		"([Bb])ou.?i.?l.?l" => "$1u[#4][^LL^]"; // Bouillon, Bouillabaisse
		"([Ff])eu.?i.?l.?le.?ton" => "$1ö[^LL^][&T]on"; // Feuilleton
		"([Ff])eu.?i.?l.?le" => "$1ö[^LL^]"; // Feuille

		"([Bb]e\+?schw)e(-?r)" => "$1E$2"; // beschweren
		"([Ee]x-?tr)e(-?m)" => "$1E$2"; // extrem

		"([Kk]as-?s)ie(-?re-?r)" => "$1i$2"; // Kassierer/in vs Kassier
		"([Kk]on-?kur-?ri)-e(-?r)" => "$1$2"; // konkurrieren
		"([Tt]ra-?gö-?di)-?e" => "$1-e"; // Tragödie
		"([Aa]r-?ka-?di)e" => "$1-e"; // Arkadier
		"([Vv]i)er" => "$1r"; // vierruderige

		// distinguishes character groups that are written the same way but have different pronunciation
		"[Ss]y-?ri" => "sü-ri"; // syrisches, Syrien
		"([Ii]n)[-+]?ge-?ni-?eu-?r" => "in+sche-ni-ör"; Ingenieur
		"[Mm]on-?si-?eur" => "mös-si-ö"; // Monsieur
		"[Mm]on-teur" => "Mon-tör"; // Monteur 
		"[Dd]res-?seur" => "dres-sör"; // Dresseur
		"([Ff]ri-?s)eu" => "$1ö"; // Friseur
		
		// e.g. ie: nie, Knie vs Familie, Linie
		"([Rr]e)-?li-?quie" => "$1-li-qi-e";
		"([Tt])o(u-?r)" => "$1$2"; // Tour
		"([Ll]i-?)nie(?!r)" => "$1ni-e";
		"([Bb]an-?k)-?ier" => "$1-i-e";
		"([Ff]a-?mi-?)lie" => "$1li-e";
		"^([Pp]or-?t)ier" => { "$1i-er", "[Tt]rans\+?por-?tier", "^.+por-?tie-?r" };
		"([Kk]ar-?r)ie(re)" => "$1[&I]E$2";
		// phonetical treatment for y
		"([Ss])y(n-?th)e(-?ti-?sch)" => "$1ü$2E$3"; // E = stressed
		//"([Ss])y(s-?tem)" => "$1i$2";
		"([Rr])h?y(t-?)h?(-?mus)" => "$1ü$2$3";
		"([Pp]s)y(-?c-?h)" => "$1ü$2";
		"([Aa]-?na-?l)y(-?se$)" => "$1ü$2"; // but "analisieren" ... an please stopp telling me language is logical ... ! :):):)
		//"([Pp]h)y(-?s)" => "$1ü$2"; // Physik, physisch - bad results with " ...

		// y <=> i or ü => by default, transform all y to i (add rules for ü, if necessary)
		"^([LlRr]o-?)y(-?a-?l)" => "$1j$2"; // loyal, royal

		"(?<!\[)y" => { "i", "York", "Yvon-?ne", "Wey", "[Bb]oy", "Neu ?[Yy]ork", "Bel-?le-?lay", "[Yy]ou-?tu-?be", "Syd-?ney", "To-?ky-?o", "Whis-?ke?y", "^[Yy]", "[Ff]o-?y-?er", "[Bb]er[-+]?ke-?ley", "[Ll]y-on", "Lob-?by", "Hen-?ry", "[Ss]ay", "[Pp]a-?ra-?gu-?a-?y", "Schre-?y", "[Cc]i-?ty", "^[Dd]re.?y.?er\+?$", "[Bb]a-?by", "[Pp]lä-?do-?yer", "Bran-?dy", "[Tt]y-?r-?r-?he-?n", "[Uu]-?r-?u-?gu-?a-?y", "[Rr]a-?yon", "^[Ll]a-?dy", "^[Qq]u-?i-?c-?k-?l-?y", "[Gg]o-?u-?ra-?ya", "^(?:[Kk]a-?)?[Bb]o-?va-?ry", "[Cc]a-?ny", "^[Ff]ray-?s-?si-?nous", "^[Vv]i-?c-?hy$", "^[Ss]a-?vo-?y", "^[Bb]u-?c-?hy", "^[Dd]e-?ro-?ze-?r-?ays", "^[Gg]i-?v-?ry", "^[Ll]o-?y-?o-?la", "^Dü-?puy-?tren", "^[Ll]a-?f-?a-?y-?e-?t-?t-?e" };

		// eu = ö
		"([Aa]-?ma-?t)eu(-?r)" => "$1ö$2";
		"ieu$" => "iö";  // french: Milieu

		// ou = u
		"([Tt])ou(-?ris)" => "$1u$2"; 
		"([Rr])o(u-?t[ie])" => "$1$2";
		"ou-?i-?l-?l" => "u-ill"; // Patrouille 

		"([Dd]i)eu" => "$1ö";	// french word
		
		"[Pp]ie-?t-?er-?le" => "p[&I]et[VR@L]e";
		//"[Pp]ie(-?ter-?le)" => "p[&I]e$1";	// special word (do the whole stuff for simplicity ...)

		"([Aa]r-?s)en" => "$1En"; // avoid -en
		"([Pp]h|[Ff])(ä-?no-?m)e(-?n)" => "$1$2E$3";

		"[Ii]n(\+|-)ge-?nieu-?r" => "in-gen[&I][EU]r";
		"e-ta-ge-re" => "E-ta-gE-re";
		"pa-ke(-?t)" => "pa-kE$1";
		"([Jj])ou(r-?na-?l)" => "$1u$2";
		"[Bb]ou-?le-?vard" => "bulwar";
		"([Tt]r)ai-?(ni)" => "$1ä-$2"; // trainierte
		"([Bb]e\+qu)e(-?m)" => "$1E$2";

		"([Pp]o-?li-?)ce" => "$1se";
		"([Bb])(?:ü|u)(f-?f)et" => "$1ü$2e";
		"([Gg])o(?:u|û)t$" => { "$1u", "^[Rr]a-?gou-?t" }; // Goût, not: Ragout
		"([Gg])o(?:u|û)-?t" => { "$1ut", "^[Rr]a-?gou-?t" }; // goutieren
		"([Gg])ou-?ver" => "$1u-ver"; // Gouvernement
		"[Cc](on-?do-?r)" => "k$1"; // Kondor
		"([Ss])ou-?per\+?" => "$1u-pe"; // Souper
		"([Ss])ou(f-?f-?lie-?r)" => "$1u$2"; // Soufflierte
		"([Pp])ou(s-?sie-?r)" => "$1u$2"; // poussierten

		"^([Pp]or-?ti)-?er(s)?" => "$1-e$2"; // Portier

		"([Ss]u-?b-?al-?t)-?er(-?n)" => "$1[E][VR]$2"; // subaltern
		"[Pp]a-?s-?s-?e.?par-?tout(s)?" => "Pass-par-tu$1"; // Passepartout(s)
		//"[Pp]a-?s-?s-?e.?par-?touts" => "Pass-par-tus"; // Passepartout
		"[Ss]ous(-|=)?sol" => "[S=][#4][A][&U]\\[#6-][=]\\[S=]ol"; // Soussol
		"[Mm]atch" => "matsch";

		"([Pp]a-?ra)-?p-?lu-?ie" => "$1-plüi"; // Parapluie
		"^[Ll](?:e|é)-?g-?er\+?s?$" => "le[G^][#2][-E]";
		"^[Ll]e-?ge-?r" => "le[G^]er";
		"([Cc]ha-?rak)-?t-?e-?re" => "$1[&T&E][E][VR]e"; // Charakteren
		"([Mm]i-?li-?)eu(s)?" => "$1ö$2";
		"([Rr]e-?p-?)er.?(toi-?re)" => "$1Er-$2"; // Repertoire 
		"([Ss]chi-?zo-?phr)en" => "$1En"; // schizophren
		"([Ww])[-+]?er.?t" => "$1Ert";  // bedauernswerte, conflict: tätowiert

		"([Cc]h)er.?(che)" => "$1E[VR]-$2"; // cherchez
		"([Pp]sü.?cho.?g)en" => "$1En"; // psychogen
		"[Pp]or.?te.?mon.?n(a.?i.?e|ee?)" => "port|mon-ne"; // Portemonnaie, Portemonnee (Systemurkunde recommends: [Ä][A] (-ä) or [AI][&E][-E] (-aie, literally), but I don't agree ... :)
		//"[Pp]or.?te.?feu.?i.?l.?le" => "Port|feuj"; // Portefeuille
		
		"(^|\|)([Ll])o(.?)g(en?)" => "$1$2[#3][O][G^]$4"; // Loge
		"[Bb]eef-?steak" => "Bif-stek"; // Beefsteak
		"^([Nn]i)e(-?mer\+?)$" => "$1-e$2"; // niemer (schweizerdeutsch)
		"^([Uu]-?me)-?(wäg)$" => "$1|$2"; // umewäg (schweizerdeutsch)
		"([Kk]on-?duk-?t)eu" => "$1ö"; // Kondukteur
		"([Bb])ou(-?teil-?le)" => "$1u$2"; // Bouteille
		"([Ss]il-?)hou(-?et-?te)" => "$1u$2"; // Silhouette
		"[Ss]ans-?[Ss]ou-?ci" => "sans\suci"; // Sanssouci
		"[Aa].?c.?h.?e.?cho" => "ache\[WELCH][#4]o"; // achecho (swiss german)

		"([Pp]rä)-?mie" => "$1-mi-e"; // Prämie
		"([Pp]i)e-?des(-?t)" => "$1-e-des$2"; // Piedestal
		"^([Hh])er\+" => "$1Er+"; // hertragen
		"([Ss]al-?p)e(-?t-?e-?r)" => "$1E$2"; // Salpeter, salpeterig
		"([Hh]er.?m)e(-?ti)" => "$1E$2"; // hermetisch
		"([Kk]o-?m|[Rr]a-?k|[Pp]ro-?f|[Hh]i-?po-?th?|[Mm]a-?g-?n)e(-?t)" => "$1E$2"; // Kometen, Raketen, profetisch, hypothetisch
		"([Qq]u)er$" => "$1Er"; // verquer
		"([Gg]re-?na-?di)e(-?r)" => "$1-E$2"; // Grenadier
		"([Mm]ont-?pel-?li)er" => "$1-Er"; // Montpellier

		// rh-
		"(^|\|)([Rr])h([aeiou]|ä|ö|ü)" => { "$1$2$3", "[Rr]hein" }; // Rhizinus, Rhetorik etc.
		"([Rr]o?u-?ti-?ni)e(rs?)$" => "$1-E$2"; // Routiniers
		"([Gg]lo-?ri)e" => "$1-e"; // Glorie

		"([Zz]o)o($|\|)" => "$1$2"; // Zoo (vs zoologisch)
		"([Aa]-?te-?li)(ers)" => "$1-$2"; // Ateliers

		"([Aa]-?ka-?zi)e" => "$1-e"; // Akazie
		"([Bb]es-?ti)-?e" => "$1-e"; // Bestie
		"([Ll]ap-?pa-?li)e" => "$1-e"; // Lappalie

		"([Bb])u(-?r)e-?a-?u(s)?" => "$1ü$2o$3"; // Büro
		"nd#wen$" => "nd#wEn"; // irgendwen

		"^([Kk]ü-?ras-?si)(er)\+?" => "$1-$2"; // Kürassier

	#EndSubSection(phonetizer)
	#BeginSubSection(accentizer)
		"sis-?te(-?)m" => "sis-tE$1m";	// mark accentuated vowel with uppercase (so that they won't get transformed)
		"([Ss]ta-?k)e(-?te)" => "$1E$2"; // Staketenzaun (yes, that exists ... :)
		"([Pp]ro-?l)e(-?t)(?!a)" => "$1E$2";
		"pro-?ble(-?)m" => "pro-blE$1m";
		"(kon|dis)-?kre(-?)t" => "$1-krE$2t";
		"^([Ww])e([rmn])$" => "$1E$2";
		"^([Gg])e(n)$" => "$1E$2";		// distinguish Gen (noun) vs gen (preposition) ???
		"(\+?[Gg])e(r-?ne?)" => "$1E$2";
		"([Kk]on-?z)e(r-?t)" => "$1E$2"; 
		"([Ll]a-?t-?)e(r-?n)" => "$1E$2";
		"([Pp]o)-?(li)-?(phem|fem)" => "$1-$2-fEM"; // Polyphem
		"([Ii]n\+t)e(r-?n)" => "$1E$2"; // intern
		"([Hh]o-?m)-?e(-?r)\+?" => "$1E$2"; 
		"^([Ee]u-?g)e(ns?)$" => "$1E$2"; // Eugen
		"^([Hh]o-?mo-?g)e(-?n)" => "$1E$2"; // homogen

	#EndSubSection(accentizer)
	#BeginSubSection(preshortener)
		// "early shortener"
		// i.e. shortener that applies to composed words

		"#[Ff]ort" => "[F][O]RT"; // Fort National (avoid shortening)

		
		"^[Dd]as\+h$" => "{DH}";
		"([Tt]eil\|)ha-?ber" => "$1{HAB}{ER}"; // can't be done in stage 3

		// not sure if this works correctly ... there might be other implications if stage3 doesn't follow
		// stage2 ... leave it for the moment ...
		
		"tstopt(01)[Ww]eit(?:[#+-]|\|)?aus" => "{WEITAUS}";
		"tstopt(01)#ha[#+-]?ben_wir_uns" => "{HAB}{WIR}{UNS}";
		"tstopt(01)#ha[#+-]?ben_wir" => "{HAB}{WIR}";
		"tstopt(01)#ge[#+-]?nau_so" => "{GENAU}{SO}";
		"tstopt(01)[Gg]e[#+-]?nau-?" => "{GENAU}";
		"tstopt(01)[Bb]es-?ten[+#|-]?falls" => "{BESTENFALLS}";
		"tstopt(01)[Ss]chlimms[+#-]?ten[+#|-]?falls" => "{SCHLIMMSTENFALLS}";
		"tstopt(01)[Ee][+#-]?b[+#-]?en[+#|-]?falls" => "{EBENFALLS}";
		"tstopt(01)[Gg]leich[+#|-]?falls" => "{GLEICHFALLS}";
		"tstopt(01)[Aa]l-?len[+#|-]?falls" => "{ALLENFALLS}";
		"tstopt(01)[Aa]n-?der\+?n[+#|-]?falls" => "{ANDERNFALLS}";
		"tstopt(01)[Gg]e[+#-]?ge-?be-?nen[+#|-]?falls" => "{GEGEBENENFALLS}";
		"tstopt(01)[Rr]ein\|fall" => "{REINFALL}";
		"tstopt(01)[Ee]in(?:\+|\|)?fal-?l" => "{EINFALL}";
		"tstopt(01)[Ee]in(?:\+|\|)?fac-?h" => "{EINFACH}";
		"tstopt(01)[Ii]ns\|?be\+?son-?d-?er\+?e" => "{INSBESONDERE}";
		"tstopt(01)([Aa]uf[#+-]?)merk[#+-]?sam([#+-]?kei-?t)" => "$1$2"; // rather radical this HR ... :)
		"tstopt(01)([Aa]uf[#+-]?)merk([#+-]?sa-?m)" => "$1$2"; // rather radical this HR ... :)
		 
		// Fugen-s
		"tstopt(01)(ung)s(\|)" => "$1$2"; // Führungskraft
		"tstopt(3)(en|g)s(\|)" => "$1$2"; // Lebenszeit, Beitragspflicht
		
		"tstopt(01)^[Hh]in-?ter[#+|]" => "{INTER}"; // extension of "inter-"
		"tstopt(01)(?:Ü|ü)[#+-]?b[#+-]?er[#+-]?\|?haupt" => "{ÜBERHAUPT}";  		
		
	#EndSubSection(preshortener)
	#BeginSubSection(shortener,#>stage3)

		"^so-?dann$" => "{SO}dann"; // sodann
		"^zu\+al-?ler\+" => "{ZU}+{ALL}{ER}+"; // zuallerletzt

		"^sichs$" => "{SICH}s"; // sichs

		"^drin$" => "dr{IN}"; // mittendrin

		"^[Vv][Cc]hr$" => "{VOR}chr"; // v.Chr.

		//"^[Ss]og$" => "{SO}g"; // abbreviation sog. => can't be done because of verb sog (past tense)

		"^[Ee]vtl$" => "ev"; // evtl. (abbreviation)
		"^[Gg]ebr$" => "gbr"; // Gebr. (abbreviation)

		"^[Kk]o(-?rek-?t)" => "{CON}$1"; // Korektor 
		"(^|\|)(Ä|ä)us-?se-?r" => "$1$2us-ser+";  // äusserst

		"^([Uu]n)-auf\+" => "$1+auf+"; // unaufhörlichen

		"^([Rr])aus$" => "$1{AUS}";

		"([Ss]a-?n)i-?tä-?t" => "$1{HEIT}"; // Sanitäter

		"([Aa][bn])\+zu#" => "$1+{ZU}#"; // abzuwarten

		"#[Ww]a-?r" => "{#WAR}"; // noun Waren (no shortening!) 
		"[Ee]r.?{#WAR}" => "{ER}{#WAR}"; // Erwartung

		"[Gg]e({#WAR})" => "{GE}$1"; // also gewartet
		"[Dd]rauf" => "dr{AUF}";
		"viel-?leicht" => "{VILLEICHT}";
		"zu(\+|-|\||#)sam-?men" => "{ZUSAMMEN}"; 
		"[Ww]as\+" => "{WAS}"; // waserlei
		"[Mm]it[-+]?nich-?ten" => "{MIT}\\{NICHT2}{EN}"; // mitnichten
		"[Vv]er[-+]?nich-?t(en-?d)" => "{VER}\\{NICHT2}$1"; // vernichtende (tolerance: could be written normally, but I prefer using the abbreviation)
		"[Zz]u[-+]?nich-?t" => "{ZU}\\{NICHT}"; // zunichte machen
		"[Vv]er[-+]?nich-?t" => "{VER}\\{NICHT2}"; // vernichten (tolerance: could be written normally, but I prefer using the abbreviation)
		"{NICHT2}e-?t" => "{NICHT2}{ET}"; // vernichtet
		"[Ii]n[-+]so[-+]fern" => "{IN}{SO}fern"; // insofern
		
		"([Ww][Ee]r-?t)e-?t" => "$1{ET}"; // wertete

		// cut out vowels
		"tstopt(01)er\+li-?ch" => "er{LICH}";
		"tstopt(01)((?:[ae]|ä)[ui])-?e(-?r)\+?" => "$1$2";
		"tstopt(01)((?:[ae]|ä)[ui])(?:-|\+)?e([sn])" => { "$1$2", "ei-?en$" }; // not: Ländereien
		
		// longer words at beginning of shortener
		"tstopt(01)[Ee]rs-?t" => "{ERST}";  		
		"tstopt(01)[Ss]tär-?k" => "{STÄRK}";  		
		"tstopt(01)(?<![Kk])[Nn]o-?t" => "{NOT}";  		
		"tstopt(01)[Nn]ö-?t" => "{NÖT}";  		
		"tstopt(01)[Bb]o-?t" => "{BOT}";  		
		"tstopt(01)[Bb]it-?t" => "{BITT}";  		
		"tstopt(01)[Bb]ie-?t" => "{BIET}";  		
		"tstopt(01)[Bb]a-?t" => "{BAT}";  		
		"tstopt(01)[Bb]ro-?t" => "{BROT}";  		
		"tstopt(01)(?<![PpTtDd])[Rr]o-?t" => "{ROT}";  		
		"tstopt(01)[Rr]ö-?t" => "{RÖT}";  		
		"tstopt(01)[Bb]ru-?t" => "{BRUT}";  		
		"tstopt(01)[Bb]rü-?t" => "{BRÜT}";  		
		"tstopt(01){BR(U|Ü)T}e-?t" => "{BR$1T}{ET}";  		
		"tstopt(01)[Tt]u-?t" => "{TUT}";  		
		"tstopt(01)[Tt]o-?t" => "{TOT}";  		
		"tstopt(01)[Gg]u-?t" => "{GUT}";  		
		"tstopt(01)[Gg]ot-?t" => "{GOTT}";  		
		"tstopt(01)[Gg]ü-?t" => "{GÜT}";  		
		"tstopt(01)(?<![Tt])[Rr]a-?t" => "{RAT}";  		
		"tstopt(01)(?<![Tt])[Rr]ä-?t" => "{RÄT}";  		
		"tstopt(01)(?<![Tt])[Rr]ie-?t" => "{RIET}";  		
		"tstopt(01)[Ss]chaf-?f" => "{SCHAFF}";  		
		"tstopt(01)[Ss]chi-?c-?k" => "{SCHICK}";  		
		"tstopt(01)[Ss]cha-?t-?z" => "{SCHATZ}";  		
		"tstopt(01)[Ss]chä-?t-?z" => "{SCHÄTZ}";  		
		"tstopt(01)[Ss]cha-?d" => "{SCHAD}";  		
		"tstopt(01)[Ss]chä-?d-?l" => "{SCHÄDL}"; // Schädling  		
		"tstopt(01)[Ss]chä-?d" => "{SCHÄD}";  		
		"tstopt(01){SCH(A|Ä)D}e-?t" => "{SCH$1D}{ET}";  		
		"tstopt(01)[Ll]as-?t" => "{LAST}";  		
		"tstopt(01)[Ll]äs-?t" => "{LÄST}";  		
		"tstopt(01){L(A|Ä)ST}e-?t" => "{L$1ST}{ET}";  		
		"tstopt(01)[Pp]la-?t-?z" => "{PLATZ}";  		
		"tstopt(01)[Pp]lä-?t-?z" => "{PLÄTZ}";  		
		"tstopt(01)[Kk]ur-?s" => "{KURS}";  		
		"tstopt(01)[Kk]ur-?z" => "{KURZ}";
		"tstopt(01)[Kk]u-?r" => "{KUR}";  // Kur, also: kurios
		"tstopt(01)[Hh]al-?b" => "{HALB}";  		
		"tstopt(01)[Hh]an-?d" => "{HAND}";  		
		"tstopt(01)[Hh]än-?d" => "{HÄND}";  		
		"tstopt(01)[Hh]au-?s" => "{HAUS}";  		
		"tstopt(01)[Hh]äu-?s" => "{HÄUS}";  		
		"tstopt(01)[Hh]oh?-?l" => "{HOL}";  		
		"tstopt(01)[Hh]ö[lh]?-?l" => "{HÖL}";  		
		"tstopt(01)[Kk]ehr" => "{KEHR}";  		
		"tstopt(01)[Ll]a-?d" => { "{LAD}", "[Ll]a-?du-?ne-?r" };  		
		"tstopt(01)[Ll]u-?d" => "{LUD}";  		
		"tstopt(01)[Ll]ä-?d" => "{LÄD}";  		
		"tstopt(01)[Vv]er[#+-]?tre-?t-?er[#+-]?" => "{VERTRETER}";  		
		"tstopt(01)[Tt]ei[#+-]?l" => "{TEIL}";   		
		"tstopt(01)[Tt]rof[#+-]?f" => "{TROFF}";   		
		"tstopt(01)[Ww]ich-?ti-?g(e[ersnm]?)?" => "{WICHTIG}"; 
		"tstopt(01)[Jj]e-?d" => "{JED}"; 
		"tstopt(01)[Kk]la-?r" => "{KLAR}"; 
		"tstopt(01)[Kk]lä-?r" => "{KLÄR}"; 
		"tstopt(01)[Mm]an-?nig" => "{MANNIG}"; 
		"tstopt(01)[Ff]al-?t" => "{FALT}"; 		
		"tstopt(01)[Mm]an-?cher\+l" => "{MANCHERL}";  		
		"tstopt(01)[Ff]in-?d" => "{FIND}";  		
		"tstopt(01)[Ff]an-?d" => "{FAND}";  		
		"tstopt(01)[Ff]un-?d" => "{FUND}";  		
		"tstopt(01){F([IAU])ND}e-?t" => "{F$1ND}{ET}";  		
		"tstopt(01)[Ll]eis-?t" => "{LEIST}";  		
		"tstopt(01)[Ff]ol-?g" => "{FOLG}";  		
		"tstopt(01)[Vv]olk" => "{VOLK}";  		
		"tstopt(01)[Vv]öl-?k" => "{VÖLK}";  		
		"tstopt(01)[Ss]chie-?d" => "{SCHIED}";  		
		"tstopt(01)[Ss]chei-?d" => "{SCHEID}";  		
		"tstopt(01){SCH(IE|EI)D}e-?t" => "{SCH$1D}{ET}";  		
		"tstopt(01)[Aa]us-?ser" => "{AUSSER}";  		
		"tstopt(01)[Ff]i-?nan-?z" => "\\{FINANZ}";  		
		"tstopt(01)[Gg]ren-?z" => "{GRENZ}";  		
		"tstopt(01)[Kk]on[#+-]?kur-?ren-?z" => "{KONKURRENZ}";  		
		"tstopt(01)[Mm]an-?ch" => "{MANCH}";  		
		"tstopt(01)[Gg]e[#+-]?schich-?t" => "{GESCHICHT}";  		
		"tstopt(01)[Ss]ta[dt]-?t" => "{STATT}";  		
		"tstopt(01)[Ss]tä[dt]-?t" => "{STÄTT}";  		
		"tstopt(01)[Ss]taa-?t" => "{STAAT}";  		
		"tstopt(01)[Dd]ach" => "{DACH}";  		
		"tstopt(01)[Tt]rach-?t" => "{TRACHT}";  		
		"tstopt(01)[Tt]räch-?t" => "{TRÄCHT}";  		
		"tstopt(01)[Tt]re-?t" => "{TRET}";  		
		"tstopt(01)[Tt]ritt$" => "{TRITT}"; // ?  		
		"tstopt(01)[Bb]rau-?c-?h" => "{BRAUCH}";  		
		"tstopt(01)^[Ii]h[#+-]?re-?r" => "{IHRER}";  		
		"tstopt(01)^[Ee]u[#+-]?re-?r" => "{EURER}";  		
		"tstopt(01)[Gg]e[#+-]?ne-?r\+?a[#+-]?l" => "{GENERAL}";  		
		"tstopt(01)[Vv]er[#+-]?tre-?t" => "{VERTRET}";  		
		"tstopt(01)[Vv]er[#+-]?trit-?t" => "{VERTRITT}";  		
		"tstopt(01)[Vv]er[#+-]?tra-?t" => "{VERTRAT}";  		
		"tstopt(01)[Ll]ie-?f-?e-?r\+?" => "{LIEFER}";  		
		"tstopt(01)[Vv]er[#+-]?hält[#+-]?nis-?s?" => "{VERHÄLTNIS}";  		
		"tstopt(01)([Ii]n|{IN})[#+-]?dus[#+-]?tri-?(a-?l)" => "{INDUSTRIE}$2";
		"tstopt(01)([Ii]n|{IN})[#+-]?dus[#+-]?tri-?el-?l" => "{INDUSTRIE}{IELL}";  		
		"tstopt(01)([Ii]n|{IN})[#+-]?dus[#+-]?trie" => "{INDUSTRIE}";  		
		"tstopt(01)[Kk]om-?mis-?si-?o-?n" => "{KOMMISSION}";  		
		"tstopt(01)[Pp]er[#+-]?s(o|ö)-?n(?:en)?" => "{PERSON}";  		
		"tstopt(01)[Kk]re-?di-?t" => "{KREDIT}";  		
		"tstopt(01)[Bb]il-?d" => "{BILD}";  		
		"tstopt(01)[Bb]in-?d" => "{BIND}";  		
		"tstopt(01)[Bb]un-?d" => "{BUND}";  		
		"tstopt(01)[Ff]es-?t" => "{FEST}";  		
		"tstopt(01)[Ff]reun-?d" => "{FREUND}";  		
		"tstopt(01)[Ff]reu-?" => "{FREU}";  		
		"tstopt(01){FREU}li_?c-?h" => "{FREU}{LICH}";  		
		"tstopt(01)[Ff]rie-?d" => "{FRIED}";  		
		"tstopt(01)[Bb]rin[#+-]?g" => "{BRING}";  		
		"tstopt(01)[Ss]chlu[#+-]?g" => "{SCHLUG}";  		
		"tstopt(01)[Ss]chla[#+-]?g" => "{SCHLAG}";  		
		"tstopt(01)[Ss]chlü[#+-]?g" => "{SCHLÜG}";  		
		"tstopt(01)[Ss]chlä[#+-]?g" => "{SCHLÄG}";  		
		"tstopt(01)[Mm]o-?na[#+-]?t" => "{MONAT}";  		
		"tstopt(01)[Mm]er[#+-]?k" => "{MERK}";  		
		"tstopt(01)[Mm]ar[#+-]?kt$" => "{MARKT}";  		
		"tstopt(01)[Mm]ar[#+-]?kt?" => "{MARK}";  		
		"tstopt(01)[Mm]är[#+-]?k-?t" => "{MÄRKT}";  		
		"tstopt(01)[Ww]er[#+-]?k" => "{WERK}";  		
		"tstopt(01)[Ss]am[#+-]?me?-?l" => "{SAMMEL}";  		
		"tstopt(01)[Mm]an[#+-]?ge?-?l" => "{MANGEL}";  		
		"tstopt(01)[Mm]än[#+-]?ge?-?l" => "{MÄNGEL}";  		
		"tstopt(01)[Bb]rach[#+-]?" => "{BRACH}";  		
		"tstopt(01)[Ll]an[#+-]?d" => "{LAND}";  		
		"tstopt(01){LAND}e-?t" => "{LAND}{ET}";  		
		"tstopt(01)[Ll]än[#+-]?d" => "{LÄND}";  		
		"tstopt(01)[Dd]ie[#+-]?n" => "{DIEN}";  		
		"tstopt(01)[Dd]eu[#+-]?t" => "{DEUT}";  		
		"tstopt(01)[Hh](?:e|ä)u[#+-]?t" => "{HEUT}";  		
		"tstopt(01)[Hh]au[#+-]?t" => "{HAUT}";  		
		"tstopt(01)[Nn]a-?ti-?o-?n" => "{NATION}";  		
		"tstopt(01)[Dd]eut-?sch" => "{DEUTSCH}";  		
		"tstopt(01)[Ss]chwei-?z" => "{SCHWEIZ}";  		
		"tstopt(01)(?<![Pp])[Hh](a|ä)l-?t" => "{HALT}";  		
		"tstopt(01)[Ww]al-?t" => "{WALT}";  		
		"tstopt(01){WALT}e-?t" => "{WALT}{ET}";  		
		"tstopt(01)[Ww]ah-?l" => "{WAHL}";  		
		"tstopt(01)[Ww]äh-?l" => "{WÄHL}";  		
		"tstopt(01){WÄHL}e-?r\+?" => "{WÄHL}{ER}";  		
		"tstopt(01)[Ww]ar-?t" => "{WART}";  		
		"tstopt(01)[Ww]äh?r-?t" => "{WÄRT}";  		
		"tstopt(01){WART}e-?t" => "{WART}{ET}";  		
		"tstopt(01){HALT}e-?t" => "{HALT}{ET}";  		
		"tstopt(01)in\+?{HALT}" => "{IN}{HALT}";  		
		"tstopt(01)[Gg]run-?d" => "{GRUND}";  		
		"tstopt(01)[Gg]rün-?d" => "{GRÜND}";  		
		"tstopt(01)[Qq]uan-?t" => "{QUANT}";  		
		"tstopt(01)[Pp]unk-?t" => "{PUNKT}";  		
		"tstopt(01)[Pp]ünk-?t" => "{PÜNKT}";  		
		"tstopt(01)[Pp]os-?t" => "{POST}";  		
		"tstopt(01)[Pp]ös-?t-?l" => "{PÖSTL}";  		
		"tstopt(01)[Zz]wi-?schen" => "{ZWISCHEN}";  		
		"tstopt(01)[Zz]we-?ck" => "{ZWECK}";  		
		"tstopt(01)[Rr]e-?ge?-?l" => "{REGEL}";  		
		"tstopt(01)[Ww]e-?ch-?se?-?l" => "{WECHSEL}";  		
		"tstopt(01)[Ww]el-l" => "{WELL}";  		
		"tstopt(01)[Ee]in[#+-]?zel-?n?" => "{EINZEL}";  		
		"tstopt(01)[Mm]it-?te?-?l" => "{MITTL}";  		
		"tstopt(01){MITTL}e-r" => "{MITTL}{ER}"; // should be done better by analizer ... 		
		"tstopt(01)[Zz]wei-?fe?-?l" => "{ZWEIFEL}";  		
		"tstopt(01)[Ww]is-?sen#?({SCHAFT}|schaft)" => "{WISSENSCHAFT}";  		
		"tstopt(01)[Ww]irt[#+-]?({SCHAFT}|schaf-?t)" => "{WIRTSCHAFT}";  		
		"tstopt(01){WIRTSCHAFT}e-?t" => "{WIRTSCHAFT}{ET}";  		
		"tstopt(01)[Gg]e[#+-]?nos-?sen#?({SCHAFT}|schaft)" => "{GENOSSENSCHAFT}";  		
		"tstopt(01)[Ee]nt[#+-]?wick-?lun-?g" => "{ENTWICKLUNG}";  		
		"tstopt(01)[Ee]nt[#+-]?wi-?c-?kel" => "{ENTWICKEL}";  		
		"tstopt(01){WEITAUS}" => "[0N-][&EITAUS]";  		
		"tstopt(01)[Zz]ei-?g" => "{ZEIG}";
		"tstopt(01)[Ss]tei-?g" => "{STEIG}";
		"tstopt(01)[Ss]tie-?g" => "{STIEG}";
		"tstopt(01)[Gg]rös-?s-?e-?r\+?" => "{GRÖSSER}";
		"tstopt(01)#ver\+?si-?c-?her\+?n_ih-?nen" => "{VERSICHERNIHNEN}";
		"tstopt(01)[Gg]e\++sell#{SCHAFT}" => "{GESELLSCHAFT}";
		"tstopt(01)(?<![Ss]p)[Rr]ich-?t" => "{RICHT}";
		"tstopt(01){RICHT}e-?t" => "{RICHT}{ET}";
		"tstopt(01)[Rr]ech-?t[#+|-]?zei-?ti-?g" => "{RECHTZEITIG}";
		"tstopt(01)[Nn]ie-?d-?e?-?r" => "n{IEDER}";
		"tstopt(01)(?<![BbDdTt])[Rr]ech-?t" => "{RECHT}";
		"tstopt(01)(?<![BbDdTt])[Rr]e-?ch" => "{RECH}"; // rechnen, Rechenschaft
		"tstopt(01)[Ll]etz-?t" => "{LETZT}";
		"tstopt(01)[Bb]es-?ten" => "{BESTEN}";
		"tstopt(01)[Ss]pre-?ch" => "{SPRECH}";
		"tstopt(01)[Ss]pri-?ch" => "{SPRICH}";
		"tstopt(01)[Ss]pra-?ch" => "{SPRACH}";
		"tstopt(01)[Ss]pru-?ch" => "{SPRUCH}";
		"tstopt(01)[Ss]prü-?ch" => "{SPRÜCH}";
		"tstopt(01)[Ss]pro-?ch" => "{SPROCH}";
		"tstopt(01)[Mm]äch-?t" => "{MÄCHT}";
		"tstopt(01)[Ss]chrum-?p-?f" => "{SCHRUMPF}";
		"tstopt(01)#von_ei-?n[#+-]?an[#+-]?der" => "{VON}{EINANDER}";
		"tstopt(01)ein[#+-]?an-?der" => "{EINANDER}";
		"tstopt(01)#so_ge[-\+]?nann-?t" => "{SO}g";
		"tstopt(01)[Dd]i-?ver[-+]?s" => "div";
		"tstopt(01)[Dd]en-?noch" => "{DENN}{NOCH}";
		"tstopt(01)i-?g-?kei-?t(en)?" => "{IGKEIT}$1";
		"tstopt(01)sich-?ti-?ger" => "s{ICHT}{IGER}";
		"tstopt(01)sich-?ti-?gu-?n-?g" => "s{ICHT}{IGUNG}";
		"tstopt(01)ich-?tu-?n-?g" => "{ICHTUNG}";
		"tstopt(01)ich-?ti-?g" => "{ICHTIG}";
		"tstopt(01)([Aa]n\+?)ge\+?le-?gen([#-]?hei-?t)" => "$1$2";
		"tstopt(01)([Gg])e\+?le-?gen([#-]?hei-?t)" => "$1$2";
		"tstopt(01)([Gg])e\+?le-?gen(t[#+-]?lic-?h)" => "$1$2";
		"tstopt(01)[Gg]leich\+?zei-?ti-?g" => "{GLEICHZEITIG}";
		"tstopt(01)([Bb])e\+?sch(äf-?t)" => "$1$2";
		"tstopt(01)[Gg]e\+?sch(äf-?t)" => "$1"; // ch66
		"tstopt(01)[Mm]a-?na-?g" => "{MANAG}";
		"tstopt(01)[Tt]r((?:a|ä|ü)-?g)" => "$1";
		"tstopt(01)[Ff]ra-?g" => "{FRAG}"; // Hm ... frägt, frug, früge ... ;)
		"tstopt(01)[Tt]rei-?b" => "{TREIB}";
		"tstopt(01)[Tt]rie-?b" => "{TRIEB}";
		
		"[Ss]ei-?n" => "{SEIN}";
		"{SEIN}er" => "{SEIN}{ER}";
		"{SEIN}et" => "{SEIN}{ET}"; // seinetwegen

		// abbreviations MA1/MA2
		// articles
		// MAC
		"tstopt(01)[Ee]i-?ns-?te([rsnm])?$" => "{EINST}e$1"; // this is standard HF12
		"tstopt(3)^[Ee]i-?n(e[rsnm]?)?$" => "{EIN}"; // again: why lose time with an undefined article?!
		// HF
		"tstopt(01)ein#({SCHAFT})" => "{EIN}$1";
		"tstopt(01)^[Ee]in(?![+-]?ge|s|-?er)" => { "{EIN}", "[Ee]in[#+-]?fü-?g" };
		"tstopt(01)^[Ee]i-?ne$" => "{EINE}";
		"tstopt(01)[Ee]i-?nen$" => "{EINEN}";
		"tstopt(01)[Ee]i-?nem$" => "{EINEM}";
		"tstopt(01)[Ee]i-?nes$" => "{EINES}";
		"tstopt(01)[Ee]i-?n-?e-?r" => "{EINER}";
		// ending
		"tstopt(01)(?<![Ss]|[sS]ch)ein$" => "{EIN1}";

		// participe
		"tstopt(01)[Gg]e\+([mldpf]ach-?t)" => "$1";
		"tstopt(01)[Gg]e\+(nom-?m)" => "$1";
		"tstopt(01)[Gg]e[+-]?(ta-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fun-?d)" => "$1"; 
		"tstopt(1)fun-?de-?n(e[rmns]?)" => "fun-d$1"; 
		"tstopt(01)[Gg]e[+-]?(bo-?r)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(se-?h)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(kom-?m)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(kauf-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(las-?s)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?g(es-?s)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?g(e-?b)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(le-?g)" => "$1"; 
		"tstopt(01)er[+-]?g(es-?s)" => "er+$1"; // vergessen
		"tstopt(01)[Gg]e[+-]?(wuss)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(muss)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fass)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(gan-?g)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(füll-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lau-?f)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(hör-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(üb-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(ei-?nig-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(trock-?ne-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stie-?g)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(trof-?fe-?n|{TROFF})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stell-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(bau-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(ant-?wor-?te-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(sag-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(dr(?:ü|u)ck-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(schrie-?be-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wei-?te-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(gol-?te-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(son[#+-]?d[#+-]?er[#+-]?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stan-?de-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(kleb-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(knüpf-?t)" => "$1"; 
		"tstopt(01)([Ee]i)n[#+-]?ge[+-]?(heims-?t)" => "$1$2"; 
		"tstopt(01)([Ee]in[#+-]?)?ge[+-]?f(ühr-?t)" => "$1$2"; 
		"tstopt(01)([Aa]b[#+-]?)ge[+-]?(wetz-?t)" => "$1$2"; 
		"tstopt(01)([Aa]uf[#+-]?)ge[+-]?(türm-?t)" => "$1$2"; 
		"tstopt(01)([Aa]uf[#+-]?)ge[+-]?(schla-?ge-?n)" => "$1$2"; 
		"tstopt(01)[Gg]e[+-]?(le-?se-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wun-?der[#+-]?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(at-?me[#+-]?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(tra-?ge-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(brauch-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stri-?c-?he-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(schlos-?se-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(frag-?t|{FRAG}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(flick-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fal-?te-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wid-?me-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(reim-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lehr-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(dich-?te-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wor-?fe-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?({SPROCH})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?((?:zeig-?|{ZEIG})t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(zo-?g)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(zeich-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?({SCHRUMPF}-?t|schrumpf-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(hal-?te-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wie-?se-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(bo-?te-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(la-?de-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(kürz-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(heis-?se-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(ru-?f|{RUF})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(trie-?be-?n|{TRIEB})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wech-?sel-?t|{WECHSEL})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fres-?se-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fer-?tig-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lie-?fer-?t|{LIEFER})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(merk?t|{MERK}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(füg-?t|{FÜG}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(sam-?mel-?t|{SAMMEL}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wähl-?t|{WÄHL}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(re-?gel-?t|{REGEL}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(grenz-?t|{GRENZ}t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lern-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(rüs-?te-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fun-?de-?n|{FUND}e-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stor-?be-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(reg-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(fah-?re-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(sto-?c-?he-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(blie-?be-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(leb-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(klär-?t|{KLÄR}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lan-?de-?t|{LAND}{ET})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(hol-?t|{HOL}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(höhl-?t|{HÖL}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(kehr-?t|{KEHR}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(lad-?e-?n|{LAD}-?e-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(dach-?t|{DACH}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(schi-?c-?k-?t|{SCHICK}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(schie-?de-?n|{SCHIED}-?e-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(stie-?ge-?n|{STIEG}-?e-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(brü-?te-?t|{BRÜT}{ET})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(mein-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(weck-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(teil-?t|{TEIL}-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(bro-?c-?he-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(deck-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(schnit-?te-?n)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(rech-?ne-?t|{RECH}-?ne-?t)" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(neh-?m|{NEHM})" => "$1"; 
		"tstopt(01)[Gg]e[+-]?(wohn-?t)" => "$1"; 
		
		// not a participe but same principle
		"tstopt(01)[Gg]e(?:\+|-|#)?(schäf-?t)" => "$1"; 
		
		"tstopt(01)^[Ee]in\+g" => { "eig", "^[Ee]in\+ge\+?[sw]" }; // eingehen, not: eingesetzt
		"tstopt(01)^[Ee]in\+ge\+(ständ)" => "ei{GE}$1"; // Eingeständnis
		"tstopt(01)^([Ee]in|{EIN})-m" => "eim"; // einmalig
		"tstopt(01)^([Ee]in|{EIN})[-+]?tr" => "{EITR}"; // ein(ge)trocknet, einprägen
		"tstopt(01)^([Ee]in|{EIN})[-+]?pr" => "{EIPR}"; // ein(ge)trocknet, einprägen
		"tstopt(01)([Ee]in|{EIN})[-+]?(st)" => { "ei$2", "stim-?m" }; // ein(ge)stiegen, not: einstimmig
		"tstopt(01)^([Ee]in|{EIN})\+?([rf])" => { "ei+$2", "[Ee]in[#+-]?fü-?g" }; // Einreise, not: einfügen
		
		// must come before {IG}
		"tstopt(01)[Kk]un-?f-?t" => "{KUNFT}";
		"tstopt(01)[Kk]ün-?f-?t" => "{KÜNFT}";
		
		// MAC (opt 3)
		// so here's my personal point of view: EVERYTHING ressembling a verb (and even other words:) will be abbreviated ... !
		// the reason for that: (1) much shorter, (2) if you have to think each time if the base form has ge- or not you use a tremendous amount of time ... 
		"tstopt(3)[Gg]e[+-]?n(eh-?m)" => "$1"; 
		"tstopt(3)[Gg]e[+-]?(woh-?n)" => "$1"; 
		"tstopt(3)[Gg]e[+-]?(ra-?t)" => "$1"; 
		"tstopt(3)[Gg]e[+-]?(fal-?l)" => "$1"; 
		
		"tstopt(01)[Ss]o[#+-]?for-?t" => "{SOFORT}";
		
		// this is a good example of how abbreviations can be more or less extreme
		// option MA1 is used for less extreme abbreviation: trendige => trend{IG}e
		// option MA2 is used for extreme abbreviation (including ending): trendige => trend{IG}
		// option MA2 must be checked first (if rule is not applied => MA1 will be applied)
		"tstopt(1)([MmGg](?:u|ü)-?t)i-?g(?:-?t)?(e[snm]?)?$" => "$1{IG}"; // mutig, gütig
		"tstopt(1)([Tt](?:ä)-?t)i-?g(?:-?t)?(e[snm]?)?$" => "$1{IG}"; // tätig
		"tstopt(1)([Nn](?:ö)-?t)i-?g(?:-?t)?(e[snm]?)?$" => "$1{IG}"; // nötig
		"tstopt(1)([Hh](?:eu)-?t)i-?g(?:-?t)?(e[snm]?)?$" => "$1{IG}"; // heutig
		"tstopt(1)((?<!s-|s)t)?(?<!e)i-?g(?:-?t)?(e[snm]?)?$" => { "{IG}", "läs-?tig-?te" }; // don't abbreviate -er (comparative), don't abbreviate imperfet (past)
		// trendiger must be placed before -er in base model
		"tstopt(0)((?<!s-|s)t)?(?<!e)i-?g(?:-?t)?((?:st)?e[rsnm]?)?$" => "{IG}$2";

		// same with -isch
		"tstopt(1)((?<!s-|s)t)?(?<!e)i-?sch(-?s-?t)?(e[rsnm]?)?$" => { "{ISCH}", "^[Tt]isch(?:e[sn]?)?$" }; 
		"tstopt(0)((?<!s-|s)t)?(?<!e)i-?sch(-?s-?t)?(e[rsnm]?)?$" => { "{ISCH}$2$3", "^[Tt]isch(?:e[sn]?)?$" }; 
		"tstopt(1){ISCH}er" => "{ISCH}"; 
		
		"tstopt(3)^[Dd]ann$" => "{DANN}"; // don't like the following HF rule ... confusion: kann, dann
		"tstopt(3)^[Dd]enn$" => "{DENN}"; // special MAC rules
		"tstopt(01)^[Ss]o[#+-]?dann$" => "{SO}{DANN}";
		"tstopt(01)^[Ss]o[#+-]?denn$" => "{SO}{DENN}";
		"tstopt(01)^[Dd]ann$" => "ann";
		"tstopt(01)^[Dd]enn$" => "enn";
		"tstopt(01)[Pp]rei-?s" => "{PREIS}";
		"tstopt(01)(?:[Gg]e\+?)?[Ss](e-?t-?z)" => "$1";
		"tstopt(01)[Ss]i-?t-?z" => "{SITZ}";
		"tstopt(01)[Pp]r(ü-?f)" => "$1";
		"tstopt(01)[Gg]leich" => "gl";
		"tstopt(01)men-?t(el-?l)" => "m$1"; // experimentell
		"tstopt(01)(?<![Zz])[ZzWw](ei-?t)" => "$1";
		"tstopt(01)#(er[#+-]?fuhr)_ich" => "$1{_ICH}"; // special case before following rule
		"tstopt(01)[Ff]((?:a|ä|u|ü)h-?r)" => "$1";
		"tstopt(01)[Ff](ur-?t)" => "$1";
		"tstopt(01)[Dd]r((?:u|ü)c-?k)" => "$1";
		"tstopt(01)einst$" => "eist";
		"tstopt(01)[Ss]ch(ö-?n)" => "$1";
		"tstopt(3)^[Ww]ann$" => "{WANN}";
		//"tstopt(01)^([Aa]n-?d)e-?r" => "$1"; // and(er)en // replaced by condenser rule
		

		"tstopt(01)[Kk]un-?d" => "{KUND}";
		"tstopt(01)[Kk]ün-?d" => "{KÜND}";
		"tstopt(01)[Zz]ah-?l" => "{ZAHL}";
		"tstopt(01)[Zz]äh-?l" => "{ZÄHL}";
		"tstopt(01)(?<!_)[Zz]ie-?h" => "{ZIEH}";
		"tstopt(01)(?<!_)[Zz]o-?g" => "{ZOG}";
		"tstopt(01)(?<!_)[Zz]u-?g" => "{ZUG}";
		"tstopt(01)(?<!_)[Zz]ü-?g" => "{ZÜG}";
		"tstopt(01)(?<!_)[Zz]ö-?g" => "{ZÖG}";
		"tstopt(01)[Vv]ol-?l" => "{VOLL}";
		"tstopt(01)^[Ss]o[#+-]?wie[#+-]?so$" => "{SOWIESO}";
		"tstopt(01)^[Ss]on-?d-?er\+?n$" => "{SONDERN}";
		"tstopt(01)^[Ss]on-?d-?er\+?s$" => "{SONDER}s";
		"tstopt(01)[Ss]on-?d-?er\+?s?" => "{SONDER}";
		"tstopt(01)[Gg]rei-?f" => "{GREIF}";
		"tstopt(01)[Gg]rif-?f" => "{GRIFF}";
		"tstopt(01)[Hh]ö-?r" => "{HÖR}";
		"tstopt(01)[Ss]chrei-?b" => "{SCHREIB}";
		"tstopt(01)[Ss]chrie-?b" => "{SCHRIEB}";
		"tstopt(01)[Ss]o[+#-]?gar" => "{SOGAR}";
		"tstopt(01)[Ss]chrif" => "{SCHRIF}";
		"tstopt(01)#nach_dem" => "nachdem";
		"tstopt(01)#lie-?gen_las-?sen" => "{LIEG}{LASS}en";
		"tstopt(1){LIEG}{LASS}en" => "{LIEG}{LASS}";
		"tstopt(01)#man_konn-?te" => "{MAN}{KONN}te";
		"tstopt(01)#ich_mus-?s" => "{ICHMUSS}";
		"tstopt(01)#muss_ich" => "{MUSSICH}";
		"tstopt(01)#er_mus-?s" => "{ERMUSS}";
		"tstopt(01)#wir_müs-?s" => "{WIRMÜSS}";
		"tstopt(01)#wir_mus-?s" => "{WIRMUSS}";
		"tstopt(01)#ich_will" => "{ICHWILL}";
		"tstopt(01)#wir_sind" => "{WIRSIND}";
		"tstopt(01)#wir_kön-?nen_sie" => "{WIRKÖNNENSIE}";
		"tstopt(01)#wir_kön-?nen" => "{WIRKÖNNEN}";
		"tstopt(01)#ich_kann" => "{ICHKANN}";
		"tstopt(01)#wir_ha-?ben" => "{WIRHABEN}";
		"tstopt(01)#ich_könn-?te" => "{ICHKÖNNTE}";
		"tstopt(01)#kann_er" => "{KANNER}";
		"tstopt(01)#in_der" => "{INDER}";
		"tstopt(1)#in_die-?ser" => "{INDIES}";
		"tstopt(0)#in_die-?ser" => "{INDIESER}";
		"tstopt(01)#in_die-?s" => "{INDIES}";
		"tstopt(01)#in_die" => "{INDIE}";
		"tstopt(01)#in_den" => "{INDEN}";
		"tstopt(01)#sie_sich" => "{SIESICH}";
		"tstopt(01)#auf_der" => "{AUFDER}";
		"tstopt(01)#bei_der" => "{BEIDER}";
		"tstopt(01)#von_der" => "{VONDER}";
		"tstopt(01)#mit_der" => "{MITDER}";
		"tstopt(01)#kann_ich" => "{KANNICH}";
		"tstopt(01)#will_ich" => "{WILLICH}";
		"tstopt(01)#soll_ich" => "{SOLLICH}";
		"tstopt(01)#wenn_ich" => "{WENNICH}";
		"tstopt(01)#kauf_ich" => "{KAUFICH}";
		"tstopt(01)#ha-?be_ich" => "{HABEICH}";
		"tstopt(01)#ich_ha-?be" => "{ICHHABE}";
		"tstopt(01)#bin_ich" => "{BINICH}";
		"tstopt(01)#ich_bin" => "{ICHBIN}";
		"tstopt(01)#ich_glaub_nicht" => "{ICHGLAUBNICHT}";
		"tstopt(01)#ich_glau-?be?" => "{ICHGLAUB}";
		"tstopt(01)#wur-?de_ich" => "{WURDEICH}";
		"tstopt(01)#wir_wol-?len" => "{WIRWOLLEN}";
		"tstopt(01)#wir_wurd" => "{WIRWURD}";
		"tstopt(01)#wir_uns" => "{WIR}{UNS}";
		"tstopt(01)#wurd_wir" => "{WURDWIR}";
		"tstopt(01)#wie_vie-?l" => "{WIE}{VIEL}";
		"tstopt(01)#doch_noch" => "{DOCH}{NOCH}";
		"tstopt(01)#soll_man" => "{SOLL}{MAN}";
		"tstopt(01)#auch_noch" => "{AUCH}{NOCH}";
		"tstopt(01)#auch_schon" => "{AUCH}{SCHON}";
		"tstopt(01)#im-?mer_schon" => "{IMMER}{SCHON}";
		"tstopt(01)#wol-?len_wir" => "{WOLL}{WIR}";
		"tstopt(01)#wis-?sen_sie" => "{WISS}{SIE}";
		"tstopt(01)#müs-?sen_sie" => "{MÜSS}{SIE}";
		"tstopt(01)#so_sehr" => "{SOSEHR}";
		"tstopt(01)#um[-#]?so_mehr" => "{UMSOMEHR}";
		"tstopt(01)#auf_ü-?ber" => "{AUFÜBER}";
		"tstopt(01)#sa-?ge_ich" => "{SAGEICH}";
		"tstopt(01)#hat_er" => "{HATER}";
		"tstopt(01)#kön-?nen_wir" => "{KÖNNENWIR}";
		"tstopt(01)#so_viel" => "{SOVIEL}";
		"tstopt(01)#wer-?den_muss" => "{WERDENMUSS}";
		"tstopt(01)[Ss]o[+#-]?viel" => "{SOVIEL}";
		"tstopt(01)#wer-?den_konn-?te" => "{WERDENKONNTE}";
		"tstopt(01)#wer-?den_will" => "{WERDENWILL}";
		"tstopt(01)#wer-?den_soll" => "{WERDENSOLL}";
		"tstopt(01)#wer-?den_sie" => "{WERD}{SIE}";
		"tstopt(01)#sein_wird" => "{SEINWIRD}";
		"tstopt(01)#wir_sie" => "{WIRSIE}";
		"tstopt(01)#nicht_mehr" => "{NICHTMEHR}";
		"tstopt(01)#hät-?te_ich" => "{HÄTTEICH}";
		"tstopt(01)#sehr_viel" => "{SEHRVIEL}";
		"tstopt(01)#zu_viel" => "{ZUVIEL}";
		"tstopt(01)#ha-?ben_sie" => "{HAB}{SIE}";
		"tstopt(01)#müs-?sen_wir" => "{MÜSSWIR}";
		"tstopt(01)#ja_noch" => "{JANOCH}";
		"tstopt(01)#ge-?hen_sie" => "{GEHENSIE}";
		"tstopt(01)#wir_ih-?nen" => "{WIRIHNEN}";
		"tstopt(01)#das_heisst" => "{DASHEISST}";
		"tstopt(01)#sehr_lang" => "{SEHR}{LANG}";
		"tstopt(01)#vor_kur-?z" => "{VOR}{KURZ}";
		"tstopt(01)#mit_dem" => "{MIT}{EM}";
		"tstopt(01)#ich_zie-?h" => "{ICH}{ZIEH}";
		"tstopt(01)#ich_zog" => "{ICH}{ZOG}";
		"tstopt(01)#ich_hof-?f_nicht" => "{ICHHOFFNICHT}";
		"tstopt(01)#ich_hof-?f" => "{ICHHOFF}";
		"tstopt(01)#der\+?_z?eit" => "{DER}{ZEIT}";
		"tstopt(01)#nicht_im-?mer" => "{NICHT}{IMMER}";
		"tstopt(01)#hat-?ten_sie" => "{HAT}{SIE}";
		"tstopt(01)#an_der" => "{AN_DER}";
		"tstopt(01)#auf_den" => "{AUF_DEN}";
		"tstopt(01)#auf_uns" => "{AUF}{UNS}";
		"tstopt(01)#mit_ih-?nen" => "{MITIHNEN}";
		"tstopt(01)#nicht_viel" => "{NICHTVIEL}";
		
		"tstopt(01)(?<!m-|m)[euiao]?-?men-?t(?:en?)?" => { "{MENT2}", "[Nn]a-?men-?t" };
		"tstopt(01)[Aa]nt[#+-]?wor-?t" => "{ANTWORT}";
		"tstopt(01)eins$" => "{_EINS}"; // Gesangsvereins
		"tstopt(01)i-?ta-?t(i-?v)" => "{ITAT}$1"; // quantitativ
		"tstopt(01)i-?sa-?t" => "{ISAT}$1"; // Organisation
		"tstopt(01)[Tt]a[#+-]?g" => "{TAG}";  		
		"tstopt(01)[Tt]äg" => "{TÄG}";  		
		"tstopt(01)(?<![Ss])[Tt]a[#+-]?t" => "{TAT}";  		
		"tstopt(01)[Bb]e[#+-]?tref[#+-]?fen-?d" => "{BETREFFEND}";  		
		"tstopt(01)[Tt]ref[#+-]?f" => "{TREFF}";  		
		"tstopt(01)[Tt]rif[#+-]?f" => "{TRIFF}";  		
		"tstopt(01)(?<![Ss])[Tt]ra[#+-]?f" => "{TRAF}";  		
		"tstopt(01)[Ss]a[#+-]?c-?h" => "{SACH}";  		
		"tstopt(01)säch[#+-]?li-?c-?h" => "{SÄCHLICH}";  		
		"tstopt(01)(?<![Ss])[Tt]ä[#+-]?t" => "{TÄT}";  		
		"tstopt(01)[Ss]chul-?d" => "{SCHULD}";  		
		"tstopt(01){SCHULD}et" => "{SCHULD}{ET}";  		
		"tstopt(01)[Kk]an[#+-]?t" => "{KANT}";  		
		"tstopt(01)[Kk]et[#+-]?t" => "{KETT}";  		
		"tstopt(01)[Kk]a[#+-]?pi-?t" => "{KAPIT}";  		
		"tstopt(01)[Kk]a[#+-]?p" => "{KAP}";  		
		"tstopt(01)i-?sie-?r" => "{ISIER}"; // kritisieren etc.
		"tstopt(01)i-?gen-?d" => "{IGEND}"; // befriedigend
		"tstopt(01)[Ee]m-?p-?feh-?l" => "{EMPFEHL}";
		"tstopt(01)[Ee]m-?p-?fieh-?l" => "{EMPFIEHL}";
		"tstopt(01)[Ee]m-?p-?fah-?l" => "{EMPFAHL}";
		"tstopt(01)[Ee]m-?p-?foh-?l" => "{EMPFOHL}";
		"tstopt(01)[Ww]un-?sch" => "{WUNSCH}";
		"tstopt(01)[Ww]ün-?sch" => "{WÜNSCH}";
		"tstopt(01)[Ww]ah-?r" => "{WAHR}";
		"tstopt(01)[Ww]a-?re(?!n)" => "{WAHR}e"; // Waren noun and Waren verb indistinguishable!
		"tstopt(01)(?<!s|s-)[Ss]en-?d" => "{SEND}";
		"tstopt(01)^san-?d(e?[snr]?)$" => "Sand"; // upper case: avoid Sand
		"tstopt(01)san-?d" => "{SAND}"; // no upper case: avoid Sand
		"tstopt(01)[Ss]u-?c-?h" => "{SUCH}";
		"tstopt(01)(?<![Pp])[Ss]ü-?c-?h" => "{SÜCH}";
		"tstopt(01)[Ff]üh-?l" => "{FÜHL}";
		"tstopt(01)[Ff]ül-?l" => "{FÜLL}";
		"tstopt(01)[Zz]eu-?g" => "{ZEUG}";
		"tstopt(01)[Zz]ol-?l" => "{ZOLL}";
		"tstopt(01)[Zz]öl-?l" => "{ZÖLL}";
		"tstopt(01)[Ff]ie-?l" => "{FIEL}";
		"tstopt(01)[Ww]ei-?s(?!-s|s)" => "{WEIS}";
		"tstopt(01)[Ww]ie-?s" => "{WIES}";
		"tstopt(01)[Ss]chie-?n" => "{SCHIEN}";
		"tstopt(01)[Ss]chei-?n" => "{SCHEIN}";
		"tstopt(01)[Kk]ür-?z" => "{KÜRZ}";
		"tstopt(01)[Hh]of-?f-?n?" => "{HOFF}";
		"tstopt(01)[Gg]an-?z" => "{GANZ}";
		"tstopt(01)[Gg]än-?z" => "{GÄNZ}";
		"tstopt(01)[Gg]ros-?s" => "{GROSS}";
		"tstopt(01)[Gg]rös-?s" => "{GRÖSS}";
		"tstopt(01)[Zz]ei-?ch-?n?" => "{ZEICH}";
		"tstopt(01){ZEICH}e-?t" => "{ZEICH}{ET}";
		"tstopt(01)[Bb]rie-?f" => "{BRIEF}";
		"tstopt(01)[Ee]-?ben(?:-|\+|#)?so" => "{EBENSO}";
		"tstopt(01)[Uu]m(?:-|\+|#)?so" => "{UMSO}";
		"tstopt(01)[Ww]ur-?d" => "{WURD}";
		"tstopt(01)[Gg]e[-+]?we-?sen" => "{GEWESEN}";
		"tstopt(1)[Gg]e[-+]?wor-?de-?n(e[rsnm]?)?" => "{GEWORDEN}";
		"tstopt(0)[Gg]e[-+]?wor-?de-?n" => "{GEWORDEN}";
		"tstopt(01){WURD}et$" => "{WURD}{ET}";
		"tstopt(01){WURD}e$" => "{WURD}";
		"tstopt(01)[Ww]o(?:l-?l|h-?l)" => "{WOLL}";
		"tstopt(01)[Ss]tel-?l" => "{STELL}";
		"tstopt(01)[Ss]te-?h?-?t" => "{STEHT}";
		"tstopt(01)[Ss]te-?h" => "{STEH}";
		"tstopt(01)[Ss]tan-?d" => "{STAND}";
		"tstopt(01)[Ss]tän-?d" => "{STÄND}";
		"tstopt(01)[Hh]ät-?t" => "{HÄTT}"; 
		"tstopt(01){HÄTT}et" => "{HÄTT}{ET}"; 
		"tstopt(01)[Mm]acht[#+-]lo-?s" => "{MACHT}{LOS}"; 
		"tstopt(01)[Mm]a-?ch" => "{MACH}"; 
		"tstopt(01){MACH}er" => "{MACH}{ER}"; 
		"tstopt(01){MACH}un-?g" => "{MACHUNG}"; 
		"tstopt(1)[Dd]ie-?se[rmns]?" => "{DIS}"; 
		"tstopt(0)[Dd]ie-?ser" => "{DISER}"; 
		"tstopt(01)#wir_neh-?m" => "{WIRNEHM}"; 
		"tstopt(01)nom-?me-?n" => "{NOMM}{EN}"; 
		"tstopt(01)[Nn][e]h-?m" => "{NEHM}";
		"tstopt(01)[Gg]lau-?b" => "{GLAUB}";
		"tstopt(01)[Gg]läu-?b" => "{GLÄUB}";
		"tstopt(01)(?<![Ss]ch|[Ff])[Ll]ies-?s" => "{LIESS}";
		"tstopt(01)[Ww]in-?n" => "{WINN}";
		"tstopt(01)[Ww]an-?n" => "{WANN1}";
		"tstopt(01)[Ww]on-?n" => "{WONN}";
		"tstopt(01)[Ff]as-?s" => "{FASS}";
		"tstopt(01)[Nn]um-?me-?r" => "{NUMMER}";
		"tstopt(01)[Ww]ür-?d" => { "{WÜRD}", "[Ww]ür-?de-?#?los" };
		"tstopt(01){WÜRD}et$" => "{WÜRD}{ET}";
		"tstopt(01)^[Ss]ei-?te" => "{SEITE}";
		"tstopt(01)^[Ss]eit" => "{SEIT}";
		"tstopt(01)^[Ss]ei$" => "{SEI}";
		"tstopt(01)^[Ss]ei" => "{SEI_}";
		"tstopt(01)#ich_mag" => "{ICHMAG}";
		"tstopt(01)[Mm]ö-?g" => "{MÖG}";
		"tstopt(01)[Mm]öch" => "{MÖCH}";
		"tstopt(01)[Hh]o-?c?h" => "{HOCH}";
		"tstopt(01)[Hh]ö-?h" => "{HÖH}";
		"tstopt(01)(?<![PpSsKk])[Ll]an-?g" => "{LANG}";
		"tstopt(01)[Ll]än-?g" => "{LÄNG}";
		"tstopt(01){LÄNG}e-?r" => "{LÄNG}{ER}";
		"tstopt(01)[Dd]in-?g" => "{DING}";
		"tstopt(01)[Kk]os-?t" => "{KOST}";
		"tstopt(01)[Kk]ös-?t" => "{KÖST}";
		"tstopt(01)^[Oo]-?der\+?$" => "{ODER}";
		"tstopt(01)[Dd]e-?fi-?ni-?ti-?v\+?" => "def";
		"tstopt(01)[Gg]e-?h(e?(?:s?t)?|en-?d)" => "{GEH}$1";
		"tstopt(01)[Gg]in-?g" => "{GING}";
		"tstopt(01)[Gg]an-?g" => "{GANG}";
		"tstopt(01)#sa-?m" => "{SAM}";
		"tstopt(01)sa-?m" => "{SAM}"; // samt und sonders, gesamthaft
		"tstopt(01)^[Jj]a$" => "{JA}";
		"tstopt(01)^[Dd]u$" => "{DU}";
		"tstopt(01)^[Zz]u[mr]$" => "{ZUM}";
		"tstopt(01)^[Bb]ei[+-]?spie-?l" => "{BEISPIEL}";
		"tstopt(01)^[Aa]-?ber" => "{ABER}";
		"tstopt(01)^[Vv]ie-?l" => "{VIEL}";
		"tstopt(01)^[Dd]och$" => "{DOCH}";
		"tstopt(01)^[Dd]op-?pe-?l" => "{DOPPEL}";
		"tstopt(01)^[Hh]ier" => "{HIER}";
		"tstopt(01)[Hh]er-?r(?:-?sch)?" => "{HERRSCH}";
		"tstopt(01)(?<![Cc]|ei-|ei)#?[Hh]er(?!r|b)" => { "{HER}", "[Ff]rü-?he-?r", "(?:ei|ä)-?he-?r" };
		"tstopt(01)(?<![Cc])#?[Hh]e-?r(i-?g(?:e[rnsm]?)?)?" => { "{HER}$1", "[Hh]err", "[Hh]erb", "[Ff]rü-?he-?r", "(?:ei|ä)-?he-?r" };
		"tstopt(01)^[Ss]cho-?n" => "{SCHON}";
		"tstopt(01)^[Ii]m-?mer" => "{IMMER}";
		"tstopt(01)[Ff]alls" => "{FALLS}";
		"tstopt(01)[Ff]al-?l" => "{FALL}";
		"tstopt(01)[Ff]äl-?l" => "{FÄLL}";
		"tstopt(01)^[Ff]a-?c-?h" => "{FACH}";
		"tstopt(01)^[Ff]ä-?c-?h" => "{FÄCH}";
		"tstopt(01)^[Bb]an-?k" => "{BANK}";
		"tstopt(01)[Dd]an-?k" => "{DANK}";
		"tstopt(01)[Dd]en-?k" => "{DENK}";
		"tstopt(01)^[Nn]un$" => "{NUN}";
		"tstopt(01)^[Aa]l-?so$" => "{ALSO}";
		"tstopt(01)[Mm]a-?l" => "{MAL}";
		"tstopt(01){MAL}er" => "{MAL}{ER}";
		"tstopt(01)[Dd]a-?{MAL}" => "{DA}{MAL}";
		"tstopt(01)[Jj]e-?{MAL}" => "{JE}{MAL}";
		"tstopt(01)[Bb]al-?d" => "{BALD}";
		"tstopt(01)[Bb]ah-?n" => "{BAHN}";
		"tstopt(01)[Bb]an-?d" => "{BAND}";
		"tstopt(01)[Bb]än-?d" => "{BÄND}";
		"tstopt(01)(?<!i)el([ns])?$" => "{EL}$1";
		"tstopt(01)[Ss]a-?g(t)?(e|e?s?t|en)" => "{SAG}$1$2";
		"tstopt(01)[Ii]n[-+#]?so[-+#]?fer[-+#]?n" => "{INSOFERN}";
		"tstopt(01)[Ii]n[-+#]?so[-+#]?weit" => "{INSOWEIT}";
		"tstopt(01)[Jj]e-?der" => "{JED}";
		"tstopt(01)[Dd]em[#+-]?n?ach" => "{DEMNACH}";
		"tstopt(01)[Ll]e-?b" => "{LEB}";
		"tstopt(01)[Ll]e-?ben" => "{LEBEN}";
		"tstopt(01)[Tt]rans[#+-]?por-?t" => "{TRANSPORT}";
		"tstopt(01)[Tt]rans(?!$)" => "{TRANS}";
		"tstopt(3)[Tt]rans" => "{TRANS}"; // honestly, I don't understand this obsession to write certain words differently ... this is kind of a old reminant pride of old shorthand masters ...
		
		"tstopt(01)^[Bb]is-?t" => "{BIST}";
		"tstopt(01)^[Bb]is(?!t)" => "{BIS}";
		"tstopt(01)[Mm]an-?n?(?!-?d)" => { "{MAN}", "[Rr]o-?ma-?n" };
		"tstopt(01)[Mm]än-?n" => "{MÄNN}";
		"tstopt(01)^[Nn]ur$" => "{NUR}";
		"tstopt(01)[Mm]eh-?r" => "{MEHR}";
		"tstopt(01)(?<!lo-|lo|s|s-)[Ss]eh?-?r" => { "{SEHR}", "[Uu]n-?s-?e-?r", "ser\+?[sn]$", "ser$" };
		"tstopt(01)[Ss]i-?c-?he-?r" => "{SICHER}";
		"tstopt(01)[Dd]a[#+-]?mit" => "{DAMIT}";
		"tstopt(01)[Uu]n[-+#]?s[-+#]?er[-+#]?(?:er)?" => "{UNSER}";
		// uns-er+er 

		"tstopt(01)([Dd](?:[au]|ü))r(-?f)" => "$1$2"; // r falls out
		
		"tstopt(3)^[Ww]ir-?k[-#]?li-?ch" => "{WIRKLICH}";
		
		// acually, Auslautkürzungen can be realised in a much simpler way by just taking of starting consonant ... here's an example:
		"tstopt(01)[Gg]([ea]-?b)" => "$1";
		"tstopt(01)[Gg](i-?b)" => "[0n-]$1"; // gib: musst start on baseline!
		"tstopt(01)[Nn]([ao]ch)" => "$1";
		
		
		"tstopt(01)i-?ge-?r(e[rsnm]?)?$" => "{IGER}$1";
		"tstopt(01)stä-?ti-gu-?n-?g" => "{STÄT}{IGUNG}";
		"tstopt(01)ti-gu-?n-?g" => "{IGUNG}";
		"tstopt(01)(?<![ae])i-gu-?n-?g" => "{IGUNG}";
		"tstopt(01)#?nis-?s(e[sn]?)?" => "{NISS}$1";
		"tstopt(01)#?nis($|#)" => "{NIS}$1";
		"tstopt(01)(?<=[Jj]e|[Nn]ie)[#+-]?man-?d" => "{MAND}";
		"tstopt(01)[Kk]onn-?t" => "{KONN}t";
		"tstopt(01)[Kk]ann(?=(st)?$)" => "{KANN}";
		"tstopt(01)[Kk]ön-?n" => "{KÖNN}";
		"tstopt(01)[Kk]ennt$" => "{KENN}t";
		"tstopt(01)[Kk]en-?n-?t?" => "{KENN}"; // abbreviate also t if word continues
		"tstopt(1)[Kk]an-?t" => "{KANNT}t"; // only extreme abbreviations (MA1)
		"tstopt(01)[Kk]ann-?t" => "{KANNT}t";
		"tstopt(01)[Ss]e-?h(?!r$)" => "{SEH}";
		"tstopt(01)[Ss]ie-?h" => "{SIEH}";
		//"tstopt(01)[Ss]i-?ch\|'s" => "{SICH}S"; // not clear when and how to do this abbreviation
		"tstopt(01)[Ss]i-?ch" => "{SICH}";
		"tstopt(01)[Ss]a-?h" => "{SAH}";
		"tstopt(01)(?<![Pp]f)[Ll]e-?g" => "{LEG}";
		"tstopt(01)(?<![Ss]ch)[Ll]a-?g" => "{LAG}";
		"tstopt(01)[Ll]ie-?g" => "{LIEG}";
		"tstopt(01)[Nn]ah?-?m" => "{NAHM}"; // not officially listed, but implicitely used (ch. 44, 1)
		"tstopt(01)[Nn]imm" => "{NIMM}";
		"tstopt(01)[Ss]tim-?m" => "{STIMM}";
		"tstopt(01)[Ff]rei" => "{FREI}";
		"tstopt(01)[Ff]ü-?g" => "{FÜG}";
		"tstopt(01)[Ff]u-?g" => "{FUG}";
		"tstopt(01)[Rr]u-?f" => "{RUF}";
		"tstopt(01)[Mm]us-?s" => "{MUSS}";
		"tstopt(01)[Mm]es-?s" => "{MESS}";
		"tstopt(01)(?<![Ee][#+-]|[Ee])[Mm]is-?s" => "{MISS}"; // not: Emission
		"tstopt(01)[Mm]as-?s" => "{MASS}";
		"tstopt(01)[Mm]äs-?s" => "{MÄSS}";
		"tstopt(01)[Ww]us-?s" => "{WUSS}";
		"tstopt(01)[Mm]üs-?s" => "{MÜSS}";
		"tstopt(01)[Ww]üs-?s" => "{WÜSS}";
		"tstopt(01)[Ww]is-?s" => "{WISS}";
		"tstopt(01)[Ss]chlies-?s" => "{SCHLIESS}";
		"tstopt(01)[Ss]chlos-?s" => "{SCHLOSS}";
		"tstopt(01)[Ss]chlus-?s" => "{SCHLUSS}";
		"tstopt(01)[Ss]chlüs-?s" => "{SCHLÜSS}";
		"tstopt(01)[Ww]eis-?s" => "{WEISS}";
		"tstopt(01)^[Ee]l-?l" => "{ELL}";
		"tstopt(01)i?-?el-?l" => "{IELL}";
		"tstopt(01)[Ll]o-?s-?t" => "{LOST}";
		"tstopt(01)[Ll]ö-?s-?t" => "{LÖST}";
		"tstopt(01)s-?[Ll]o-?s(?!s)" => "{LOS}"; // ahnungslos: without s
		"tstopt(01)(?<![Kk])[Ll]o-?s(?!-?s)" => "{LOS}";
		"tstopt(01)[Ll]as-?s" => "{LASS}";
		"tstopt(01)[Ll]ö-?s" => "{LÖS}";
		"tstopt(01)[Ll]äs-?s" => "{LÄSS}";
		"tstopt(01){LAG}er" => "{LAG}{ER}"; // special (-er is not recognized in 01)
		"tstopt(01)[Hh]an-?de?-?l" => "{HANDEL}";
		"tstopt(01)[Ss]ol-?l" => "{SOLL}";
		"tstopt(01)(?<![zZ])[Ww]il-?l" => "{WILL}";
		"tstopt(01)[Jj](?:a|ä)h-?r" => "{JAHR}";
		"tstopt(01)[Ff]ie-?l" => "{FIEL}";
		
		"[Zz]wie\+" => "{ZWIE}+"; // Zwiegespräch
		"([Hh]er)-?bei" => "$1{BEI}"; 
 		"([Vv]or)-?bei" => "$1{BEI}"; 
 
		"#er" => "{ER}";
		"(?<!gi)e-?r(un-?g)(en)?$" => { "er+$1$2", "[Bb]e[-+]?sche-?ru" }; // not: Regierung(en), Bescherung

		"(^|\+|\|)zer\+(?!$)" => "$1{ZER}+";

		"^in-?t-?er$" => "{INTER}";
		"^in-?t-?er[-+]" => "{INTER}+";
		"(\+)in-?t-?er[-+]" => "$1{INTER}+";

		// -et in verbs
		"([Ww]ä-?r)et" => "{WÄR}{ET}";
		"([Hh]ät-?t|[Ww]ür-?d)et" => "$1{ET}";


		"([Ss]on)-?der" => "$1d{ER}";
		"ie(-?r(?:en?|s?t)?)$" => "i$1";	// actually a normalizer rule, but include it here to avoid {er}

		"[Mm]iss-" => "{MISS}"; 	// try that

		"hin(-?ter)" => "{HIN}$1";

		"^[Ee]r[-+]?hei-?t-?e-?r" => "{ER}+H{HEIT}-{ER}"; // Erheiterung
		"([Hh])ei-?ter" => "$1{HEIT}er";	// Heiterkeit, angeheitert etc.
		//"([Hh])ei-?t-?{ER}" => "$1{HEIT}{ER}";	// Heiterkeit, angeheitert etc.
		
		"es_ist" => "{ESIST}";

		"ge[-+]?hab-?t" => "{GEHABT}";	
	
		"(Ü|ü)-?ber" => { "{ÜBER}", "[Ss]ü.?ü.?be.?r.?e", "stü-?b-?(?:er\+?|{ER})s?$" };

		"^[Ww]ir$" => "{WIR}";
		"^[Ww]ir'" => "{WIR}'";
		
		"^[Ww]ars$" => "{WAR}s"; // wars
		"^wa-?r(e?st|(?:e|\')?n|e?t)?$" => { "{WAR}$1", "[Ww]a-?rum" };
		"^wä-?r(e?st|e|en|et|t)?$" => "{WÄR}$1";
		"{WAR}et$" => "{WAR}{ET}";
		"^[Ww]ärs$" => "{WÄR}s"; // wärs

		"(?<!^|s)(i-?)?tä-?t(?!er?(?:s|in(?:-?nen)?)?)" => { "{HEIT}", "[Tt]rak-?t-?ä-?t-?c-?hen", "[Tt]ä-?t-?schel", "[Bb]e[+-]?tä-?ti-?g", "[Gg]e.?tä.?tig", "[Uu]n\+?tä-?tig", "[Ww]ohl[-+]?tä-?t", "[Uu]n[-+]?tä-?t" };
		"(?<!^|s)(i-?)?tä-?ten" => "{HEIT}en";
		"ge[-+]?gen" => { "{GEGEN}", "[Gg]e-?gen(?:d|-?den)" };
		
		"zu(\+|-)rück(\+|-)" => "{ZURÜCK}+";
		"^zu(\+|-)rück$" => "{ZURÜCK}+";
		
		"(\+)dem$" => "$1{DEM}";
		"^dem$" => "{DEM}";
		"(\+)den$" => "$1{DEN}";
		"^den$" => "{DEN}";
		"^den\+" => "{DEN}";
		
		"^aus$" => "{AUS}";
		"(?<!kr)aus(\+|#)" => "{AUS}$1"; // not: krausköpfige
		"(#|\+)aus$" => "$1{AUS}";

		"ur\+" => "{UR}+";

		"#li-?ch" => "{LICH}";
		"tüm{LICH}" => "{TUM}{LICH}"; 
		"(-|\+)li-?ch(e-?r\+?|-?s?-?t)?(e[rnsm]?\+?|m)?$" => { "$1{LICH}$2$3", "[Zz]wil-?li-?ch", "[Gg]e.?b-?li-?c-?h", "[Hh]el-?lich-?t", "^[Ss]ch-?li-?c-?he" }; // not: geblichen

		"(?<!^[Gg])ent\+" => "{ANT}+"; // not: Gentleman
		"(?<![Dd]er\+|[Dd]er-|[Dd]er|[Dd]es-s|[Dd]ess)ent-(w|gl)" => "{ANT}+$1"; // Entwicklungshelfer, entgleiste, not: derentwillen
		
		"(?<![ahHMmBbGgKk])un-?te-?r" => { "{UNTER}", "bräun-?te-?r" }; // not: sonnengebräunter
		"{UNTER}-" => "{UNTER}+";

		"un(\+|#)" => "{UN}$1"; 

		"^wie?-?d-?er($|-)" => "{WIDER}";
		"wie?-?d-?er(\+|#|{)" => "{WIDER}$1";
		"(#|\+)wie?-?d-?er" => "$1{WIDER}";

		"^in$" => "{IN}";
		"^in(\+|#)des$" => "{IN}$1{DES}";
		"^in(\+|#)so" => { "{IN}$1{SO}", "^in.?sol" }; // not: insolvent
		"^in(\+|#)" => "{IN}$1";
		"ungs-in(\+|#)" => "ungs{IN}$1";

		"^in(-|\+)?str" => "{IN}$1str";
		"(\+|#)in(\+|#)" => "$1{IN}$2";
		"(?<!er)(\+|#)in$" => "$1{IN}";

		"(^|\|)[Ss]i-?ch($|\|)" => "$1{SICH}$2"; // -? because of sich's

		"^als$" => "{ALS}"; 
		
		// -er
		"((?:-|\+)(?:.*?))e-?r\+?er$" => "$1{ER}{ER}"; // use - to detect preceeding syllable 
		"((?:-|\+)(?:.*?[^i]))(e-?r)(e?[rnms]?)?$" => { "$1{ER}$3", "^[Ll]u-?zer-?n", "[Kk]on-?zer-?n", "[Bb]ar-?ri-?e-?re", "[Bb]el-?ve-?de-?re", "[Hh]err", "(?:Ü|ü)-?b-?er\+?que-?r", "[Pp]or-?ti-?er", "[Rr]e-?vers", "[Cc]ha-?rak-?t-?e-?re", "[Dd]i.?ver.?s", "[Pp]lä-?do-?yer", "[Aa]-?te-?li-?er", "schwer$", "[Kk]o-?ni-?fe-?r", "^[Ww]o\+fern", "[Pp]e-?r[-+]?i-?phe-?r", "[Gg]a-?le-?e-?re", "^[Bb]a-?ja-?de-?re", "^[Tt]el-?li-?ers?$", "^[Kk]ü-?ras-?si-?er", "^[Bb]ou-?lan-?ger", "^[Ii]r-?gend[#-+|]?wer", "^[Dd]urch[-+|]?que-?r", "[Ss]o[-+]fern$", "^[Pp]oi-?ti-?er" }; // use - to detect preceeding syllable
		"((?:-|\+)(?:.*?[^i]))(e-?r-?t)(e?[rnms]?)?$" => { "$1{ER}t$3", "[Ww]er-?t", "(?:[Cc]ou|ku)-?ver", "[Qq]uer", "[Dd]es-?sert", "[Hh]er-?bert", "[Ss]cher-?t", "^[Gg]al-?lert", "^[Gg]il-?ber-?t" }; // use - to detect preceeding syllable
		"er(-?ne[nsmr]?)$" => {"{ER}$1", "[Ll]er-?n", "[Ff]er-?n", "[Ss]ter-?n", "[Mm]o-?d-?er-?n", "[Kk]on-?zer-?n", "^[Kk]er-?n", "^[Kk]a-?ser-?n" };
		"(?<![VvZzDdWwHhi])er\+" => "{ER}"; //, "[Ss]ter(?:-|\+)?n", "[Ww]ie?-?d-?er\+", "[Kk]on-?zer-?n", "[Gg]u-?er-?ri-?(?:è|e)-?re" };
		"(?<!^)ver\+$" => "v{ER}"; // Revolver

		"{LICH}er$" => "{LICH}{ER}";

		"^es$" => "{ES}";

		
		"(^|\+|\|)[Vv]er(\+)(?!$)" => "$1{VER}$2";
		"^ver\+$" => "{VER}+"; // verlosch (doesn't work with preceeding rule?!? => ok: we're in stage3: ver+ is seen as separate word!)

		"ver-" => { "{VER}+", "[Vv]er-?si-?o-?n", "[OoIi]-?ver-", "[Vv]er-?b(?:s|en|ia-?l)", "[Gg]o?u-?ver-?n", "[Vv]er-?si-?fi", "[Vv]er-?gi-?l", "[Vv]er-?ti-?k", "[Vv]er-?ba-?l(?:e[rsmn]?)?$", "^[Kk]u-?ver-?t", "^[Vv]er-ve$" }; // can produce wrong results (exclude Overall, Universum)

		"^all$" => "{ALL}";
		"\+all$" => "+{ALL}";
		"[-+]all[-+]ge" => "+{ALL}+{GE}+"; // verallgemeinern
		
		"^wie([+#])" => "{WI}$1";
		"(?<!{ÜBER})([+#])wie$" => "+{WI}";
		"#wie#" => "#{WI}#"; // sowieso 

		"^so(\+|#)" => "{SO}$1";
		"([#-])so$" => { "$1{SO}", "[os]-?so$", "^[Kk]or-?sos?$" }; // amoroso, Tasso
		"^so$" => "{SO}";
		
		"un-?ter" => "{UNTER}";
		
		"(?<!i)er#" => "{ER}"; // imm-er#hin
		"^er\+" => "{ER}";
		"^[Hh]er\+r" => "HE[VR+AR]"; // herrühren
		"(?<!i|d|#h|[Vv])er\+" => { "{ER}", "[Ww]ie?-?d-?er", "[Tt]he-?ra-p", "[Hh]er[-+]?bst", "[Hh]er.?ge.?kom" }; // more general rule
		"\+er$" => "{ER}";
		"(n-?d)er\+" => "$1{ER}+";
		"a-?ber" => "a-b{ER}"; // frequent word, so include it as a rule
		
		"(\+)sel-?b" => "$1{SELB}";
		"^sel-?b" => "{SELB}";

		"ant\+" => "{ANT}+";
		"(?<![fk])ant-" => { "{ANT}", "es-?sant", "^[Cc]ant", "^[Ee]-?le-?gan-?t" }; // not: interessantere, Canterville, El-Kantara

		"an\+" => "{AN}+";
		"[Aa]l-?l(e?)-?dem" => "{ALL}$1{DEM}"; 

		"schien" => "schin";	// hm .. ;-)
		"(er-?)dem$" => "{ER}{DEM}";
		"(ch-?)dem$" => "$1{DEM}"; 
		"((?:.*?))en$" => { "$1{EN}", "[Ww]ie-?n", "[Dd]ie.?n", "^[Rr]i-?en$", "^[Bb]en$", "^[Rr]ou-?ens?$", "^[Aa]n-?ci-?en", "^[Dd]ü-?puy-?tren" };
		"([Ss]eit|[Ww]äh?-?rend)-?dem" => "$1{DEM}";
 		"end#wem$" => "end#{WEM}"; // irgendwem

		"((?:.*?))em$" => "$1{EM}";

		"([Aa]n-?d)er" => "$1{ER}"; 

		"^was$" => "{WAS}";
		"(\||#)was$" => "$1{WAS}";
		
		"([RrHh]o)-?hei-?t" => "$1h{HEIT}"; // add h in Hoheit, Roheit
		"^hei-?t(e-?r|-?{ER})" => "h{HEIT}$1"; // heitere
		"[Hh]ai-?ti" => "H{HAIT}I"; // Haiti (diacritics)
		"[Ss]ai-?t(e|{EN})" => "s{HAIT}$1"; // Saite (diacritics)
		"(?<![Ss]c)[#-]?[hk]?[ea]ih?-?t" => "{HEIT}"; // also: Saiten (might have side effects ...), also: eingeweihten
		
		"#li-?ch" => "{H}";
		
		"zu(\+|#)" => "{ZU}$1";
		"zu$" => "{ZU}";
		
		"^auf(s)?$" => "{AUF}$1";
		"auf([+#])" => "{AUF}$1";
		"(\+|\|)auf$" => "$1{AUF}";

		"ge\+" => "{GE}";
		"(^|\|)wo(\||#|\+|$)" => { "$1{WO}$2", "[Ww]o.?wo[lh]l" }; // wowoll: swiss german
		"wil$" => "WIL";
		"(?<!c)lo-?s(ig-?{HEIT}(?:s|en)?|(es-?t)?(?:e[rsnm]?|{E[NMR]}))?$" => { "Los$1", "^[Pp]a-?tro-?k-?los$" };
		"ei-?en(?!-d|d)" => "[EI][&E]{EN}"; // not: schreiender
		"ei-?{EN}" => "[EI][&E]{EN}";
		
		"i-e([mn])$" => { "[&I]-e$1", "schien", "^[Aa]n-?ci-?en" };
		"ietät" => "[&I]{HEIT}";
		"t(u|ü)m[-#]?li-?ch" => "{TUM}{LICH}";
		"^[Bb]erück" => { "{BE}{RÜCK}", "[Bb]erück[et]" };
		"[Bb]e[-+]rück\+" => "{BE}{RÜCK}+"; // berücksichtigte
		"^[Rr]ück(?!s$)" => { "{RÜCK}", "[Rr]ück-?t", "[Rr]ück-?li" }; // not: rücklings, hinterrücks
		"h?eit-?li-?ch" => "{HEIT}{LICH}";
		"h?ei-?tig" => "{HEIT}ig";
		"ei-?tens" => "{HEIT}ens";
		"[kh]?eits" => "{HEIT}s";
		"iet$" => "[I]T";
		"sol-?ch" => "{SOLCH}";
		"^und$" => "{UND}";
		"\+und[+#]" => "{UND}";
		"^usw$" => "{USW}";
		
		"\+von$" => "+{VON}";
		"^von$" => "{VON}";
		
		"wel-?ch" => "{WELCH}";
		"wenn" => "{WENN}";
		"^([Ll]os\+?{ZU}#?)?wer-?d" => { "$1{WERD}", "[Ww]er.?den.?ber.?g" };
		"^{ZU}#wer-?d" => "{ZU}|{WERD}"; // klarzuwerden
		"([Ll]os)\+?({ZU})#?({WERD})" => "$1|$2|$3"; loszuwerden
		"{WERD}et" => "{WERD}{ET}";
		"#wer-?d((?:ens?|{EN}))$" => "{WERD}$1"; // Vollerwerden

		"^wie$" => "{WI}";
		"wird" => "{WIRD}";
		"^vo-?r(i-?g)" => "{VOR}$1"; // vorig
		"vor(?!})" => "{VOR}";
		"(?<![Pp])for-?t(i-?g)?" => { "{FORT}$1", "[Ff]or-?t-?u-?n-?a", "[Kk]om-?for-?t", "^[Ff]or-?te$" };
		"eiht" => "eit";
		//"^([Hh])a(f-?t)" => "$1A$2"; // avoid application of following rule
		"(?<!sc|\+)haf-?t(e|en|es)?" => { "{HAFT}$1", "^[Hh]af-?t" }; // not: ver+haften
		"([Ww]ahr[-+]?)haf-?t" => "$1{HAFT}"; // wahrhaften

		//"ge-?gen" => "{GEGEN}";
		//"ndwo$" => "nd{WO}";
		"#wo$" => "#{WO}";	
	
		"(?<!f)all(e[n|m|s]?)$" => "{ALL}$1";
		"^al-?l(?!e-?e)" => { "{ALL}", "[Aa]l-?lü-?r", "[Aa]l-?lon-?ge", "[Aa]l-?ler-?gi", "[Aa]l-?li-?an-?z", "[Aa]l-?li-?ga-?to-?r", "[Aa]l-?le-?go-?ri-?e", "[Aa]l-?len-?s-?pa-?c-?h", "[Aa]l-?l-?gäu", "^[Aa]l-?lah$", "^[Aa]-?l-?lo-?tri-?a", "^[Aa]l-?le-?e" };
		"(\[^a-z\])all" => "{$1ALL}";
		"{ALL}er" => "{ALL}r"; // doesn't respect step-by-step philosophy (but necessary for allerlei)

		"^auch$" => "{AUCH}";
		
		"bei(\+)" => "{BEI}$1";
		"^bei$" => "{BEI}";
		"(\+|#)bei$" => "$1{BEI}";
		
		"^dar[+#]" => "{DA@R}";
		"^dar$" => "{DA@R}";

		"^[Dd]a-?as$" => "{DASS}"; // daas (dialect, Glauser)
		"^[Dd]ass?$" => "{DASS}";
		"dass(?!t)" => "{DASS}";
		"^dem" => "{DEM}";
		"^denn" => "de[NN]";
		"^den$" => "{DEN}";
		"^den-(?!k)" => { "{DEN}", "[Dd]en-?noch" };
		"^de-nen" => "{DEN}[O][&E]{EN}"; // probably the only case where {EN} can follow {DEN} => add &E here directly
		//"\|den-" => "{DEN}";
		"^des(?![p-])" => { "{DES}", "^[Dd]es[-+]?mond" };
		"^([Dd]i)e(-?si-?g)" => "$1$2"; // avoid shortening of "diesig" (cf. following rule)
		"^die-?s(e[rsnm]?)?" => { "{DIS}$1", "[Dd]ie-?sel" };
		"dies$" => { "{DIS}", ".*[Pp]a-?ra-?die-?s" };
		
		// die-
		"^die$" => "{DI}";
		"^die\+" => "{DI}";	
		
		"tstopt(01)durch" => "{DURCH1}";
		"durch" => "{DURCH}";
		//"fürch" => "Fürch";
		"für" => { "{FÜR}", "[Ff]ürs-?t", "[Ff]ürch" };
		//"ge-?habt" => "{GEHABT}"; // rule exists 2x (see above)
		"(?<![CcPp])ha-?b" => { "{HAB}", "^[Hh]a-?bers?$", "[Hh]a-?b-?ich-?t", "[Ee]r[-+]ha-?be-?n", "^[Hh]ab.?lü-?t-?zels?$" };
		"^([Aa]n\+|{AN}\+|{VOR}\+|[Vv]or\+|[Mm]it\+|[Uu]m\+)?[Hh]at(-?t)?" => "$1{HAT}";
		"{HAT}et$" => "{HAT}{ET}"; 
		"^chin" => "[CH]in";

		"([Hh]in)\+(der)" => "$1-$2"; // Behinderungen
		"^hin-?zu" => "{HIN}{ZU}";
		"#hin$" => "{HIN}";
		"\+hin\+" => "{HIN}";

		"^in$" => "{IN}";
		"^ist(s?)$" => "{IST}$1";
		"mitt" => "m1i2t3t4";
		"mit(?!([tz]|-[tz]))" => { "{M}", "(?:[Ee]-?r|{ER})[-+]?e-?mi-?t" };
		"m1i2t3t4" => "mitt";
		"^nich-?t" => { "{NICHT2}", "^[Nn]ich-?ten?$" };
		"^sie$" => "{SI}";
		"^[Ss]in-?d$" => "{SIND}";
		"([hk]eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"(eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"[Ww]eih-?te" => "w{HEIT}e"; // eingeweihte
		"([ie]?tät)(en)?$" => "{HEIT}$2";
		"([Hh])inter" => "HN[&TVR]";
		//"^([Hh])ing$" => "$1I[NG]";
		"^[Dd]a[-+]hin(?!d)" => "{DA}{HIN}"; // dahinten
		"^[Hh]in" => { "{HIN}", "[Hh]in-?[dgz]", "^[Hh]in(?:k-?t|-?ke)" };
		"^zur$" => "[Z]ur";
		"^uns(er.*)?$" => "u[NS]$1";
		"(^|\|)({?des}?)?inter" => "$1$2{INTER}";
		
		"^der(?![+-]?[pb])" => { "{DER}", "[Dd]er-?wi" }; // Derp (name), Derwisch
		
		
		"(^|\|)[Aa]n-?ti[kc]on" => "$1{ANTI}{C}";
		"(^|\|)[Zz]uver" => "$1{Z}{VER}";
		//"((?:^(?:.*?)\+|\||\\)(?:.*?(?:[aeiou]|ä|ö|ü).*?))(e-?t)(e[nrsm])?" => { "{ET}", "[Rr]e[-+]pe-?t" };
		"t-?t-?l" => "[TTL]"; // war A sagt, muss B sagen (siehe folgende Regel ... :/)
		"t-?t(?!ums?$)" => "[TT]"; // bundler rule => use it here to avoid application of following et-rule
		"et-z" => "Et-z"; // avoid et in following rule
		"(-(?:(?:.*?))|{H[EA]IT})(?<!i)(e-?t)(e[nrsm])?(?!z)" => { "$1{ET}$3", "[Rr]e[-+]pe-?t", "Mar-?ga-?ret", "[Bb]ud-?get", "(?:[Kk]i-?lo|[Mm]il-?li|[Gg]a-?so)-?me-?t-?er", "[Hh]el-?ve-?tas", "[Tt]a-?pe-?t", "[Tt]rom-?pe-?te", "[Mm]us-?ke-?te", "[Aa]p-?pe-?ti-?t", "[Mm]au-?se-?to-?t", "[Aa]n[-+]?be-?tu-?n-?g", "[Pp]as-?te-?te", "[Dd]ol-?me-?t-?sch", "[Aa]r-?re-?ti", "[Ss]e-?k-?re-?t", "[Vv]a-?r-?i-?e-?te", "[Tt]he-?o-?re-?ti", "[Vv]e-?ge-?ta", "ge-?be-?t", "[Aa]n[-+]?be-?t", "[Bb]il-?le-?t", "[Pp]ro-?le-?t", "^[Aa]d-?met$", "^[Jj]a-?pe-?tos$", "[Bb]ul-?le-?tin", "[Aa]-?t-?h-?le-?t", "[Bb]a-?ro-?me-?ter", "[Kk]om-?pe-?ten", "[Gg]e\+?tre-?te", "sim-?me-?t-?ri-?s-?ch", "tre-?te", "[Rr]ol-?let", "[Aa]l-?(?:p-?h|f)a-?be-?t", "[Gg]i-?let", "[Pp]a-?t-?he-?tis-?c-?h", "(?:Ä|ä)s-?th?e-?t", "[Pp]la-?ne-?t", "[Dd]e-?k-?re-?t", "[Gg]e-?o.?me-?t-?r", "[Ss]ta-?p-?le-?ton", "[Ee]-?li-?[zs]a-?be-?t", "[Pp]e-?r-?i-?me-?ter", "[Aa]-?ze-?ton", "^[Ss]truw?-?wel-?pe-?t", "^(?:[Ff]|[Pp]h)o-?ne-?t", "^[Mm]i-?c-?he-?let", "^[Cc]ha-?bet$", "[Aa]-?me-?t-?h[yi]s-?t", "^[Cc]ou-?ple-?t", "^[Pp]i-?e-?tro", "^[Bb]i-?nets?$", "^[Pp]ol-?lets?$", "^[Bb]ou-?dets?$", "^[Ww]ild[-+|]?bre-?t", "^[Tt]ou-?pet", "^[Dd]i-?o-?cle-?ti-?a-?n", "^[Bb]i-?zet", "[Bb]er[-+]?set", "^[Ss]a-?s-?se-?t(?:ô|o)t", "^[cC]a-?ni-?vet", "^[Nn]e-?pe-?ta", "^[Rr]i-?bau-?det" }; // exclude Millimeterchen 
		"(\[TT\])(e-?t)(e[nrsm])?" => "$1{ET}$3";  
		

		"erer([se]?[nm]?)$" => "{ER}{ER}$1";
		"erei(en)?$" => "{ER}ei$1";
		"\[RR\]" => "rr";
		"qu" => { "q", "^[Qq]uos$" }; // quos ego => better use handwriting
		"(?<!sc)([Hh])all" => "[$1]a[LL]";
		"(?<![Aa])e([ao])" => "[E][&E]$1"; // changed [#W] to [E] (hope this doesn't have unexpected consequences
		"ä(-?[ao])" => "[Ä][&A]$1"; // Archäologe
		"ei-?([aeou])" => "[EI][&E]$1";
		"ai-?([aeou])" => "[AI][&E]$1";
		
		"eu-?([aeou]|lich)" => "[EU][&E]$1";
		"ei-?([aeou]|lich)" => "[EI][&E]$1";
		"ai-?([aeou]|lich)" => "[AI][&E]$1";
		"^([Aa])n([bfghklmnprswz][aeiouäöü])" => { "$1[N]$2", ".*[Aa]nker.*" };
		
		"sch(a|ä)ft[#-]?{LICH}" => { "{SCHAFT}{LICH}", "[Gg]e(?:-|\+|#)schäf-?t" };
		"#sch(a|ä)f-?t" => { "#{SCHAFT}", "[Gg]e[-+#]schäf-?t" };
		//"^sch(a|ä)ft(s)?$" => "{SCHAFT}$2"; // hm ... must be placed before decapitalizer!
		"(#{SCHAFT})-?e-?t" => "$1{ET}"; // bewirtschaftete

		"({ER})t(?:u|ü)-?m" => "$1{TUM}"; // altertümlich
		"t(u|ü)-?m(ers?|e-?rin|e-?rin-?nen|s|-?{LICH}e[mnrs]?|{E[NMR]}n?)?$" => { "{TUM}$2", "a-?t(u|ü)-?m(ers?|e-?rin|e-?rin-?nen|s|{LICH})?$", "ge\+s?tüm", "[Kk]os-?tü-?m", "[Ff]ak-?to-?tum" }; // not: Da-tum, Ungetüm, ungestüm
		"^(ein|an|au[fs]|zu|ab|nieder|auseinander)ge([bcdfghjklmnpqrstvwxyz]*[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"^(herein|an|un|gegen|ab|auf)?ge([bcdfghjklmnpqrstvwxyz]+[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"(^|\|)be(un|ur)" => "$1{BE}$2";
		"^beu" => "b[EU]";
		//"^(an)?be(?!(tte?n?s?$)|i|r-?n)" => "$1{BE}";

		"be\+" => "{BE}+";

		"^an-?ti" => { "{ANTI}", "[Aa]n-?ti-?l-?", "An-?ti-?lo", "[Aa]n-?ti-?k(?:$|e)", "[Aa]n-?ti-?qua-?r", "[Aa]n-?ti[-+]?o.?c.?hi", "[Aa]n-?ti-?go-?ne" };
		//"sei-?n" => "{SEIN}";
		"anten$" => "[A]nten";
		"kon\+" => "{CON}"; // unkontrollierbar 
		"(^|\|)(in|un)?[k|c]on([^n])" => { "$1$2{CON}$3", "[Kk]on-go", "[Kk]on-?t(?:os?|en)", "[KkCc]on-?do-?r", "^[CcKk]on-?rad", "^[Cc]on-?flans" };
		"i-?(o|ö)-?nn?" => "{ION}";
		"(^|\|)(un)?er(!n)" => "$1$2{ER}";
		"(^|\|)(un)?zer\+" => "$1$1{ZER}";
		"(^|\|)rück(?=!ens?$)" => "$1{RÜCK}";
		"eien" => "[EI][&E]{EN}";
		"^([Ss]ch|[Zz])ien$" => "$1[I]n";
		"(?<=pb)ien$" => "[&I]{EN}";
		//"je" => "[J][E]";
		"([Nn]ie)t-?z-?(sche)" => "$1[Z@#/.]$2";  // Nietzsche: use diacritics
		"iet" => { "[I]t", "[Nn]iet-?z-?sche" };
		"([^c])(haft)$" => "$1{HAFT}";
		"{ANT}{LICH}" => "en{TLICH}";
		"{ET}t" => "e[TT]";
		
		"da(\+|#|{)" => { "{DA}$1", "[Dd]a-?mas-?t" };
		"^da$" => "{DA}";
		"#da$" => "{DA}";
		"-wo$" => "{WO}";

		"-(.*?)em$" => "-$1{EM}";
		"-(.*?)en$" => { "-$1{EN}", "[Rr](?:i|\[&I\])-?en", "^[Rr]ou-?ens?$", "^[Aa]n-?ci-?en", "^[Dd]ü-?puy-?tren" };


		//"\+(?!\])" => "-";	// reduce + and # to simple - (syllable) in order to simplify following rules
		//"(?<!\[)#" => "-";	// not a good idea ...
		"}-{" => "}{"; 	// it's safe to eliminate - between }{ (and easier for following rules)

		"[Hh]ie?r-?her" => "HIR-HER"; // hierhergekommen

		"(?<!i|#h|v)er\+" => { "{ER}", "[Hh]er[-+]?bst" }; // Studers (hasn't been recognized until now)
		"{LOS}e-?r" => "{LOS}{ER}";

		// optional abbreviations (option1: MAC)
		"tstopt(0)(?:{ER})?#?ba-?r" => "{BAR}";
		"tstopt(0)(?:ge)?[Kk]om-?m?(?!pl|-pl)" => "{KOMM}"; // apply to all  "[Kk]om-?m[ui]" };
		"tstopt(0)(^|\+)[Kk]a-?m(?!-?(?:m|pf))" => { "{KAM}", "[Kk]a-?me-?r" };
		"tstopt(0)[Kk]öm-?m" => "{KÖMM}";
		"tstopt(0)(^|\+)[Kk]au-?f" => "$1{KAUF}";
		"tstopt(0)(^|\+)[Kk]äu-?f" => "$1{KÄUF}";
		"tstopt(0)(^|\+)[Ll]au-?f" => "$1{LAUF}";
		"tstopt(0)(^|\+)[Ll]äu-?f" => "$1{LÄUF}";
		"tstopt(0)(^|\+)[Ll]ie-?f" => "$1{LIEF}";
		
		"tstopt(01)ich-?ts?(en?|{EN})?$" => "{ICHT}$1";
		"tstopt(01)(?<!l)ich$" => { "{ICH}", "^[Ii]ch$", "^ul-?rich" };
		
		// try this rule
		"tstopt(0)}e-?r(in(?:-?nen))?$" => "}{ER}$1";

		"tstopt(01){KOST}[#+-]?e-?t" => "{KOST}{ET}";
 		"tstopt(01){VER}\+?{SICHER}\+?un-?g" => "{VERSICHERUNG}";

		"tstopt(01){KOMM}en{HEIT}" => "{KOMM}{HEIT}";
		"tstopt(01){IG}{ER}" => "{IGER}";
		
		// l, r before consonant
		"tstopt(01)l-?([dfkp])" => "$1"; // heldenhaft, helfen, Geld, tölpelhaft
		
		"tstopt(01)([aeiou]|ä|ö|ü)n-?(sch|st)" => "$1$2"; // Mensch, finster
		"tstopt(01)([aeiou]|ä|ö|ü)l-?(sch|[z])" => "$1$2"; // falsch, Holz
		
		"tstopt(01)r-?([bdgkmns])" => { "$1", "^[Ee]r[#+-]?s-?t", "^[Bb]orst-?li" }; // fern, Argument, Arbeit, fördern, Form, Börse
		//"([Rr])e-?a" => "$1a"; // Reaktion ??? => disactivated

		"tstopt(01)((?:[aeiou]|ä|ö|ü).*?)(?<!i)elt(e(?:[nrsmn]|st)?)?" => "$1{EL}t$2"; // wandelt
		"tstopt(01)el-?(haf-?t|{HAFT})" => "{EL}$1"; // tölpelhaft

		"({#WAR})te-?t" => "$1t{ET}"; // wartet, erwartet

		// special rule for Waren (noun)
		"{#WAR}" => "war"; 
		
	#EndSubSection(shortener)
	#BeginSubSection(demorpher)
		// after shortener delete linguistical markers that are no longer needed (and block spacer later)
		"#bar" => "-bar";
	#EndSubSection(demorpher)
	#BeginSubSection(normalizer)
		
		"rrh$" => "rr";		// Katarrh
		"ü-?ü" => "ü"; 	// rule for swiss german
		// "(?<!a)u-?u" => { "u", "tu-ung" }; // gruusam, Buurli (dialect); not: Genug|tu-ung
		"([Gg]ru)-?u(-?sa-?m)" => "$1$2"; // only dialect: gruusam => all others: write 2x u (Genugtuung, Individuum) 
		"û" => "ü";
		"î" => "i";
		"([Ss]o-?ci)é(-?t)" => "$1-e$2"; // société
		"é" => "e";
		"(?:à|â)" => "a"; // à la Trafalgar, Neufchâtel
		"{EN}(\||\\)" => "EN$1"; // correct endings: if they are inside words they are not applied
		"{EM}(\||\\)" => "EM$1";

		"ç" => "c";
		"[Aa]eo" => "äo";
		//"-\]" => "=]";
		//"\[-" => "[=";
		"=(i|au|eu|äu|ei)" => "|[-]\[0D-]$1";
		//"-(a|e|o|u)" => "|[-]\[0N-]$1"; // that's a weired rule ... it IS a weired rule and has to be disabled!
		"(?<!\|)\[-\]" => "|[-]\";
		//"=\]" => "-]";
		//"\[=" => "[-";
		"'(i|au|eu|äu|ei)" => "|[']\[0D-]$1";
		"'(a|e|o|u)" => "|[']\[0N-]$1";
		//"\|\'" => "[']\";			// temporarily disabled
		//"(?<!\|\[)'" => "|[']\";			// temporarily disabled
		"([Aa]n-?t)h?ro" => "$1ro"; // anthropologischen

		"thr" => { "tHr", "[Tt]hro-?n", "^[Aa]n-?thra-?z" }; // Thriller, not: Thron, Anthrazit
		"([Tt])h(ro-?n)" => "$1$2"; // Thron 
		"th(?!of$)" => { "t", "[Tt]hur", "^[Tt]he$", "[Ww]ie-?sen#?tha-?l", "[Tt]hor.?berg", "^[Tt]hu-?n", "[Gg]oe-?t-?he", "^[Tt]he-?re-?sas?$", "^[Tt]hat$" };
		//"th(?!er)" => "t";
		//"th(?!in)" => "t";
		//"th(?!aft)" => "t";
		"aa" => { "a", "[Aa]ar-gau", "^[Cc]ha-?a-?ma$", "[Ss]a-?a-?da" };
		"ah(-?)(?=[lmnrstz])" => { "a$1", "^[Aa]h-?med$", "[Ss]ahn$" }; // sah'n
		"(ä|Ä)h-?(?=[lmnrstz])" => "$1";
		"uh(-?)(?=[lmnrstz])" => "u$1";
		"o[oh](-)?([flmnrst])" => "o$1$2";
		"ö[oh](-)?([flmnrst])" => "ö$1$2";
		"üh(-)?([flmnrst])" => "ü$1$2"; // bemüht (without h)
		"ieh([tmn])" => "i$1";
		"([Ff]e)h(-?d(?:e|{ET}))" => "$1$2"; // Fehde => can that be generalized and integrated in following rule?, also: befehdete
		"e([eh])(-)?([flmnrst])" => { "e$2$3", "^[Bb]rehms?$", "^[Ff]ehl.?baum$", "(?:[GgSs]|[Ss]t)ehn$", "^[Dd]?[WwRrSs]ehs$" }; // Brehm, Fehlbaum: Name; Wehs, Rehs, Sees => I consider it must be written with h (although the rule in "Interpretation der Systemurkunde", 2.6 is not very clear
		"äh([nrl])" => "ä$1";
		"öh-(?={LICH})" => "ö[H]"; // conserve h
		"öh-?(?![aeiouäöüAEIOU]|{LICH})" => { "ö", "[Hh]öh-" }; // not: Fröhlichkeit
		"ih(-)?([rnm])" => "i$1$2";
		"äht" => "ät";
		"t-?z" => { "z", "[Nn]ie-?t-?z-?sche", "[Aa]cht-?zi-?g" }; // conserve syllable?
		"ph" => "f";
		"ß" => "ss";
		"üh(-)?([lrmn])" => "ü$1$2";
		"([aeiou]|ä|ö|ü)h(#|-|\+)(bar|ba-?re[rsnm]?|sam|sa-?me[rsnm]?|ling|sal|nis)" => "$1$2$3";  // h entfällt vor ungekürzten Nachsilben 
		"([Mm]ü)h((?:-|\|)?se-?li-?g)" => "$1$2";

		"uhr" => "ur";
		
		"^([Ss]i)(es-?ta)" => "$1-$2"; // Siesta
		"(?<!a|a-)ie" => { "i", "fa-?mi-?li-?en?", "^[Ff]rie-?d-?rich$", "[Ww]ien", "[Ss]erie", "[Gg]ra-?zi-?e", "[Pp]e-?t-?er[-+]?si-?li-?e", "[Pp]ier-?re", "[Nn]ie-?t-?z-?sche", "[Ss]tu-?di-?en?$", "^[Jj]u-?li-?e$", "[Aa]-?rien?$", "^[bB]iel$", "^[Ll]i-?li-?e", "^[Ll]i(?:e|é)-?ge-?ard", "[Mm]u-?mi-?en?$" }; // list with exceptions
		"ie" => "i-e"; // separation (2 syllables)
		
		"ühr" => "ür";
		"\(" => "";
		"\)" => "";
		//"\"" => "";
		"z-?z" => { "z", "[Bb]uzz", "^[Nn]iz-?za$" /*, "[Mm]ez-?zo"*/ }; // well, Mezzo, Intermezzo ... according to SI ...
		"ih#" => "i#";

	#EndSubSection(normalizer)
	#BeginSubSection(condenser,#>stage4)
		// the condenser is a shortener used in HF12 and MAC
		// it eliminates "inner final syllables"
		// this must be done in stage4 because it only applies to composed words
		// and | \ must be available
		"tstopt(01){EN}\|" => "|"; // Korkenzieher 

		// include also other "condensations" (could be included in stage 3, but makes more sense here)
		"tstopt(01)en[#+-]?({HEIT}|{SCHAFT}|{HAFT})" => "$1"; // Abwesenheit, Eigenschaft
		"tstopt(01)ens[#+-]?(wer-?t|la-?g)" => "$1"; // verdankenswert, Vermögenslage
		"tstopt(01)ens$" => ""; // Erachtens, Wissens
		"tstopt(01)s(\|{VER}|\|{FREI})" => "$1"; // Gesangsvereins
		"tstopt(01)({KOMMISSION})[Ss]\|" => "$1|"; // Gesangsvereins
		"tstopt(01)äfts\|" => "äft|"; // Geschäftsmodell
		"tstopt(01)({VOLK}|{HAND}{EL})s\|" => "$1|"; // Volksbefragung, Handelsvertreter
		"tstopt(01){LAND}es\|" => "{LAND}|"; // Landesteil
		"tstopt(01)({BUND}|{JED})es\|" => "$1|"; // Bundesstaat, jedesmal
		"tstopt(01)({STAAT})s\|" => "{STAAT}|"; // staatsnahe
		"tstopt(01)([Ee]-?z)es\|" => "$1|"; // Gesetzesvorlage
		"tstopt(01)(ling)s\|" => "$1|"; // Erstlingsausgabe
		
		"tstopt(01)(an-?d|un-?s)-?(?:{ER}\+?s?|er\+?s?)" => { "$1", "[Aa]n[#+-]?d{ER}{ER}" }; // andere, unsere
		"tstopt(01)([Aa]n[#+-]?d){ER}{ER}" => "$1{ER}"; anderer (cut only one -er)
		"tstopt(01){ER}(un-?g)" => { "$1", "{STEIG}{ER}" }; // Verlängerung, not: Steigerung
		"tstopt(01)([Ff]in-?s-?t){ER}\+?n$" => "$1n"; // finstern
		"tstopt(01)([Ff]in-?g){ER}\+?n$" => "$1n"; // Fingern
		"tstopt(01){ER}\+?n$" => { "", "{WÄHL}{ER}" }; // gestern, verlängern
		"tstopt(01)ent-?({LICH})" => { "t$1", "{NAHM}-?ent" }; // hoffentlich, not: namentlich
		"tstopt(01)en-?({TUM})" => "$1"; // Eigentümer
		"tstopt(01)i-?sir" => "ir"; // hochstilisiert
		"tstopt(01)s#?({LOS})" => "$1"; // hoffnungslos
		"tstopt(01)s#?(\|frei|\|{FALL})" => "$1"; // zweifelsfrei, Zweifelsfall
		"tstopt(01){ER}({LICH})" => "$1"; // zögerlich
		 
		"tstopt(01)([aeiou]|ä|ö|ü)(.*?)es$" => { "$1$2", "[Ss]el-?te-?nes", "[Pp]ro[#+-]?zes-?s" }; // gutes, Raumes
		"tstopt(01)e-?nes$" => "es"; // seltenes
		
		"tstopt(01)({HOFF})ung({LOS})" => "$1$2"; // hoffnungslos (cut once more)

		"({KANT})o-?n(a-?l)" => "$1$2";

		// cut endings
		"tstopt(1){GROSS}{ER}" => "{GROSS}";
		"tstopt(1)({EMPFEHL}){EN}" => "$1";
		"tstopt(1)({SOLCH})(es|{E[NM]}|{ER})" => "$1";
		"tstopt(1)en#?{LOS}" => "{LOS}";
		"tstopt(1){KUR}i-?os" => "{KUR}os";
		"tstopt(1)({UNS}){ER}(-?e)" => "$1$2";
		"tstopt(1)(ig)en-?d(?!s)" => "$1"; // not: nirgends
		"tstopt(1)(hö|nä)ch-?(s-?t)" => "$1$2";
		
		// sort of completer in condenser
		"(?<![ae])i-?\|" => "[&I]|"; // result from condenser Medienauftritt

	#EndSubSection(condenser)
	#BeginSubSection(bundler)

		"((?:eu|äu)-?){ER}lein" => "$1[&E][VR@L]ein"; // Bäuerlein
 		"{ER}lein" => "[VR@L]ein"; // Kämmerlein
 
		"([bcdfghjklmnpqrvwxz])t(\|)r" => "$1T$2r"; // Schlachtreihe => don't combine => will be separated later
		
		"([aeiouäöüAEIOUÄÖÜ]\]?)ssch((\[|{)?[aeiouäöüAEIOUÄÖÜ])" => "$1[SS][CH]$2";
		"m-?m-?l" => "[MML]";
		"m-?m-?r" => "[MMR]"; // schlummrigen
		"p-?p-?l" => "[PPL]";
		"p-?p-?r" => "[PPR]"; // plapprig
		"n-?n-?l" => "[NNL]";
		"n-?k-?r" => "[NKR]"; // don't use it in word separations: eg. Lodenkragen
		"ns-?r" => "[NSR]";
		"n-?g[-|]?r" => "[NGR]"; // umfangreich
		"n-?k-?l" => "[NKL]";
		"ns-?l" => "[NSL]";
		"n-?g-?l" => "[NGL]"; // Jüngling, jonglieren
		"r-?r-?l" => "[RRL]";
		"n-?l" => "[NL]";
		"n-?d[-\|+]?r" => "[NDR]";
		"t-?t-?l" => "[TTL]"; 
		"\[TT\](\+|-|\|)?r" => "[TTR]"; // necesary because of bundler rule in shortener ... \+ = Wettrennen
		"t-?t(-|\|)?r" => "[TTR]"; 
		"f-?f-?l" => "[FFL]"; 
		"f-?f(-|\|)?r" => "[FFR]"; 
		"[kc]-?k-?l" => "[CKL]"; // akklimatisieren
		"[kc]-?k-?l" => "[CKR]"; 

		"nd-?l" => "[ND@L3]";
		"sch-?l" => "[SCHL]";
		"schm" => "[SCHM]";
		"schw" => "[SCHW]";
		"sch-?r" => "[SCHR]";
		"sch\|r" => "[SCH]\\[AR]"; // kirschrot ... according to certain manuals, separation is better (..)
		"(?<!n)ndr" => "[ND@R]";
		"sch" => "[SCH]";
		"(?<!m)m-?p-?f-?r" => "[MPFR]"; // everything goes ha ha ... :)
		"(?<!m)m-?p-?f-?l" => "[MPFL]";
		"(?<!m)m-?p-?f" => "[MPF]";
		"s-?t[\|-]?r" => "[STR]";
		"(?<!n)nkr" => "[NKR]";
		"(?<!n)nk-?l" => "[NKL]";
		"(?<!s)st-?l" => "[STL]";
		"(?<!s)s-?p-?l" => "[SPL]"; // Knösplein
		"sp-?r" => "[SPR]";
		"pf-?l" => "[PFL]";
		"pf-?r" => "[PFR]";
		"ch[-\|+]?r" => "[CHR]";
		"ch-?l" => "[CHL]";
		"p-?f" => "[PF]";
		"(ck|k-?k)(\\|\||-|\+|#)?r" => "[CK@R3^]";
		"(ck|k-?k)" => "[CK]";
		"s-?s-?l" => "[SSL]";
		"s-?s" => "[SS]";
		"n-?n" => "[NN]";
		"s-?t" => { "[ST]", "[Gg]rin-?s-?t" };
		//"^eins" => "[EI][N]s";
		"ch" => "[CH]";
		// theoretically it is possible to combine h|r, but the result isn't beautiful (see: Sehröhren)
		// separate them in this case
		"h\|r" => "[H]\\R";
		"h[-\|+]?r" => "[HR]";
		"s-?p" => "[SP]";
		"(?<!#)n-?s" => "[NS]";
		"b-?l" => "[BL]";
		"c-?l" => "[CL]";
		"d-?l" => { "[DL]", "^[Dd]l$" }; // not: dl (abbreviation)
		"f-?l" => "[FL]";
		"ngl" => "[NG@L3]";
		//"^[Aa]n(-)?g(?!r)" => "AN-G"; // angestrengt: an is not recognized as a word => doesn't work: angst
		"n-?g(?!r)" => "[NG]";
		"g-?l" => { "[GL]", "g-?lo-?se?[rnms]?" }; // not: sorglose
		"k-?l" => "[KL]";
		"l-?l" => "[LL]";
		"m-?l" => "[ML]";
		"n-?l" => "[NL]";
		"p-?l" => "[PL]";
		"(?<!^[Ee]|ve|^[Hh][Ee])r[-+]?l" => "[RL]"; // Perle, not: erlernten, Ehrverletzung, herliefen
		"ei-{ER}l" => { "[EI][&E][RL]", "{ER}la", "{ER}le-g" }; // zweierlei
		"(?<!^){ER}l" => { "[RL]", "{ER}la", "{ER}le-?[gb]", "{ER}lä" }; // Chaschperli, not: wiedererlangen, auferlegen, mitzuerleben, unerlässlich
		"s-?l" => "[SL]";
		"t-?l" => "[TL]";
		"v-?l" => "[VL]";
		"w-?l" => "[WL]";
		"x-?l" => "[XL]";
		"y-?l" => "[YL]";
		"z-?l" => "[ZL]";
		"b[-\|+]?r" => "[BR]";
		"c-?r" => "[CR]";
		"d[-\|]?r" => "[DR]";
		"f(-?|\+|\|)r" => "[FR]";
		"(g)\|(ro-?t)" => "$1\\$2"; // goldigroten ... separate only "rot" for the moment
		"g(-?|\||\+)r" => "[GR]"; // also: wegreitenden
		"k-?r" => "[KR]";
		"l[-\|]?r" => "[LR]";
		//"(?<!m)m[-\|+]?r" => "[MR]"; // not: schlummrigen
		"m[-\|+]?r" => "[MR]"; // not: schlummrigen => make 3-letter bundler above
		"{AN}\+?r" => "a[NR]"; // dissolve prefix
		"n[-\|+]?r" => "[NR]"; // n+r even if two separate words or morphems!
		"p-?r" => "[PR]";
		"r-?r" => "[RR]";
		"s-?r" => "[SR]";
		"t-?t" => "[TT]";
		"t(-|\|)?r" => "[TR]"; // even if two words!? => no! see rule at beginning of bundler!
		"(?<!\[)v-?r" => "[#VR]"; // use special name vor v+r, since [VR] can be confused with "vocal r"
		"w-?r" => "[WR]";
		"x-?r" => "[XR]";
		"y-?r" => "[YR]";
		"z-?r" => "[ZR]";
		"f-?f" => "[FF]";
		"m-?m" => { "[MM]", "^[Mm]m$" }; // not: mm (abbreviation)
		"p-?p" => "[PP]";
		"n-?d" => "[ND]";
		"n-?k" => { "[NK]", "[Aa]n-?kunft" };
		"zw" => { "[ZW]", "[Bb][Zz][Ww]", "[Kk]urz-?wa-?r" }; // no zw in bzw.
		"ou-au" => "[&O]A[&U][AU]"; // Rouault
		//"e-au" => "E[&E][AU]"; // Beauvais => transcribe it directly in the text 
		"au" => "[AU]";
		"(Ä|ä)u" => "[EU]"; // not: Jubiläum
		"[Ee]u" => "[EU]";
		"uei" => "A[&U][EI]"; // Argueil
		"ei" => "[EI]";
		"^na-?i-?v" => "na[&A]iv";
		"ai" => { "[EI]", "[Mm]ain", "[Tt]ail-?l", "^[Mm]ai", "[Ww]ai-se", "[Mm]a-?rais", "[Mm]e-?dail-?le", "mi-?li-?tai-?re", "[Ll]ai-?(?:e|{EN})", "[Ww]ai-?s", "[Ff]ai-?re", "[Kk]ai-?s{ER}", "[Aa]i-?g-?le-?mont", "[Dd]e-?tai", "^[Mm]rai-?{ER}s?$", "^[Kk]aid$", "^[Nn]e-?wa-?kais?$", "^[Mm]i-?c-?hai-?l", "[Gg]er-?vais$", "^[Kk]ais?$", "^[Hh]o-?mais$", "^(?:[Ff]r|\[FR\])a-?n-?(?:c|ç)ai-?s", "[Vv]ol-?tai-res?$", "(?:^|\\)[Ss]aint", "^[Rr]ai-?n", "[Hh]ai-?n" };
		"ai-{ER}" => "[AI][&E]{ER}"; // Mraier (name)
		"ai" => "[AI]";
		"\[AI\]-?{EN}" => "[AI][&E]{EN}";

		"tstopt(01)n-?z" => "[NZ]";

	#EndSubSection(bundler,=:std)
	#BeginSubSection(contractor)
		// shortens abbreviations
		"tstopt(01){ALL}{ER}\|?{DING}" => "{ALL}{DING}";
	#EndSubSection(contractor)
	#BeginSubSection(relancer1)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		"(\[.*?\])" => "strtoupper()";
	#EndSubSection(relancer1)
	#BeginSubSection(gluer)
		// glues words together that should not be separated
		"^([Ww]elt)\|({ALL})" => "$1-$2"; Weltall
		"^([Ww]{HEIT})\|({AUS})(?!{GE}|\+{GE})" => "$1-$2"; // weitaus, not: weitausgeschnittene
		"t\|({HAB}{ER})" => "t-$1"; // Machthaber
	#EndSubSection(gluer)
	#BeginSubSection(transcriptor)

		"a-u" => "A[&A]U"; // Kapernaum

		"(\[EU\])-?({HEIT})" => "$1[&E]$2"; // Neuheit

		"ô" => "O"; // Ventôse

		"({ION}-?)l(\[EI\]n)" => "$1[@L]$2"; // Portiönlein

		"{IST}\|{BE}" => "{IST}\\{BE}"; // Istbestand

		"{LICH}-?t" => "{LICH}[&T]"; // versinnbildlichte

		"^\[SS\](.)" => "[SS@#/]$1"; // ssä

		// special: ich
		"^[Ii]\[CH\]($|\|)" => "[ICH]$1"; // ich, ich's

		// copied from separator
		"(l-?te-?s{ER})\|" => "$1\\"; // Malteserritter
		"{HEIT}{ET}[Ee][Ss]$" => "[&EIT&E][&TES]"; // begleitetes
		"{ET}[Ee][Ss]$" => "[&ETES]"; // getestetes
		"\|({DEM})\|({SELB}{EN})" => "\\[#4-]$1$2"; // ebendemselben

		////////////////////////////////////////////////////////
		// 1st step: transform all single (lower case) tokens //
		// depending on context: insert directly printable    //
		// tokens wherever necessary
		////////////////////////////////////////////////////////

		
		"{HEIT}e\[NS\]" => "[&EITNS]";
		"{HEIT}{ET}" => "{HEIT}[ET3/4]";
		"i^" => "[&I]";
		"i(\||\\)" => "[&I]$1";

		// initial groups
		"^[Oo]-?u-?e" => "[0N-][&O]A[&U]E"; // Oued
		"^[Oo]-?u-?a" => "[0N-][&O]A[&U]A"; // Ouargla
		"^o\\" => "[0N-][&O]";
		"^oa" => "[0N-][&O]A"; // Oase
		"^o" => "[0N-][O]";
		//"^r" => "[AR]"; // is done later
		"^äo" => "[0N-][Ä][&E][O]";
		"^ag" => "[0N-][A][G]";

		// vowel combinations
		"ou($|\\\[=|=)" => "[#N][&O][#NS][&U]$1";   // wou (dialect)
		"ou-?e" => "[&O]A[&U]E"; // Rouen, Rouener
		"u-e" => "[#NS][&U]E"; // mues (dialect)
		"a-i-?a$" => "[A][&A][&I][A][&A]"; // Bedjaïa
		"ou-?i-?a" => "[&O]A[&U][&I][A][&A]"; // Mouiat el Kaid
		"u-?i-?a$" => "A[&U][&I][A][&A]"; // Seguia
		"i-?a$" => "[&I]A[&A]"; // via
		"i-?ö$" => "[&I]E[&O]"; // adieu (adiö)
		"a-i" => "A[&A]I"; 
		"o-?a" => "[&O]A";
		"o-?i" => "[&O]I";
		"ä-?i" => "[Ä][&E][I]";
		"o-?e" => "[&O][E]";
		"i-?o$" => "[&I][&O]";
		"e-?a" => "E[&E]A";
		"e-u" => "E[&E]U";
		"o-?u-?a" => "[&O]A[&U]A"; // Merouan
		"u-?a" => "A[&U]A";
		"ou-?i" => "[&O]A[&U]I"; // Louise
		"u-?i" => "A[&U]I";
		"e-e" => "E[&E]E";
		"i-e(?!r)" => "[&I]e";
		"a(-?)([aeo])" => "A[&A]$1$2";
		"ü(-?)([aeio]|ä|ö|ü)" => "[#WS][&U]$1$2";

		// Aufstrich-t	
		"{HAB}-?t" => "{HAB}[&T]"; // handhabte			
		"([bcdfghjklmnpqrvwxyz])(-)?t" => "$1$2[&T]";
		"({HIN})[-+]?t" => "$1[&T]";
		"\[(CH|SCH|NS)\]-?t" => "[$1][&T]";
		"\[(CH)\]-?\[TR\]" => "[$1][&TAR5]";
		"\[(BB|DD|FF|GG|CK|LL|RR|MM|NN|NK|PP|RR|SS|PF|MPF|NG|ND)\]-?t" => "[$1][&T]";
		"([bcdfghjklmnpqrvwxyz])(-?)\[TL\]" => "$1$2[&T@L3]";
		"([bcdfghjklmnpqrvwxyz])(-?)\[TR\]" => "$1$2[&T@R]";
		"{LICH}t" => "{LICH}[&T]";
		//"(r\+?)t" => "$1[&T]";
		
		// Sheltopus (name)
		"\[&T\]-?o-?p" => "[&T&E]OP";

		// &t&i
		"\[&T\]i(-?(?:[aeiou]|{E[NM]}|ä|ö|ü))" => "[&T&I]$1"; // Laurentius, Aktien, partial, prätentiös

		// -ter
		"\[&T\]e-?r" => "[&T][VR]";

		// heit + l/r
		"{HEIT}-?l" => "[&EIT@L3]";
		"{HEIT}-?r" => "[&EIT@R]";

		// heit + i
		"{HEIT}-?i-?\[SCH\]" => "[&EIT&E]I[SCH]"; // majestätisch
		"{HEIT}-?i(?!g|-g)" => "[&EIT&I]"; 
		"{HAIT}-?i" => "[&AI@#/.][&EIT&I]"; // Haiti (diacritics)
		"{HAIT}-?e" => "[#4][&AI@#/.][&EIT&E]e"; // Saite (diacritics)
		"{HAIT}-?{EN}" => "[#4][&AI@#/.][&EIT&E]{EN}"; // Saiten (diacritics)
		"{HAIT}-?{ET}" => "[#4][&AI@#/.][&EIT&E][ET3/4]"; // besaitet (diacritics)

		// yr: no combined token
		"\[YR\]" => "[Y][AR]";

		"\[&T\]er" => "[&T][VR]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[&T\]\[EI\]$" => "[&T][&E][#W][-EI]";

		"^\[EI\]$" => "[0D-][EI][&E]";
		"\[EI\]$" => "[#W][-EI]";
		"\[&T\]\{HEIT\}" => "[&T][&E]{HEIT}";
		"\[EU\]({?)E" => "[EU][&E]$1E";
		"\[&T\]\{LICH\}" => "[&T-1][H]";
		"\[&T\]u\[NG\]" => "[TUNG]";
		"T}er" => "T}[VR]";
		"\[&T\]\i-?g" => "[&T-1][G]";
		"\[&T\]{ET}e" => "[&T][&E][ET3/4][&E]e"; // behauptetest
		"\[&T\]{ET}" => "[&T][&E][ET3/4]";
		"\[&T\]e$" => "[&T][&E][-E]";
		"\[&T\]a" => "[&T][&E]A";
		"\[&T\]\[?o\]?($|\|)" => "[&T&O]$1";
		"\[&T\]o$" => "[&T][&E]O";
		"\[&T\]u([aeiouäöü])" => "[A][&T&U]$1";
		//"\[&T\]" => "[&T][&E]U";

		"\[&T\]\[?i\]?$" => "[&T&I]";
		"\[&T\]\[?&I\]?" => "[&T&I]";

		"\[&T\]i" => "[&T][&E]I";
		"erer$" => "[VR][#N][VR]";
		"eres$" => "[VR][E][S]";
		"([aeiouäöü])r" => "$1[VR]";
		//"([AEIOUÄÖÜ])R(?![D?}\]])" => "$1[VR]";
		//"{DU\[VR\]CH}" => "{DURCH}"; // du bricolage ...
		"(\[^@\])r" => "$1[AR]";
		"}r" => "}[AR]";
		//"^s" => "[0n-][S]";
		//"^n" => "[0n-][N]";
		"(^|\\)s" => "$1[S=]";
		"^n" => "[N=]"; // try new variant


		"u([aeiouäöü])" => "[#NS][&U]$1";
		
		"oi" => "[&O][I]";
		"^a($|\|)" => "[0N-][A][&A]$1";
		"i-a($|\|)" => "[&I][A][&A]$1"; // Sepiagemälde
		"öa($|\|)" => "[E][&O][A][&A]$1"; // Euböa
		"a($|\|)" => "[A][&A]$1";
		"({SCHAFT}){ET}e$" => "$1[ET3/4][&E][-E]"; // bewirtschaftete

		"{ET}e$" => "[ET][&E][-E]";
		"{HEIT}\[ET3\/4\]" => "{HEIT}[&E][ET3/4]";
		"\[ET3\/4\]e$" => "[ET3/4][&E][-E]";
		"{HEIT}e(?!s)" => "{HEIT}[&E][-E]";
		"\[-E\](.*?$)" => "[E]$1";
 
		"^e$" => "[0N-][E][&E]";
		"äe$" => "ä[&E][-E]";
		"e$" => "[-E]";
		
		"^i($|\\)" => "[0N-][#5][&I]$1";
		"i($|\\)" => "[#5][&I]$1";
		"io($|\\)" => "[&I][&O]$1";
		"o($|\\)" => "[#N][&O]$1";
		"u$" => "[#NS][&U]";
		"i-?ä$" => "[&I][Ä][&A]"; // Mariä
		"ä$" => "[Ä][&A]";
		"ö$" => "[E][&O]"; // Bergeshöh
		"ü($|\|)" => "[Ä][&U]$1"; // Menükarte
		"^(?<!\])\[#(N|NS|WS|W|WS)\]" => "[0N-][#3][#$1]"; // can't start with distance only => add dummy token
		"\[EU\]$" => "[EU][&E]";
		"\[AU\]$" => "[AU][&E]";
		"^i\[(S?CH|ZW?)" => "[0N-][I][$1";
		"^iz" => "[0N-][I][Z]";
		"öo" => "[#W][&O][O]";
		"a" => "A";
		"e" => "E";
		"i(-?{ER})" => "[&I]$1"; // Spanier 
		"i" => "I";
		"o" => "O";
		"u" => "U";
		"ä" => "Ä";
		"ö" => "Ö";
		"ü" => "Ü";
		"\[AU\]-?({?E)" => "[AU][&E]$1";
		"b" => "B";
		"c" => "C";
		"d" => "D";
		"f" => "F";
		"g" => "G";
		"h" => "H";
		"j" => "J";
		"k" => "K";
		"l" => "L";
		"m" => "M";
		"n" => "N";
		"p" => "P";
		"q" => "Q";
		"(\[LL\]-?)r" => "$1[AR]"; // vollre
		"(^|\+|\|])r" => "$1[AR]";
		"\|r" => "|[AR]";
		"\|r" => "|[AR]";
		"({VOR}[-+]?)r" => "$1[AR]";
		"\[RR\]r" => "[RR][AR]"; // Arrr
		"{HIN}-?r" => "{HIN}[AR]"; // Hinritts
		"r" => "[VR]";
		"s" => "S";
		"(?<![|+])t" => "T"; // why is | included ?! => Arbeitstherapie
		"v" => "V";
		"w" => "W";
		"x" => "X";
		"y" => "Y";
		"z" => "Z";

		"I(-?){EN}" => "[&I]$1{EN}";
		"I(-?)(Ä|Ö|Ü|[AEOU])(?!N)" => { "[&I]$1$2", "{[ZS]IEH}", "{IELL}", "{LIE[GF]}", "{INDIES?", "{SIESICH}", "{LIESS}", "{BEISPIEL}", "VIEL}", "{HIER}", "{SIE}", "{FIEL}", "SCHRIEB", "BRIEF", "WIRSIE", "TRIEB", "SOWIESO", "GEHENSIE", "WIRKÖNNENSIE", "SCHIEN", "SCHLIESS", "WIES", "IEDER", "EMPFIEHL", "ISIER", "INDUSTRIE", "DIEN", "LIEFER", "FRIED", "SCHIED", "STIEG", "RIET", "BIET", "ZWIE"  }; // very unclean rule ...

		"\[&T\]-?{HAB}" => "[&T34]{HAB}";
		"\[EU\](-?){(ER|E[MN])}" => "[EU]$1[&E]{$2}";

		"\[VR\](\||\+|-)?\[AR\]" => "[VR+AR]";
		"({HEIT}{ER})\|(\[AR\])" => "$1\\$2"; // Weiterreise
		"{ER}\|\[AR\]" => "[VR+AR]";

		// Aufstrich-t after {ER}
		"^{ER}T" => "{ER}[T]";	// no Aufstrich-t at beginning!
		"(\|){ER}T" => "$1{ER}[T]";	// no Aufstrich-t at beginning!
		"{ER}T" => "{ER}[&T]";

		// &t after wieder
		"{WIDER}-?T" => "{WIDER}[&T]";

		"{ET}E" => "{ET}[&E]E";

		"\[&T\]ES" => "[&TES]";
		"\[&T\]-E" => "[&T][&E]E";

		// heit + unterlänge
		"{HEIT}-?\[(SCH|CH|Z|ZW)\]" => "{HEIT&UL}[$1]"; // heitul
		"\[&T\]\[?E\]?\[NS\]" => "[&TNS]";

		"{ER}\+t" => "{ER}[&T]";
		
		"tstopt(01)\[&T\]({MENT2})" => "[&T&E]$1";
		"tstopt(01)({MENT2})(?!\[)(Ä|Ö|Ü|AU|EU|EI|[AEIOU])" => "$1[O][&E]$2";
		
		"Ä-?({E[MN]})" => "Ä[&E]$1"; // Pyrenäen, säen
		"\[&T\]-?A-?\[VR\]" => "[&T&E]A[VR]"; // El-Kantara
		"\[&T\]-?V" => "[&TV]"; // Hauptvizinalweg
 
	#EndSubSection(transcriptor)
	#BeginSubSection(separator)
		// separates two words in one
		// there must be a possibility to disable this function manually (i.e. via input form)!

		// avoid certain separations
		"{UNTER}\+\|" => "{UNTER}+"; // Pikee-Unterröcke
		"(^|\||\\)([Uu][Mm])\|" => "$1$2+"; // Kaltwasser-Umschläge
		
		"({ANTI})\|(\[AR\])" => "$1\\$2"; // antireligiös

		"(\[PF\])\|({ZER})" => "$1\\$2"; // Kopfzerbrechen

		// dont separate:
		"{ÜBER}\|" => "{ÜBER}"; // don't separate
		"\|({WERD})" => "\\$1"; // Wachwerden
		"{GEGEN}\|" => "{GEGEN}"; // don't separate

		// hinterher => eliminate |#
		"\|#([Hh][Ee])" => "$1";

		"tstopt(8)E\|" => "E\\"; // this is a new era of separation ... (I don't like it ...)

		"^TU\|{NICHT2}\|" => "TA[&U]\\{NICHT2}\\"; // Tunichtgut

		//"(.{2,}){SEIN}([Ss])?" => "$1\\{SEIN}$2"; // Beisammensein
		"\|{NICHT2}\|" => "\\{NICHT2}\\"; // Vergissmeinnichtaugen

		//"(EITS\])\|" => "$1\\";
		"\[&T\]\|(\[?(M)\]?)" => "[&T]\\$1"; // write separatedly (2 words)
		"(\[&T\])\|(\[ST\])" => "$1\\[#2]$2"; // Luftstösse
		"(\[&T\])\|(\[KL\])" => "$1\\[#2]$2"; // zurechtkleben
		"(\[&T\])\|(\[PR\])" => "$1\\[#3]$2"; // Kraftprobe
		"\[&T\]\|([FP])" => "[&T]\\[#2]\\$1"; // zartfühlend
		"\[&T\]\|(?!NI|{)" => "[&T]\\"; // write separatedly (2 words) (not for -nis(se)
		"\[&T\]\|({AN})" => "[&T]\\$1"; // write separatedly (2 words) - prefix an-
		
		"{HEIT}(U\[NG\]S)\|([TP])" => "{HEIT}$1\\[#4]$2"; // Zeitungspapier - add additional spacing
		
		"{HEIT}(S?)\|(\[ST\])" => "{HEIT}$1\\[#5]$2"; // Arbeitsstunde (separate with additional spacing)

		"{HEIT}(S?)\|([tTPFK]|\[FR\])" => "{HEIT}$1\\[#4]$2"; // write separatedly (2 words) - add additional spacing
		"{HEIT}(S?)\|(\[?[DP]\]?)" => "{HEIT}$1\\[#5]$2"; // Gesundheitsdirektion, Gesundheitsproblem
		"{HEIT}(S?)\|" => "{HEIT}$1\\"; // write separatedly (2 words)
		"(\[&T@R\])O\|" => "$1[&O]\"; // Elektrotechniker
		"(\[&T@R\]\[A\]\[&A\])\|" => "$1\"; // Extrareise

		"(U\[CH\]\[&T\]S)\|M" => "$1\[#4]M"; // Ausfluchtsmanöver
		"{HEIT}((?:\[&E\])?\[E\]\[ST\])\|" => "{HEIT}$1\\"; // weitestverbreitete
		"(\[&T])\|?(#?{SCHAFT})(S)?\|" => "$1$2$3\\"; 
		"\[&T\]{EN}\|" => "[&T]{EN}\\"; // Präsidentenwahl
		"\[&T\]S\|V" => "[&T]S\\[#2]\\V"; // Gerichtsvollzieher
		"\[&T\]S\|\[(FR|ST)\]" => "[&T]S\\[#5]\\[$1]"; // Geschäftsfräuleins, Zufluchtsstätte
		"\[&T\]S\|([F])" => "[&T]S\\[#5]\\[$1]"; // Geschäftsführer
		"\[&T\]S\|" => "[&T]S\\";
		"\[&T\]\|{ER}" => "[&T]\\[0N-][#4]{ER}"; // furchterregenden
		"(\[&T\]ON)\|" => "$1\\";
		"(\[&T\]O\[NS\])\|" => "$1\\";
		"(\[RR\].*?)\|" => { "$1\\", "[Ii]rr(?:-|\|)?sinn" }; // Karrierepläne (separate after rr)
		"\[&T\]E\|" => "[&T]E\\";  // Produktepalette 
		"({HEIT}{ER}|\[&EITVR\]|{HEIT}\[VR\])\|(\[?[Ff])" => "$1\\[#5]$2"; // weiterführen
		"({HEIT}{ER}|\[&EITVR\]|{HEIT}\[VR\])\|" => "$1\\"; // heiterhellen 

		"(\[&T\]\[&E\]AG)\|(\[(?:PR)\])" => "$1\\[#4]$2"; // Sonntagprogramm
		"(\[&T\]\[&E\]AG)\|" => "$1\\"; // Sonntagmorgen
		"(\[TUNG\]S)\|F" => "$1[#3]\\F"; // Unterhaltungsfonds
		"(\[TUNG\]S)\|B" => "$1[#3]\\B"; // Verwaltungsbüro
		"(\[TUNG\]S)\|" => "$1\\"; 
		"(\[&T\]{ION}S)\|([GP]|\[(?:PL|PR)\]|{GE})" => "$1\\[#4]$2"; // Lektionsplan, Sektionsprotokoll, Lumbalpunktionsgerät
		"(\[&T\]{ION}S)\|" => "$1\\"; // -tions|.. 
		"tstopt(6)\[&T&I\]\|" => "[&T&I]\\"; // Sentimentalität
		"tstopt(7)\[&T&I\]\\MEN" => " [&T&E][#2][DOTTED25D][#5]IMEN"; // Sentimentalität
		"(\[S=\]EN)-?\[&T&I\]\|(MEN)" => "$1[&T&E]i$2"; // if opt8 not selected: rewrite Sentimentalität
		"(\[&T&I\]\\)(MEN)" => "$1[=]\\$2"; // Sentimentalität: if separated, add =


		"tstopt(6)(WI\[RR\]\[&T\])(E\[ST\]\[-E\])" => "$1\[0N-]$2"; // verwirrteste

		"\[&T\]\[EI\]\|\[EI\]" => "[&T][&E]E[-EI]\\[0D-][EI]";  // parteieigener
		"\[&T\]\[EI\]\|" => "[&T][&E]E[-EI]\\"; // Parteiprojekte

		"\[&T\](\[?(M)\]?)" => "[&T-1]$1";
		//"E\|([ABCDFGHIJKLMNPQRSTVWXZ])" => "[-E]\\$1"; // separate (2 words)
		//"(\[&T\]\[VR\]-?)\[&T\]\[&E\]" => "$1[T]"; // can't do that for Winterthur (if not recognized as two words!)
		"\[&T\]\[&E\]\[-E\]\|" => "[&T][&E][-E]\\";
		"({HEIT}{ER})\|" => "$1\\";
		"({HEIT}{EN})\|" => "$1\\";

		"\\(\[#.\])?{ÜBER}" => "\\$1[0N-]{ÜBER}"; // needs dummy token if separated

		"(\[(EI|AU|EU)\])\|" => "$1[&E]|";
		"{ET}\|" => "{ET}\\";
		"{ET}{EN}\|" => "{ET}{EN}\\";
 
		"(\[RR\]{E[NM]})\|" => "$1\\";

		// -&ter
		"(\[&T\]{ER})\|" => "$1\\";
		"{HIN}\[&T\]\[VR\]\+" => "{HIN}[&T][VR]\\"; // special case (try it out)

		// \n and \s
		"\\N" => "\\[N=]";
		"(?<!\['\])\\S" => { "\\[S=]", "[Ii]rr(?:-|\|)?sinn" };  // not separated (external correction)

		// ver-
		"\\{VER}" => "\\[0N-]{VER}";

		// n- and s- where transformed to [N=] and [S=] by transcriptor
		// now, if they don't get separated (via \) they must be retransformed to normal n and s
		//"\|\[([NS])=\]" => "|[$1]";

		// Kreuzverhör is a very rare word: ^z offers an alternative exit point; ver- asks for one
		// and voilà: Murphy hits (and whatever can go wrong goes wrong:)
		// separate the word in order to get around the problem ...
		// (let's hope there aren't many words like that ... :)
		"(\[EU\]Z)\|({VER})" => "$1\\[0N-]$2";
		// hm ... Murphy hit's again: not a very good solution ... 
		// ^z is written with Fussschlaufe (bug in SE?)
		// something is odd with this \ anyway: doesn't behave like | in SmoothenEntryExitPoints either

		// more general rule: if word contains &t => separate
		"^(.*?)(\[&T\])([^|\\]*?)\|({(?:GE|ZU)})" => "$1$2$3\\[#5-]\\$4"; // pflichtgemäss (use space below [&t] shifting [g] to the left
		"^(.*?)(\[&T\])([^|\\]*?)\|(?!{SCHAFT})" => "$1$2$3\\[#5]\\"; // ex: Manteltaschen, not: holterdipolter

		// sein => separate
		"\|{SEIN}" => "\\{SEIN}";


		"(E-?HE)\|?({DEM})" => "$1\\[#9-]$2" }; // separate ehedem 

		
		// if word is not separated => write vowels at the end of each word
		"E\|" => "E[&E]";
		"(\[FR\]\[EI\])\+" => "$1[&E]+"; 	// special case Freizeit (separated by +)
		
		// Raupenvernichtung
		//"{EN}\|{VER}" => "EN|{VER}"; 	// if not separated by \ => write -en as en
		"{EN}\|{VER}" => "{EN}\[0N-]{VER}"; 	// separate

		"(\[AR\]E\[CH\]\[&T\])\+Z" => "$1\Z";  // rechtzeitig

		"\[AU\]#{SO}$" => "[AU][&E]\\{SO}"; 

		"(?<!\[#6-\]\\)\[\/\](?!\[#6-\])" => "\\[/][#6-]\\[/]\\";
		"{EN}\\H" => "{EN}\\[#4]H"; // Irrenhaus

		"{TUM}([^|]*?)\|" => "{TUM}$1\\"; // Hauseigentümerversammlung
	
		// for HF01
		"tstopt(01)(}\+?|\|){LIEG}" => "}\\{LIEG}";
		"tstopt(01)({ICHT})\|({UNTER})" => "$1\\$2";

		"tstopt(01)({LEBEN}\|?{MITTL})\|" => "$1[#4]\\"; Lebensmittelkonzern
		"tstopt(01)\|({KOMMISSION})" => "\\$1";
		"tstopt(01)\|({VER})" => "\\$1"; // Lastschriftverfahren
		"({EN})\|(\[AR\])" => "$1\\$2"; // Ulmenreihen
		"(\[(?:EI|AI|EU|ÄU)\])\[&E\]\|(\[AR\])" => "$1\\$2"; // Zweiräderkarren
		"(\[&E\])\|(\[AR\])" => "$1\\$2"; // Blauröcke

		"({DA}).?({SEIN})" => "$1\\$2"; // Dasein 
		
		"({HEIT}U\[NG\]S)\|A" => "$1\\[#5][0N-]A"; // Zeitungsartikel
		"({HEIT}U\[NG\]S)\|" => "$1\\[#5]"; // Zeitungsgeschichte
		"(?<!&)[Oo](\\)" => "[&O]$1"; // Hobby-Rennvelofahrer

		"(\[NK\])\|(\[AR\])" => "$1\\$2"; // Denkreise

		"\[(?:NS|ns)\]\|\[(?:AR|ar)\]" => "[NS]\\[AR]"; // Namensregister
	
		// if one word is separated => separate all the words!
		"\|(.*)\\" => "\\$1\\";
		"\\(.*)(?<!\[EI\]N|AN)\|" => "\\$1\\"; // do not separate prefixes!

		"(\[&TG\]|\[&T-1\]\[G\])\|" => "$1\"; // giftiggrünen

		"(\[&I\])\|(\[AR\])" => "$1\\$2"; // Kavallerieregimenter

		"(\[RL\]{EN})\|" => "$1\\"; // Perlenhalsbänder

		"(\[(?:NK|NS)\])\|({VER})" => "$1\|[#2]\\$2"; // Bankverwaltung
		"(H)\|({VER})" => "$1\|[#2]\\$2"; // Sehvermögen
		"X\|(\[AR\])" => "X\\$1"; // Boxring
		
		// moved from rewriter (below)
		"\|\'\|" => "\'\"; // z'Morge => this rule should be in separator! => move it there (for: d'Afrique)


		"({HEIT}\[&E\])\[E\]\|" => "$1[-E]\\"; // beiseiteschieben

	#EndSubSection(separator)
	#BeginSubSection(completor)
		// logically speaking the completor is part of the transcriptor
		// i.e. it defines how tokens have to be written
		// but in order to be more systematic and structured we separate this part
		// specific function of completor: adds dummy tokens at beginning and end of a word
		// for tokens that need this "completion" (e.g. n, s at beginning; vowels at the end etc.
		
		"[Aa](?:â|Â)" => "A[&A]-A"; // Bechaâr
		"^{ION}" => "[0D-]{ION}"; // Ion, ionisieren, Ionosphäre etc.

		"(Ä|ä)-[Uu]" => "[Ä][&A][U]"; // Jubiläum
		"I-?\[AU\]" => "[&I][AU]"; // miauen
		"\[EU\]-?I" => "[EU][&E]I"; // Neuigkeiten

		"U-?{ER}" => "[A][&U]{ER}"; // Grosstuerei, Geheimnistuerei
		"(?<![&-AEIOU])\[?([A])\]?$" => "[$1][&$1]";
		"(?<![&-AEIOU])\[?([IOU])\]?$" => "[#N][&$1]";

		//"(?<![&-AEIOU])\[?([AU])\]?(\||\!|\?|\.|\:)" => "[A][&$1]$2"; // punctuators are present if they are inside a word!
		//"(?<![&-AEIOU])\[?([E])\]?(\||\!|\?|\.|\:)" => "[E][&$1]$2"; // punctuators are present if they are inside a word!
		//"(?<![&-AEIOU])\[?([IO])\]?(\||\!|\?|\.|\:)" => "[#N][&$1]$2"; // punctuators are present if they are inside a word!

		"^([NS])" => "[0N-][$1]";
		"^\[([NS])\]" => "[0N-][$1]";
		"[Uu]-?{HEIT}" => "A[&U]{HEIT}"; // Kontinuität
		"^(P|VA-?\[VR\])[Ii]-?{HEIT}" => "$1[&I]{HEIT}"; // Pietät, Varietät
		"E{HEIT}" => "E[&E]{HEIT}"; // Spontaneität
		"(?<!&)([AEOI]){HEIT}" => "[&$1]{HEIT}";
		"^([{\[]&?EIT)(?!R)" => "[0N-]$1";
		"^(\[#(?:NS?|WS?)\])" => "[0N-]$1";
		"\\Ö" => "[0N-][Ö]"; 
		"O-?O" => "[&O]O"; // zoologisch
		"U-?U" => "[A][&U][U]"; // Genugtuung
		"E-?O" => "[E][&E][O]"; // Georg

		"^([AEOU]|Ä|Ö|Ü)" => "[0N-]$1";
		"\\([AEOU]|Ä|Ö|Ü)" => "\\[0N-]$1";
		"^({AN})" => "[0N-]$1";
		"\\({AN})" => "\\[0N-]$1";

		"^(I)" => "[0D-][$1]";
		"\[=\]\\(I)" => "[=]\\[0D-][$1]";
		"(\[AU\])-?(\[?U\]?)" => "$1[&E]$2";

		//"\|({?[AEIOU]|Ä|Ö|Ü)" => "|[0N-][$1]";
		
		"^\[E\]" => "[0N-][E]";
		//"^I" => "[0D-][I]";
		//"^O" => "[0N-][O]";
		//"^U" => "[0N-][U]";
		//"^Ö" => "[0N-][#WD]";
		//"^Ä" => "[0N-][#WS]";
		//"^Ü" => "[0N-][#WDS]";
		"(^|\\)\[EU\]\[CH\]" => "$1[0N-][EU][CH]";
		"(^|\\)\[EI\]\[CH\]" => "$1[0N-][EI][CH]";
		"(^|\\)\[AU\]\[CH\]" => "$1[0N-][AU][CH]";
		"(^|\\)\[AU\]" => "$1[0D-][AU]";
		"(^|\\)\[EU\]" => "$1[0D-][EU]";
		"(^|\\)\[EI\](?!-?\[(CH|SCHW?|ZW?)\])" => "$1[0D-][EI]"; // Windeseile
		"^\[EI\](?=-?\[(CH|SCHW?|ZW?)\])" => "[0N-][EI]";

		"\[EI\]-?\[?A\]?" => "[EI][&E][A]"; // Aias
		"^\[0N-\]E\\" => "[0N-][E][&E]\\";
		"E\\" => "[-E]\\";
		
		"A\\" => "A[&A]\\";
		"\[EI\]\\" => "E[-EI]\\";
		// \n and \s
		"\\N" => "\\[N=]";
		"(?<!\['\])\\S" => "\\[S=]";

		// dem/den at beginning
		"^{(DE[MN])}([-+#]?)(?=N|{UN})" => "[^$1]$2"; // demungeachtet
		"^{(DE[MN])}([-+#]?)(?=J)" => "[^^$1]$2";

		"\\\[AU]" => "\\[0D-][AU]"; // Vergissmeinnichtaugen - not correct for ch, sch etc.

		// completor in the end (also necessary)
		"O\|" => "[#N][&O]|"; // Autobahn
		"Ä\|" => "[Ä][&A]|"; // Sämann
		
		"\[AU\]\\\[=\]" => "[AU][&E]\[=]";
		"U\\\[=\]" => "A[&U]\[=]";
		"U"" => "A[&U]""; // "Yu-Yu"-Rufe ... living on the edge (from an escaping point of view ... :):):)

		// abbreviations
		"\\{ANT}" => "\[0N-]{ANT}";
		"tstopt(01)[uU]{IELL}" => "A[&U]{IELL}";

		"\[O\](\[&I\])" => "[&O]$1"; // Oiagros
		"\[EU\]#LOS" => "[EU][&E]#LOS"; // treulos
		//"E" => "A";
		"\[EI\]\[?A\]?" => "[EI][&E][A]"; // Mantineia

		// ehelich
		"([eE])(-?{LICH})" => "$1[&E]$2";

		// Oil
		"(\[0N-\])\[O\]I" => "$1[&O]I"; // Oil

		"^\[SS" => "[0N-][#1][SS"; // Ssä, ssä, ssä

		"(Ö|ö)-[Ii]" => "E[&O]I"; // böig
		"(Ö|ö)-?(\[-E\])" => "E[&O]$2"; // Böe
"[Ii]-(?:eu|\[EU\])" => "[&I]-[EU]"; // Interieur

		"\\#[Ee]" => "\\[0N-]E"; // Hammam-es-Salamin
		"(?:ö|Ö)-?{EN}" => "E[&O]{EN}"; // Sandböen
	
	#EndSubSection(completor)
	#BeginSubSection(rewriter)
		// at this point, all characters are upper case
		// some token combinations need to be rewritten
		// that's done in this part (was first part of
		// transcriptor

		"\[&T\]A\[&U\]" => "A[&T&U]"; // prozentual

		"\[&T\]-?Z" => "[&TZ]"; // achtzig
		"\\\[VR\]" => "\\[AR]"; // Malteserritter
		
		"\\\[S\](?!$)" => "\[S=]"; // d'Sichlete vs ich's, mach's etc.

		// taken from substituter
		"tstopt(01)^{HEIT}U\[NG\]" => "[0N-][A][&EITNG]";
		
		///////////////////////////////////////////////////////
		// 2nd step: rewrite upper case tokens if necessary  //
		///////////////////////////////////////////////////////

		"E-I" => "E[&E]I";		// Koffein
		"I\[SCHL\]" => "I[^SCH@L3]";	// Tischli

		"(\[EI\]).?({ET})" => "$1[&E]$2"; // seiet

		"{BEI}$" => "[#BEI#]";

		// &t#los (furchtlos)
		"\[&T\]#L" => "[&T#L]";
		
		"{AUF}\+\[AR\]" => "[AUF+AR]";
		"\[VR\]\+{AUS}" => "[VR][-AUS]";  
		"{VOR}\+?{AUS}" => "{VOR}[-AUS]";
		"{HEIT}U\[NG\]" => "[#NS][&EITNG]";
		"\[EI\]-{ER}" => "[EI][&E]{ER}";

		"{DEN}{EN}" => "[0N-]{DEN}[O][&E]{EN}";		// denen
		"(\[EI\])(-?{E[MN]})" => "$1[&E]$2";
		"(\[EI\])((?:\+|-)?E)" => "$1[&E]$2";

		"{ET}A" => "{ET}[&E]A";
		"(\[ET3\/4\])({EN})" => "$1[&E]$2";

		"\[&T\]-?H" => "[&TH]"; // allenthalben

		// correct position for &T
		// 1- und 2-stufige Zeichen: [&T-1]
		"\[&T\]\[ST\]" => "[&TST]";
		"\[&T\]([\#\-\+])?([BCDFGHJKLMPTVWXY]|\[(?:ST|NK|NG|NS|MPF|PP|TT|CK|FF)\])" => "[&T-1]$1$2";

		"\[&T\][-+#]?\[SCH\]" => "[&T^SCH]";
		
		//"\[(CH|LL)\]T" => "[$1][&T]";
		"{VOR}(\||\+|-)?\[AR\]" => "[VORAR]"; // Warenvorrat
		"^{ER}\[AR\]" => "[0N-][VR+AR]"; 
		"{ER}\[AR\]" => "[#N][VR+AR]"; 
		
		"\[NK\]T" => "[NK][&T]";
		"\[ND\]T" => "[ND][&T]";
		"\[NG\]T" => "[NG][&T]";
		"\[#VR\]" => "[V@R6]";
		"\[GR\]" => "[G@R3^]";
		"\[XR\]" => "[X@R]";
		"\[MPFR\]" => "[MPF][@R]";
		"\[MMR\]" => "[MM@R6]"; // use [MM@R6] instead of [MM][@R]
		"\[NNR\]" => "[NN][@R]";
		"\[PPR\]" => "[PP][@R]";
		"\[NKR\]" => "[NK@R]";
		"\[NDR\]" => "[ND@R]";
		"\[HR\]" => "[H@R]";
		
		
		"\[NGR\]" => "[NG@R]";
		"\[NSR\]" => "[NS@R]";
		"\[NKL\]" => "[NK@L3]";
		"\[NGL\]" => "[NG@L3]";
		"\[NSL\]" => "[NS@L3]";
		"\[RRL\]" => "[RR@L]";
		"\[NDL\]" => "[ND@L3]";
		"\[TTL\]" => "[TT@L3]";
		"\[TTR\]" => "[TT@R3^]";
		"\[FFL\]" => "[FF@L]";
		"\[FFR\]" => "[FF@R6]";
		"\[CKL\]" => "[CK@L3]";
		"\[CKR\]" => "[CK@R]";
		"\[PPL\]" => "[PP@L]";
		"\[PPR\]" => "[PP@R6]";
		
		

		"\[CHR\]" => "[CH@R]";
		"\[KR\]" => "[K@R3^]";
		"\[TR\]]" => "[T@R3^]";
		"\[SCHR\]" => "[SCH@R]";
		"\[STR\]" => "[ST@R3^]";
		"\[LL\]" => "[L@L]";
		"\[BL\]" => "[B@L]";
		"\[XL\]" => "[X][@L]";
		"\[MPFL\]" => "[MPF][@L]";
		"\[MML\]" => "[MM@L]";
		"\[NNL\]" => "[NN@L]";
		"\[PPL\]" => "[PP][@L]";


		"\[ML\]" => "[M@L]";
		"\[FL\]" => "[F@L]";
		"\[PL\]" => "[P@L]";
		"\[PFL\]" => "[PF@L]";
		"\[VL\]" => "[V@L]";
		"\[WL\]" => "[W@L]";
		"(?<=([bcdfghjklmnpqrsvwxyz])|(\[CH\]))\[TL\]" => "[&T@L3]";
		"(?<=([bcdfghjklmnpqrsvwxyz])|(\[SCH\]))\[TL\]" => "[&T@L3]";
		
		"\[TL\]" => "[T@L3]";
		"([bcdfghjklmnpqrvwxyzs])\[T" => "$1][&T][";
		"\[TT\]r" => "[TT@R3^]";
		"{HIN}\[TR\]" => "{HIN}[&T@R]"; // hintre
		"\[TR\]" => "[T@R3^]";
		"\[DR\]" => "[D@R3^]";
		"\[CR\]" => "[C@R]";
		"\[CK\]l" => "[CK@L]";
		"\[GNL\]" => "[NG@L3]";
		"^\[NR\]$" => "[N=@#_@R6]"; // abbreviation: Nr.
		"^\[NR\]" => "[N=@R6]";
		"\[NR\]" => "[N@R6]";
		"\[NL\]" => "[N@L]";
		"\[KL\]" => "[K@L3]";
		"(I|\[AU\])\[ZL\]" => "$1[^Z1@L3]"; // kitzle
		"\[ZL\]" => "[Z@L3]";
		"\[SCHL\]" => "[SCH@L3]";
		"^\[CHL\]" => "[WELCH@L3]";
		"\[CHL\]" => "[CH@L3]";
		"\[BR\]" => "[B@R6]";
		"\[SPL\]" => "[SP@L]";
		"\[FR\]" => "[F@R6]";
		"\[LR\]" => "[L@R6]";
		"\[MR\]" => "[M@R6]";
		"\[SPR\]" => "[SP@R6]";
		"\[PR\]" => "[P@R6]";
		"\[PFR\]" => "[PF@R6]";
		"\[WR\]" => "[W@R6]";
		"\[RL\]" => "[VR@L]";
		"\[GL\]" => "[G@L3]";
		"\[SR\]" => "[S][AR]";
		"\[DL\]" => "[D@L3]";
		"\[CL\]" => "[C@L3]";
		"\[STL\]" => "[ST@L3]";
		"\[SL\]" => "s[@L]";
		"\[SSL\]" => "[SS][@L]";
		

		//"(\[VR@L\])\[?I\]?(\[?N\]?)" => "$1$2"; // Berlin??? wrong!?
		"^\[EI\]$" => "[0D-][EI][&E]";
		"&T]{EN}" => "&T][&E][EN]";
		"\[EU\]\[-E\]" => "[EU][&E][-E]";
		"\[EU\]\[&E\]E\[VR\]U\[NG\]" => "[EU][&E][VR]U[NG]";
		"\[VR\]{AUS}" => "[VR]{-AUS}";
		"\[VR\]\|?\[VR\]" => "[VR+AR]";
		"^{HEIT}" => "[0N-]{HEIT}";
		"I-?U" => "[&I]U";
		"I-?E" => { "[&I]E", "{[SZ]IEH}", "{IELL}", "{LIE[GF]}", "{INDIES?", "{SIESICH}", "{LIESS}", "{BEISPIEL}", "VIEL}", "{HIER}", "{SIE}", "{FIEL}", "SCHRIEB", "BRIEF", "WIRSIE", "TRIEB", "SOWIESO", "GEHENSIE", "WIRKÖNNENSIE", "SCHIEN", "SCHLIESS", "WIES", "IEDER", "EMPFIEHL", "ISIER", "INDUSTRIE", "DIEN", "LIEFER", "FRIED", "SCHIED", "STIEG", "RIET", "BIET", "ZWIE" }; // ugly ...
		"I-?A" => "[&I]A";
		"I-?O([^N])" => "[&I]O$1";
		"I-?I" => "[&I]I";
		"O-?U" => "[&O]U";
		"\[EU\]-?E" => "[EU][&E]E"; // Neues: -es is long!
		"E-?\[-E\]" => "[#N][-E]";
		"\[E\]$" => "[-E]";
		"E-?{EN}" => "E[&E]{EN}";
		"\[EI\]-?{HEIT}" => "[EI][&E]{HEIT}";
		"\[AU\]-?I" => "[AU][&E]I";
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCH\]" => "$1$2[^SCH]";
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHW\]" => "$1$2[^SCHW]";
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHM\]" => "$1$2[^SCHM]";
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[ZW\]" => "$1$2[^ZW]";
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)Z" => { "$1$2[^Z]", "SCHWEIZ" };
		"(\[?[Ii]\]?|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[CH\]" => "$1$2[^CH]";
		//"\[&T\]\[?B\]?" => "[&TB]"; // hopefully not necessary any more
		"\[&T\]\[?B\]?" => "[&T-1][B]";
		"\[&T\]\[?L\]?(OS)" => "{&T-L}$1";
		"\[&T\]\[NG\]" => "[&TNG]";
		"\[&T\]\[NS\]" => "[&TNS]";
		"\[&T\]\[?ST\]?" => "[&TST]";
		"\[&T\]\[?CH\]?" => "[&T^CH]";
		"\[&T\]\[?C\]?" => "[&TC]";
		"\[&T\]\[?D\]?" => "[&TD]";
		"\[&T\]\[?G\]?" => "[&TG]";
		//"\[&T\]\[?H\]?" => "[&TH]";
		"\[&T\]\[?J\]?" => "[&TJ]";
		"\[&T\]\[?ALL\]?" => "[&TALL]";
		"\[&T\]\[?M\]?" => "[&TM]";
		"\[&T\]\[?W\]?" => "[&TW]";
		"\[&T\]\[?X\]?" => "[&TX]";
		"\[&T\]\[?Y\]?" => "[&TY]";
		//"\[&T\]\[?&E\]?" => "[&T&E]"; // hopefully not necessary any more
		"\[&T&E\]E" => "[&T&E][-E]";
		"\[&T\]-?{HAFT}" => "[&THAFT]";
		"{HEIT}{LICH}" => "[&EITH]";
		"{HEIT}#H" => "[&EITH]"; // seither 
		"\[&T\]{SCHAFT}" => "[&TSCHAFT]";
		"{HEIT}{SCHAFT}" => "[&EITSCHAFT]";
		"\[&T\]{ION}" => "[&TION]";
		"\[&T\](\[?[AEIOU]|Ä|Ö|Ü\]?)" => "[&T][&E]$1"; 	//"[&T&E]$1";
		"{&TALL}" => "[&TALL]";
		"\[&T\]\[?N\]?" => "[&TN]";
		"\[&T\]\[VR\+AR\]" => "[&TVR]\\[AR]"; // hinterrücks ... oh yeah: let's do some bricolage ... :)
		"\[&T\]\[VR@L\]" => "[&TVR][#5-]I[@L]"; // Mailüfterl
		"\[&T\]\[?VR\]?" => "[&TVR]";
		"\[&T\]\[?R\]?" => "[&TAR5]";
		"\[&TL\]" => "[&T@L3]";
		"\[&T\]\[L\]" => "[&T@L3]";
		"{&T-L}" => "[&TL]";
		//"\[&T\]\[SCH\]" => "[&T^SCH]";
		//"\[&T\]\[?S\]?" => "[&TS]";
		"\[&T\]\[?U\]?" => "[&TU]";
		//"\[&T\]\[?SCH\]?" => "[&T^SCH]";
		"\[&T\]\[?Z\]?" => "[&T^Z]";
		"\[&T\]\[F@L\]" => "[&TF@L]";
		"\[&T\]F" => "[&TF]";
		"\[&T\]\[?K\]?" => "[&TK]";
		"\[&T\]\[?P\]?" => "[&TP]";
		"\[&T\]\[?Q\]?" => "[&TQ]";
		"\[&T\]\[?V\]?" => "[&TV]";
		"\[&T\]\[?NK\]?" => "[&TNK]";
		"\[&T\]\[?PF\]?" => "[&TPF]";
		"\[&T\]\[?SP\]?" => "[&TSP]";
		"\[&T\]\[?SCHW\]?" => "[&TSCHW]";
		"\[&T\]\[?ZW\]?" => "[&TZW]";
		"\[&T\]Ä" => "[&T&E]Ä";
		"\[&T\]Ü" => "[&T&E]Ü";
		"\[&T\]\[#W\]\[-E\]" => "[&T&E][#W][-E]";
		"{HEIT}ES" => "[&EITES]";
		"{HEIT}\[?B\]?" => "[&EITB]";
		"{HEIT}\[?L\]?" => "[&EITL]";
		"{HEIT}\[NG\]" => "[&EITNG]";
		"{HEIT}\[NS\]" => "[&EITNS]";
		"{HEIT}\[?ST\]?" => "[&EITST]";
		"{HEIT}\[?SCH\]?" => "[&EITSCH]";
		"{HEIT}\[?CH\]?" => "[&EITCH]";
		"{HEIT}\[?C\]?" => "[&EITC]";
		"{HEIT}\[?D\]?" => "[&EITD]";
		"{HEIT}\[?G\]?" => "[&EITG]";
		"{HEIT}\[?H\]?" => "[&EITH]";
		"{HEIT}\[?J\]?" => "[&EITJ]";
		"{HEIT}\[?ALL\]?" => "[&EITALL]";
		"{HEIT}\[?M\]?" => "[&EITM]";
		"{HEIT}\[?W\]?" => "[&EITW]";
		"{HEIT}\[?X\]?" => "[&EITX]";
		"{HEIT}\[?Y\]?" => "[&EITY]";
		//"{HEIT}\[?&E\]?" => "[&EIT&E]";
		"{HEIT}\[?N\]?" => "[&EITN]";
		"{HEIT}\[?VR\]?" => "[&EITVR]";
		"{HEIT}\[?S\]?" => "[&EITS]";
		//"{HEIT}\[?U\]?" => "[&EITU]";
		"{HEIT}\[?O\]?\[?N\]?" => "[&EIT&E][#2][O][N]"; // Aristogeiton
		"{HEIT}\[?O\]?" => "[&EITO]"; // is this correct ?!?!?
		"{HEIT}\[?Z\]?" => "[&EITZ]";
		"{HEIT}\[?F\]?" => "[&EITF]";
		"{HEIT}\[?K\]?" => "[&EITK]";
		"{HEIT}\[?P\]?" => "[&EITP]";
		"{HEIT}\[?Q\]?" => "[&EITQ]";
		"{HEIT}\[?V\]?" => "[&EITV]";
		"{HEIT}\[?NK\]?" => "[&EITNK]";
		"{HEIT}\[?PF\]?" => "[&EITPF]";
		"{HEIT}\[?SP\]?" => "[&EITSP]";
		"{HEIT}\[?SCHW\]?" => "[&EITSCHW]";
		"{HEIT}\[?ZW\]?" => "[&EITZW]";
		"{HEIT}IG" => "{HEIT-1}[G]";
		"\[&T\]-?{TUM}" => "[&T&E][A][&TM]"; // Schrifttum
		"{TUM}" => "[A][&TM]";
		"\[TLICH\]T" => "[TLICH][&T]";
		//"\[TLICH\]" => "[&TH]";
		"\[&T\](\[-E[MN]?\])" => "[&T][&E]$1";
		"\[&EITNG\]\[SP\]" => "[&EITNG][S][P]";
		"\[AU\]\[-E\]" => "[AU][&E][-E]";
		"\[EI\]{ER}" => "[EI][&E]{ER}";
		"\[AU\]U" => "[AU][&E]U";
		"\[O\]U" => "[&O]U";
		"{HEIT}U\[NG\]" => "{HEIT-1}[#NS][NG]"; 
		"\[EU\]-?{LICH}" => "[EU][&E]{LICH}"; 

		// rewrite higher position [ch] (combined with @r @l or not)
		"(I|\[(?:AU|EU)\])([-#\+])?\[CH" => "$1$2[^CH";
		"\[VR@L\]\[-E\]" => "[VR@L][O][-E]"; // recorrect height -e
		//"{ER}\[#W\]\[-EI\]" => "{ER}[#W][-EI2]"; // recorrect height -ei // not sure if ei is higher after vr ...
		"{HEIT}A" => "{HEIT}[&E]A";
		"{SCHAFT}-?L" => "{SCHAFT}[@L]";
		"\[EU\]-{ET}" => "[EU][&E]{ET}";

		"U-{EN}" => "A[&U]{EN}";
		
		"(^|\\)s" => "$1[S=]"; // slowenischen (sl => s+@l only in rewriter)

		// freilich, erbaulich
		"\[EI\]-?{LICH}" => "[EI][&E]{LICH}";
		"\[AU\]-?{LICH}" => "[AU][&E]{LICH}";
		"\[EU\]-?{LICH}" => "[EU][&E]{LICH}";
		// now after adding them => cut them out again in short shorthand ... :):):)
		"tstopt(01)\[EI\]\[&E\]{LICH}" => "[EI]{LICH}";
		"tstopt(01)\[AU\]\[&E\]{LICH}" => "[AU]{LICH}";
		"tstopt(01)\[EU\]\[&E\]{LICH}" => "[EU]{LICH}";
		"tstopt(01)\[?O\]?\[?H\]?{LICH}" => "[O]{LICH}";
		"tstopt(01)\[?Ö\]?\[?H\]?{LICH}" => "[Ö]{LICH}";
		"tstopt(01)\[?Ä\]?\[?H\]?-?{LICH}" => "[Ä]{LICH}";
		
		//"tstopt(01){VER}\+?{SICHER}" => "{VER}\\{SICHER}"; // probably not necessary any more
		"tstopt(01){UN}\+?{SICHER}" => "{UN}\\{SICHER}";

		"\[ET\]\[&E\]" => "[&ET&E]";

		"}\+([Tt])" => { "}|$1", "{WIDER}\+([Tt]e?n?)$", "{M}\+([Tt])" };  // zerteilen
		"}\+" => "}";  // get rid of annoying +
		"-{" => "{";  // get rid of annoying -

		"\[&[Tt]\]\[&[Ee]\]" => "[&T&E]"; // Sonntag
		"\[&[Tt]\]-?(?:\[[Nn]\]|[Nn])" => "[&TN]"; // Gesprächspartner
		"\[&T-1\]-?\[?L\]?" => "[&T#L]"; // Bewusstlosigkeit
		"O{EN}" => "[&O]{EN}"; // Hoboen
		"Ä{ER}" => "Ä[&E]{ER}"; // Europäern
		"\[&T\][#-]?\[CH\]" =>  "[&T^CH]"; // "[HEIT&UL][CH]"; // "[&TCH]"; // Wörtchen, Wichtchen - not sure if this is correct
		"\[&T\][+-]\[B@L\]" => "[&TBL]"; // Kaltblütigkeit 
		//"(\[&T-1\])(\[H\])" => "$1[#1]$2"; //"[&TH]"; // &th is not better! => new token necessary!

		"\[TUNG\]" => "[A][&TNG]"; // Richtung
		"\[&T-1\]\[G\]" => "[&TG]"; // mächtigen

		"\[&T-1\]\[H\]" => "[&TH]"; // bekanntlich
		"\[MPF\](?:\[EN\]|{EN})" => "[MPF][-EN2]"; // dumpfen
		"\[MPF\](?:\[EM\]|{EM})" => "[MPF][-EM2]"; // dumpfem

		"\[EI\]\[CH@L3\]" => "[EI][^CH@L3]"; // schmeichlerisch
		"\[&T-1\]-?W" => "[&TW]"; // derentwillen

		// Main (diacritics)
		"\[AI\]$" => "[&AI@#/.][#W][-EI]"; // Mai
		"(?<!\[&AI@#\/\.\])\[AI\]" => "[&AI@#/.][AI]"; // Mainufer

		"\[&T-1\]-?B" => "[&TB]"; // sichtbar
		"\[&T\]#?N" => "[&TN]"; // Erkenntnis
		"\[&T(?:-1)?\]-?M" => "[&TM]"; // sanftmütig
		"\[&T\^CH\](?!$)" => "[&TCH]"; // Kärtchen
		"\[&T\-1\]-?G" => "[&TG]";	// röntgen

		"(\[\^CH\])\|({VER})" => "$1[#5]\\$2"; // Rauchverbot
		
	#EndSubSection(rewriter)
	#BeginSubSection(substituter)

		"{DH}" => "{DAS}H"; // d.h.
		"{BEI}{SEIN}" => "{BEI}\\{SEIN}"; // Dabeisein
		"{HIN}\[&T\]{AN}" => "[H][N][&T&E][A][N]\\"; // hintansetzen

		"{VOR}{HAB}T" => "[VOR][HAB][&T]"; // don't separate "vorhabt" (clearly distinguishable from "vorab")
		"{VOR}{HAB}{EN}" => "[VOR][HAB][EN]"; // idem: vorhaben

		"{VOR}{HAB}" => "[VOR]\\[HAB]"; // separate "vorhabend" to distinguish from "Vorabend"
		"{VOR}[-+]D{EM}" => "[VOR][EM]"; // vordem
		"{DER}L" => "[VR][#5-][SELB]"; // derlei (use selb-)
		"E\+{IN}" => "E[&E][IN]"; // Reinfektion

		"{HEIT}-?{AUS}" => "[HEIT][-AUS]"; // weitaus

		"^{UN}{ZURÜCK}" => "[A][&U][^^ZURÜCK]"; // unzurückziehbar

		"(\\){DIS}" => "$1[DIS]"; // ohnedies

		"^{IN}.?{SICH}\|" => "[IN]\\I[S=]\\"; // Insichaufnehmen

		"{DER}{SELB}" => "[VR][#5-][SELB]"; // derselbe

		"(\[&T&E\])E#?{SCHAFT}" => "$1[E][&E][SCHAFT]"; // Ärzteschaft

		"\[ET3\/4\]{E(N|M)}" => "[ET3/4][&E][E$1]"; // erkaltetem

		"(\[VR@L\]){E(N|M)}" => "$1[O][E$2]"; // Perlen
		

		"{SCHAFT}{ET}" => "[SCHAFT][&T]"; // bewirtschaftetest
		"{ET}\[EI\]" => "[ET][&E][EI]"; // Narreteien

		"\\{ER}" => "\\[0N-][#4][VR]"; // Begleiterscheinung
		"{IN}{SO}" => "[IN][#4][SS]"; // insofern
		"^{D(E[MN])}\|?{SELB}{EN}" => "[0N-][$1][SELB][EN]"; // de(nm)selben
 		"{HEIT}{DEM}" => "[&EIT&E][EM]"; // seitdem

		// substitutions that must come before rewriter part in substituter
		"tstopt(01)^{ZAHL}" => "[0N-][A][L]"; 
		"tstopt(01){ZAHL}" => "[A][L]"; 
		"tstopt(01)^{ZÄHL}" => "[0N-][Ä][L]"; 
		"tstopt(01){ZÄHL}" => "[Ä][L]"; 
		"tstopt(01)^{ZIEH}" => "[0N-][I][H]"; 
		"tstopt(01){ZIEH}" => "[I][H]"; 
		"tstopt(01)^{ZOG}" => "[0N-][O][G]"; 
		"tstopt(01){ZOG}" => "[O][G]"; 
		"tstopt(01)^{ZUG}" => "[0N-][U][G]"; 
		"tstopt(01){ZUG}" => "[U][G]"; 
		"tstopt(01)^{ZÜG}" => "[0N-][Ü][G]"; 
		"tstopt(01){ZÜG}" => "[Ü][G]"; 
		"tstopt(01)^{ZÖG}" => "[0N-][Ö][G]"; 
		"tstopt(01){ZÖG}" => "[Ö][G]"; 
		"tstopt(01){WEITAUS}" => "[0N-][&EITAUS]"; 
		"tstopt(01)^{FÜHL}" => "[0N-][Ü][L]";  
		"tstopt(01){FÜHL}" => "[Ü][L]";  
		"tstopt(01)^{FÜLL}" => "[0N-][Ü][L]";  
		"tstopt(01){FÜLL}" => "[Ü][L]";  
		

		// kind of a rewriter part in substituter ..
		"tstopt(01)\[?(B|L)\]?{ER}" => "[$1@R6]";
		"tstopt(01)\[?(L|NN|N)\]?{ER}" => "[$1@R6]"; // Zähler, Nenner
		
		"tstopt(01){SEHRVIEL}" => "[SER][#5-][0U-][#5-][I][@L]"; // welcome to the jungle ... no other solution for the moment ... 
		"tstopt(01){NICHTVIEL}" => "[I][N=][I][@L]"; //[#0][LUI]";
		"tstopt(01)^{VERTRETER}" => "[0N-][#5][ARR6]"; 
		"tstopt(01)^{VERTRET}" => "[0N-][#5][ARR6]"; 
		"tstopt(01){VERTRETER}" => "[#5][ARR6]"; 
		"tstopt(01){VERTRET}" => "[#5][ARR6]"; 
		"tstopt(01){VERTRITT}" => "[0U-][#5][ARR6]"; 
		"tstopt(01){VERTRAT}" => "[0N-][#5][A][ARR6]"; 
		"tstopt(01){EIN}-?Z{IG}" => "[0D1-][E][Z][/I]"; 
		"tstopt(01){ZU}{ERST}" => "[Z][E][ST]"; 
		"tstopt(01){ERST}[#+|-]?L" => "[0U1B-][E][ST@L3]"; 
		"tstopt(01){ERST}" => "[0U1B-][E][ST]"; 
		"tstopt(01){VOLK}" => "[VV]"; 
		"tstopt(01){KURS}" => "[U][K]"; 
		"tstopt(01){KUR}" => "[U][K]"; 
		"tstopt(01){PLATZ}" => "\\[A][P@L]"; 
		"tstopt(01){PLÄTZ}\[-E\]" => "[A][P@L][E][-E]"; 
		"tstopt(01){PLÄTZ}" => "[A][P@L]"; 
		"tstopt(01)^{LEIST}" => "[0N-][EI][ST]"; 
		"tstopt(01){LEIST}" => "[EI][ST]"; 
		"tstopt(01){FOLG}" => "[O][F]"; 
		"tstopt(01)^{LAST}" => "[0N-][A][ST]"; 
		"tstopt(01){LAST}" => "[A][ST]"; 
		"tstopt(01)^{LÄST}" => "[0N-][Ä][ST]"; 
		"tstopt(01){LÄST}" => "[Ä][ST]"; 
		"tstopt(01)^{SCHAD}" => "[0N-][A][D]"; 
		"tstopt(01){SCHAD}" => "[A][D]"; 
		"tstopt(01)^{SCHATZ}" => "[0N-][A][Z]"; 
		"tstopt(01){SCHATZ}" => "[A][Z]"; 
		"tstopt(01)^{SCHÄTZ}" => "[0N-][Ä][Z]"; 
		"tstopt(01){SCHÄTZ}" => "[Ä][Z]"; 
		"tstopt(01)^{SCHICK}" => "[0N-][I][CK]"; 
		"tstopt(01){SCHICK}" => "[I][CK]"; 
		"tstopt(01)^{SCHAFF}" => "[0N-][A][FF]"; 
		"tstopt(01){SCHAFF}" => "[A][FF]"; 
		"tstopt(01)^{SCHÄD}" => "[0N-][Ä][D]"; 
		"tstopt(01){SCHÄD}" => "[Ä][D]"; 
		"tstopt(01)^{SCHÄDL}" => "[0N-][Ä][D@L3]"; 
		"tstopt(01){SCHÄDL}" => "[Ä][D@L3]"; 
		"tstopt(01)^{HAUS}" => "[0N-][AU][S]"; 
		"tstopt(01){HAUS}" => "[AU][S]"; 
		"tstopt(01)^{HÄUS}" => "[0N-][EU][S]"; 
		"tstopt(01){HÄUS}" => "[EU][S]"; 
		"tstopt(01)^{HOL}" => "[0N-][O][L]"; 
		"tstopt(01){HOL}" => "[O][L]"; 
		"tstopt(01)^{HÖL}" => "[0N-][Ö][L]"; 
		"tstopt(01){HÖL}" => "[Ö][L]"; 
		"tstopt(01)^{KEHR}" => "[0N-][E][VR]"; 
		"tstopt(01){KEHR}" => "[E][VR]"; 
		"tstopt(01)^{LAD}" => "[0N-][A][D]"; 
		"tstopt(01){LAD}" => "[A][D]"; 
		"tstopt(01)^{LUD}" => "[0N-][U][D]"; 
		"tstopt(01){LUD}" => "[U][D]"; 
		"tstopt(01)^{LÄD}" => "[0N-][Ä][D]"; 
		"tstopt(01){LÄD}" => "[A][D]"; 
		"tstopt(01)^{TEIL}" => "[0N-][&EITL]"; 
		"tstopt(01){TEIL}" => "[&EITL]"; 
		"tstopt(01){WICHTIG}" => "[I][W][/I]"; 
		"tstopt(01)^{FIND}-?L" => "[I][ND@L3]"; // Findling 
		"tstopt(01){FIND}" => "[I][ND]"; 
		"tstopt(01){FAND}" => "[A][ND]"; 
		"tstopt(01){FUND}" => "[U][ND]"; 
		"tstopt(01){HALB}" => "[A][H]"; 
		"tstopt(01)^{HAND}{EL}" => "[0N-][#4][@L]"; 
		"tstopt(01){HAND}{EL}" => "[#4][@L]"; 
		"tstopt(01){HAND}" => "[A][H]"; 
		"tstopt(01){HÄND}\[-E\]" => "[A][H][E][-E]"; 
		"tstopt(01){HÄND}" => "[A][H]"; 
		"tstopt(01){BE}{VÖLK}" => "[B][Ö][K]"; 
		"tstopt(01){VÖLK}{ER}" => "[VV][EI][AR]"; 
		"tstopt(01){VÖLK}" => "[VV]"; 
		"tstopt(01){FINANZ}" => "[AU][NZ]"; 
		"tstopt(01)^{SCHIED}" => "[0N-][I][D]"; 
		"tstopt(01){SCHIED}" => "[I][D]"; 
		"tstopt(01)^{SCHEID}" => "[0N-][EI][D]"; 
		"tstopt(01){SCHEID}" => "[EI][D]"; 
		"tstopt(01){GRENZ}" => "[NZ]"; 
		"tstopt(01)^{KLAR}" => "[0N-][A][VR]"; 
		"tstopt(01){KLAR}" => "[A][VR]"; 
		"tstopt(01)^{KLÄR}" => "[0N-][Ä][VR]"; 
		"tstopt(01){KLÄR}" => "[Ä][VR]"; 
		"tstopt(01){KONKURRENZ}" => "[U][NZ]"; 
		"tstopt(01){AUSSER}" => "[0D-][#2-][AU][SOBRE]"; 
		"tstopt(01){TUT}$" => "[U][T][&T]";
		"tstopt(01){TUT}" => "[U][T][&T&E]";
		"tstopt(01){TOT}$" => "[O][T][&T]";
		"tstopt(01){TOT}(\||\\)" => "[O][T][&T]";
		"tstopt(01){TOT}" => "[O][T][&T][&E]";
		"tstopt(01)^{NOT}" => "\\[O][N=][&T]";
		"tstopt(01)^{NÖT}" => "[O][N=][&EIT&E]";
		"tstopt(01){NÖT}" => "[O][N][&EIT&E]";
		"tstopt(01){BOT}" => "[O][B][&T]";
		"tstopt(01){BROT}$" => "\\[O][B@R6][&T]";
		"tstopt(01){BROT}" => "\\[O][B@R6][&T&E]";
		"tstopt(01){ROT}$" => "\\[O][AR][&T]";
		"tstopt(01){ROT}" => "\\[O][AR][&T&E]";
		"tstopt(01){RÖT}" => "\\[O][AR][&EIT&E]";
		"tstopt(01){BRUT}" => "\\[U][B@R6][&T]";
		"tstopt(01){BRÜT}$" => "\\[U][B@R6][HEIT]";
		"tstopt(01){BRÜT}" => "\\[U][B@R6][&EIT&E]";
		"tstopt(01){GUT}$" => "[U][G][&T]";
		"tstopt(01){GUT}" => "[U][G][&T&E]";
		"tstopt(01){GOTT}$" => "[O][G][ET]";
		"tstopt(01){GOTT}(\||\\)" => "[O][G][ET]$1";
		"tstopt(01){GOTT}" => "[O][G][&ET&E]";
		"tstopt(01){GÜT}{ER}" => "[U][G][&EITVR]";
		"tstopt(01){GÜT}{IG}" => "[U][G][&EITG]";
		"tstopt(01){GÜT}" => "[U][G][&T]";
		"tstopt(01){BITT}$" => "[I][B][ET]";
		"tstopt(01){BITT}" => "[I][B][&ET&E]";
		"tstopt(01){BIET}$" => "[I][B][&T]";
		"tstopt(01){BIET}" => "[I][B][&T&E]";
		"tstopt(01){BAT}$" => "[A][B][&T]";
		"tstopt(01){BAT}" => "[A][B][&T&E]";
		"tstopt(01){RAT}" => "[A][AR][&T]";
		"tstopt(01){RÄT}" => "[A][AR][&EIT&E]";
		"tstopt(01){RIET}$" => "\\[I][AR][&T]";
		"tstopt(01){RIET}" => "\\[I][AR][&T&E]";
		"tstopt(01){TAT}\|?{SÄCHLICH}" => "[A][TT1][Ä][H]";
		"tstopt(01)^{SACH}" => "[A][S=]"; 
		"tstopt(01){SACH}" => "[A][S]"; 
		"tstopt(01){SÄCHLICH}" => "[A][S=][EI][H]"; 
		"tstopt(01){JED}" => "[J]"; 
		"tstopt(01)^{TAG}" => "[0N-][A][&TG]"; 
		"tstopt(01){TAG}" => "[A][&TG]"; 
		"tstopt(01)^{TÄG}{LICH}" => "[0N-][A][&EITG][H]"; 
		"tstopt(01){TÄG}" => "[A][&TG]"; 
		"tstopt(01){TAT}" => "[A][TT1]"; 
		"tstopt(01){TÄT}{ER}" => "[A][TT1][EI][AR]";
		"tstopt(01){TÄT}" => "[A][TT1]";  
		"tstopt(01){KANT}" => "[A][CK1]";  
		"tstopt(01){MANNIG}" => "[A][CCHH]";  
		"tstopt(01){MANCH}" => "[A][CCHH]";  
		"tstopt(01){MANCHERL}" => "[A][CCHH@L]";  
		"tstopt(01){GESCHICHT}" => "[CCHH]";  
		"tstopt(01){STATT}" => "[A][STT]";  
		"tstopt(01){STÄTT}" => "[A][STT]";  
		"tstopt(01){STÄT}" => "[A][STT]";  
		"tstopt(01){STAAT}" => "[A][T]";  
		"tstopt(01){KETT}" => "[CK1]";  
		"tstopt(01)^{SCHULD}" => "[0N-][U][D]";  
		"tstopt(01){SCHULD}" => "[U][D]";  
		"tstopt(01){KAPIT}" => "[A][KP]";  
		"tstopt(01){KAP}" => "[A][KP]";  
		"tstopt(01)^{STÄRK}" => "[0N-][Ä][K]";  
		"tstopt(01){STÄRK}" => "[Ä][K]";  
		"tstopt(01){DACH}" => "[A][D]";  
		"tstopt(01)^{TRACHT}" => "[0N-][A][&T@R_S]";  
		"tstopt(01){TRACHT}" => "[A][&T@R_S]";  
		"tstopt(01)^{TRÄCHT}" => "[0N-][A][&EIT@R_S]";  
		"tstopt(01){TRÄCHT}" => "[A][&EIT@R_S]";  
		"tstopt(01)^{TRET}" => "[0N-][&T@R]"; // use traditional @R  
		"tstopt(01){TRET}" => "[&T@R]"; // use traditional @R  
		"tstopt(01)^{TRITT}" => "[0N-][&T@R][#5-][/I]";   
		"tstopt(01){TRITT}" => "[&T@R][#5-][/I]";   
		"tstopt(01){BETREFFEND}" => "[B][&T@R]";  
		"tstopt(01){TREFF}" => "[T@R]";  
		"tstopt(01){TRIFF}" => "\\[I][T@R]";  
		"tstopt(01){TROFF}" => "[O][T@R]";  
		"tstopt(01){TRAF}" => "[A][T@R]";  
		"tstopt(01){BRAUCH}" => "[AU][B@R6]";  
		"tstopt(01){IGKEIT}" => "[HEIT]";  
		"tstopt(01)^{IHRER}" => "[0D-][I][RR]"; 
		"tstopt(01){IHRER}" => "[I][RR]"; 
		"tstopt(01)^{EURER}" => "[0D-][EU][RR]"; 
		"tstopt(01){EURER}" => "[EU][RR]"; 
		"tstopt(01){GENERAL}" => "[G][E][N][A][L]"; 
		"tstopt(01)^{ICH}" => "[0N-][I][^CH]"; 
		"tstopt(01)^{ZOLL}" => "[0N-][O][L]";  
		"tstopt(01){ZOLL}" => "[O][L]";  
		"tstopt(01)^{ZÖLL}" => "[0N-][Ö][L]";  
		"tstopt(01){ZÖLL}" => "[Ö][L]";  
		"tstopt(01)^{ZEUG}" => "[0N-][EU][G]";  
		"tstopt(01){IEDER}" => "[#1-][I][INTER]";  
		"tstopt(01){ZEUG}" => "[EU][G]";  
		"tstopt(01)^{DIEN}" => "[I][D]";  
		"tstopt(01){DIEN}" => "\\[I][D]";  
		"tstopt(01)^{DEUT}$" => "[AU][D][HEIT]";  
		"tstopt(01)^{DEUT}{LICH}" => "[AU][D][&EITH]";  
		"tstopt(01)^{DEUT}" => "[AU][D][&EIT&E]";  
		"tstopt(01){DEUT}" => "[EU][T]";  
		"tstopt(01){HEUT}$" => "[AU][H][HEIT]";  
		"tstopt(01){HEUT}{IG}" => "[AU][H][&EITG]";  
		"tstopt(01){HEUT}" => "[AU][H][&EIT&E]";  
		"tstopt(01){HAUT}" => "\\[AU][H][&T]";  
		"tstopt(01)^{BRING}" => "[I][B@R6]";  
		"tstopt(01){BRING}" => "\\[I][B@R6]";  
		"tstopt(01)^{SCHLUG}" => "[0N-][A][&U]";  
		"tstopt(01){SCHLUG}" => "[A][&U]";  
		"tstopt(01)^{SCHLAG}" => "[0N-][A][&A]";  
		"tstopt(01){SCHLAG}" => "[A][&A]";  
		"tstopt(01)^{SCHLÜG}" => "[0N-][Ä][&U]";  
		"tstopt(01){SCHLÜG}" => "[Ä][&U]";  
		"tstopt(01)^{SCHLÄG}" => "[0N-][Ä][&A]";  
		"tstopt(01){SCHLÄG}" => "[Ä][&A]";  
		"tstopt(01)^{MONAT}" => "[0D-][A][T]";  
		"tstopt(01){MONAT}" => "[0D-][A][T]";  
		"tstopt(01)^{FEST}" => "[0N-][E][ST]";  
		"tstopt(01){FEST}" => "[E][ST]";  
		"tstopt(01)^{FREUND}" => "[0N-][EU][ND]";  
		"tstopt(01){FREUND}" => "[EU][ND]";  
		"tstopt(01)^{FREU}T" => "[0N-][EU][T]";  
		"tstopt(01)^{FREU}" => "[0N-][EU][&E]";  
		"tstopt(01){FREU}{LICH}" => "[EU][H]";  
		"tstopt(01){FREU}" => "[EU][&E]";  
		"tstopt(01)^{FRIED}" => "[0N-][I][D]";  
		"tstopt(01){FRIED}" => "[I][D]";  
		"tstopt(01){MERK}" => "[M@R6]";  
		"tstopt(01){MARKT}" => "[A][M@R6][&T]"; // also Markt  
		"tstopt(01){MARK}" => "[A][M@R6]";
		"tstopt(01){MÄRKT}" => "[A][M@R6][&EIT&E]";  
		"tstopt(01){WERK}" => "[W@R6]";  
		"tstopt(01)^{SAMMEL}" => "[A][S=][#3][@L]";  
		"tstopt(01){SAMMEL}" => "[A][S][#3][@L]";  
		"tstopt(01){MANGEL}" => "[A][M][#0][@L]";  
		"tstopt(01){MÄNGEL}" => "[A][M][EI][@L]";  
		"tstopt(01){BRACH}T$" => "[A][B@R6][&T]";  
		"tstopt(01){BRACH}T" => "[A][B@R6][&T&E]"; 
		"tstopt(01)^{LIEFER}" => "[I][L@R6]";  
		"tstopt(01){LIEFER}" => "\\[I][L@R6]";  
		"tstopt(01){LAND}\|?{EIN}" => "[A][L][E][-EI]";  
		"tstopt(01){LAND}" => "[A][L]";  
		"tstopt(01){LÄND}{ER}" => "[A][L][EI][AR]";  
		"tstopt(01){LÄND}" => "[A][L]";  
		"tstopt(01){HAFT}" => "[HAFT]";  
		"tstopt(01)^{KOMMISSION}" => "[0D-][ANT]";  
		"tstopt(01)\\{KOMMISSION}" => "\\[0D-][ANT]";  
		"tstopt(01){INDUSTRIE}" => "\\[U][IN]";  
		"tstopt(01)^{VERHÄLTNIS}" => "[0N-][EN][RÜCK]";  
		"tstopt(01){VERHÄLTNIS}" => "[EN][RÜCK]";  
		"tstopt(01){ÜBERHAUPT}" => "[0U-][Ä][&U]";  
		"tstopt(01){FREI}{LICH}" => "[EI][H]";  
		"tstopt(01)^{FREI}{WILL}" => "[0N-][EI][@L]";  
		"tstopt(01){FREI}{WILL}" => "[EI][@L]";  
		"tstopt(01)^{FREI}($|[#+-]?{WILL})" => "[0N-][E][-EI]$1";  
		"tstopt(01)^{FREI}" => "[0N-][EI][&E]";  
		"tstopt(01){FREI}$" => "[E][-EI]";  
		"tstopt(01){FREI}" => "[EI][&E]";  
		"tstopt(01){HEIT}\\?{WILL}" => "[&EIT@L3]";  // bereitwillig
		"tstopt(01)^{RUF}" => "[0N-][U][F]";  
		"tstopt(01){RUF}" => "[U][F]";  
		"tstopt(01)^{FUG}" => "[0N-][U][G]";  
		"tstopt(01){FUG}" => "[U][G]";  
		"tstopt(01)^{FÜG}" => "[0N-][Ü][G]";  
		"tstopt(01){FÜG}" => "[Ü][G]";  
		"tstopt(01){ITAT}" => "[I][T]";  
		"tstopt(01){ISAT}" => "[A][T]";  
		"tstopt(01){ISIER}" => "[I][VR]";  
		"tstopt(01){IGEND}" => "[E][ND]";  
		"tstopt(01)^{KREDIT}" => "[0N-][I][T]";  
		"tstopt(01){KREDIT}" => "[I][T]";  
		"tstopt(01){INTER}[#+|\-]?{NATION}" => "[INTER][0U-][I][ION]";  
		"tstopt(01){NATION}" => "[U][0D-][I][ION]";  
		"tstopt(01)\|{DEUTSCH}" => "\\[I][^SCH]";  
		"tstopt(01){DEUTSCH}" => "[I][^SCH]";  
		"tstopt(01){SCHWEIZ}" => "[SCHW]";  
		"tstopt(01){BILD}" => "\\[I][B]";  
		"tstopt(01){BIND}" => "\\[I][B]";  
		"tstopt(01){BUND}" => "\\[U][B]";  
		"tstopt(01)^{HALT}" => "[0N-][&T]";  
		"tstopt(01)^{HALT}{ER}" => "[0N-][&TVR]";  
		"tstopt(01){HALT}{ER}" => "[&TVR]";  
		"tstopt(01){HALT}" => "[&T]";  
		"tstopt(01){WALT}\[?U\]?\[NG\]" => "[A][W][A][&TNG]";
		"tstopt(01){WALT}" => "[A][W][&T]";  
		"tstopt(01){WART}\[?U\]?\[NG\]" => "[A][W][A][&TNG]";
		"tstopt(01){WART}" => "[A][W][&T]";  
		"tstopt(01){WÄRT}{ER}" => "[A][W][&EITVR]";  
		"tstopt(01){WÄRT}" => "[A][W][HEIT]";  
		"tstopt(01){WAHL}" => "[A][W]";  
		"tstopt(01){WÄHL}{ER}" => "[A][W][EI][AR]";  
		"tstopt(01){WÄHL}T$" => "[A][W][HEIT]";  
		"tstopt(01){WÄHL}T" => "[A][W][&EIT&E]";  
		"tstopt(01){WÄHL}" => "[A][W]";  
		"tstopt(01){FIEL}" => "\\[I][F]";  
		"tstopt(01)^{EMPFEHL}" => "[0N-][E][MPF]";  
		"tstopt(01){EMPFEHL}" => "[E][MPF]";  
		"tstopt(01)^{EMPFAHL}" => "[0N-][Ä][MPF]";  
		"tstopt(01){EMPFAHL}" => "[Ä][MPF]";  
		"tstopt(01)^{EMPFIEHL}" => "[0U-][E][MPF]";  
		"tstopt(01){EMPFOHL}" => "[0D-][E][MPF]";  
		"tstopt(01){AN_DER}" => "[A][N=@R6]";  
		"tstopt(01){AUF_DEN}" => "[AUF][EN]";  
		"tstopt(01){PERSON}" => "[P]";  
		"tstopt(01){GRUND}" => "[U][G@R]";  
		//"tstopt(01){GRÜND}{LICH}" => "[U][G@R][EI][H]";  
		//"tstopt(01){GRÜND}" => "[U][G@R]";  
		"tstopt(01)^{GRÜND}" => "[0N-][Ü][ND]";  
		"tstopt(01){GRÜND}" => "[Ü][ND]";  
		"tstopt(01){QUANT}" => "[A][Q]";  
		"tstopt(01){_EINS}" => "[E][-EI]"; // at end of words  
		"tstopt(01){PUNKT}" => "[U][P]";  
		"tstopt(01){PÜNKT}{LICH}" => "[U][P][EI][H]";  
		"tstopt(01){PÜNKT}" => "[U][P]";  
		"tstopt(01){POST}" => "[O][P]";  
		"tstopt(01){MITIHNEN}" => "[M][I][N][EN]";  
		//"tstopt(01){PÖSTL}" => "[O][P][EI][@L]";  
		"tstopt(01){PÖSTL}" => "[O][P@L]"; // my preferred version ...  
		"tstopt(01){KUND}" => "[U][K]";  
		"tstopt(01){WAHR}" => "[A][W]";  
		"tstopt(01){ZWISCHEN}" => "[ZW]";  
		"tstopt(01){ZWECK}$" => "[ZW][#0]"; // #0 = "exit-killer"  
		"tstopt(01){ZWECK}" => "[ZW]";  
		"tstopt(01){REGEL}" => "[AR][#4][@L]";  
		"tstopt(01){WECHSEL}" => "[W@L]";  
		"tstopt(01){WELL}" => "[W@L]";  
		"tstopt(01)^{EINZEL}" => "[0D-][EI][@L]";  
		"tstopt(01){EINZEL}" => "[EI][@L]";  
		"tstopt(01)^{MITTL}" => "[0N-][MITTL]"; // from shifter  
		"tstopt(01){MITTL}" => "[MITTL]"; // from shifter  
		"tstopt(01){ZWEIFEL}" => "[ZW@L3]";  
		"tstopt(01){DA@R}{AUF}" => "[DA@R][AUF2]";  
		"tstopt(01){WÜNSCH}-?T$" => "[U][W][HEIT]";  
		"tstopt(01){WÜNSCH}-?T" => "[U][W][&EIT&E]";  
		"tstopt(01){WÜNSCH}{EN}" => "[U][W][Ü][-EI]";  
		"tstopt(01){WÜNSCH}" => "[U][W]";  
		"tstopt(01){WUNSCH}" => "[U][W]";  
		"tstopt(01){BE}{ANTWORT}" => "[O][B][ANT]";  
		"tstopt(01){VER}{ANTWORT}" => "[0D-][#4][AR][ANT]";  
		"tstopt(01)^{ANTWORT}" => "[0D-][ANT]";  
		"tstopt(01){ANTWORT}" => "[O][ANT]";  
		"tstopt(01){WAHR}" => "[A][W]";  
		"tstopt(01)^{SEND}" => "[S=]";  
		"tstopt(01){SEND}" => "[S]";  
		"tstopt(01)^{SAND}" => "[A][S=]";  
		"tstopt(01){SAND}" => "[A][S]";  
		"tstopt(01)^{SUCH}" => "[U][S=]";  
		"tstopt(01){SUCH}" => "[U][S]";  
		"tstopt(01)^{SÜCH}-?T" => "[U][S=][&EIT&E]";  
		"tstopt(01){SÜCH}T" => "[U][S][&EIT&E]";  
		"tstopt(01){SÜCH}" => "[U][S]";  
		"tstopt(01){KÜND}{EN}" => "[U][K][Ü][-EI]";  
		"tstopt(01){KÜND}{IGUNG}" => "[U][K][EU][NG]";  
		"tstopt(01){KÜND}" => "[U][K]";  
		"tstopt(01){MACHT}" => "[A][M][&T]"; // NOUN ONLY!  
		"tstopt(01){MÄCHT}\[-E\]" => "[A][M][&EIT&E][-E]";   
		"tstopt(01){MÄCHT}{EN}" => "[A][M][&EIT&E][EN]";   
		"tstopt(01){MÄCHT}{IG}" => "[A][M][&EITG]";   
		"tstopt(01){GRÖSSER}" => "[O][G@ARR3S]"; // hm ... try this new combined token ... 
		"tstopt(01){_ICH}" => "[_CH]"; 
		//"tstopt(01){ICHHOFF}" => "[0N-][I][^CH][O][H]"; 
		"tstopt(01){ICHHOFFNICHT}" => "[0D-][I][^CH][N]"; // other, shorter variant 
		"tstopt(01){ICHHOFF}" => "[0D-][I][^CH]"; // other, shorter variant 
		"tstopt(01){HOFF}" => "[O][H]"; 
		"tstopt(01)^{SCHLIESS}" => "[0N-][I][SS]"; 
		"tstopt(01){SCHLIESS}" => "[I][SS]"; 
		"tstopt(01)^{SCHLOSS}" => "[0N-][O][SS]"; 
		"tstopt(01){SCHLOSS}" => "[O][SS]"; 
		"tstopt(01)^{SCHLUSS}" => "[0N-][U][SS]"; 
		"tstopt(01){SCHLUSS}" => "[U][SS]"; 
		"tstopt(01)^{SCHLÜSS}" => "[0N-][Ü][SS]"; 
		"tstopt(01){SCHLÜSS}" => "[Ü][SS]"; 
		"tstopt(01)^{SCHIEN}" => "[0N-][I][N]"; 
		"tstopt(01){SCHIEN}" => "[I][N]"; 
		"tstopt(01)^{SCHEIN}" => "[0N-][EI][N]"; 
		"tstopt(01){SCHEIN}" => "[EI][N]"; 
		"tstopt(01)^{WEIS}" => "[0N-][EI][S]"; 
		"tstopt(01){WEIS}" => "[EI][S]"; 
		"tstopt(01)^{WIES}" => "[0N-][I][S]"; 
		"tstopt(01){WIES}" => "[I][S]"; 
		"tstopt(01)^{WINN}" => "[0N-][I][NN]"; // probably not necessary
		"tstopt(01){WINN}" => "[I][NN]"; 
		"tstopt(01)^{WANN1}" => "[0N-][A][NN]"; // WANN1 = verb: gewann (vs wann?)
		"tstopt(01){WANN1}" => "[A][NN]"; 
		"tstopt(01)^{WONN}" => "[0N-][O][NN]";
		"tstopt(01){WONN}" => "[O][NN]"; 
		"tstopt(01){KURZ}" => "[U][K]"; 
		"tstopt(01){KÜRZ}{LICH}" => "[U][K][EI][H]"; 
		"tstopt(01){KÜRZ}{EN}" => "[U][K][Ü][-EI]"; 
		"tstopt(01){KÜRZ}{ER}" => "[U][K][EI][AR]"; 
		"tstopt(01){KÜRZ}\[?[Uu]\]?\[NG\]" => "[U][K][EU][NG]"; 
		"tstopt(01){KÜRZ}\[-E\]" => "[U][K][Ü][-EI]"; 
		"tstopt(01){KÜRZ}-?T{ER}" => "[U][K][&EITVR]"; 
		"tstopt(01){KÜRZ}" => "[U][K]"; // no distinction in all other cases 
		"tstopt(01){ENTWICKLUNG}" => "[0U-][ANT]"; 
		"tstopt(01){ENTWICKEL}" => "\\[0U-][ANT]"; 
		"tstopt(01){WIRTSCHAFT}" => "[WIRD][I][&SCHAFT]"; 
		"tstopt(01){WISSENSCHAFT}" => "[I][SCHAFT]"; 
		"tstopt(01)^{GENOSSENSCHAFT}" => "[O][SCHAFT]"; 
		"tstopt(01){GENOSSENSCHAFT}" => "\\[O][SCHAFT]"; 
		"tstopt(01){VERSICHERNIHNEN}" => "\\[0U-][#4][AR][I][N][EN]"; 
		"tstopt(01){VER}\+?{SICHER}" => "\\[0U-][#4][AR]"; 
		"tstopt(01){VERSICHERUNG}" => "\\[0U-][#4][AR]"; 
		"tstopt(01){WIRKÖNNENSIE}" => "[W][Ö][NN][S][/I]"; 
		"tstopt(01){HAB}{WIR}{UNS}" => "[A][B][W][U][NS]"; 
		"tstopt(01){WIR}{UNS}" => "[W][U][NS]"; 
		"tstopt(01){HAB}{WIR}" => "[A][B][W]"; 
		"tstopt(01){DER}" => "[VR]"; 
		"tstopt(01){MAND}" => "[M]"; 
		"tstopt(01){FRAG}" => "[A][F@R6]"; 
		"tstopt(01){HÄTTEICH}" => "[TT][#4][_CH]"; 
		"tstopt(01){SOWIESO}" => "[0N-][SS][/I]\\[0N-][SS]"; 
		"tstopt(01)^{TREIB}" => "[0N-][EI][B]"; 
		"tstopt(01)^{TRIEB}" => "[0N-][I][B]"; 
		"tstopt(01)^{ZEIG}" => "[0N-][EI][G]"; 
		"tstopt(01){ZEIG}" => "[EI][G]"; 
		"tstopt(01)^{STEIG}" => "[0N-][EI][G]"; 
		"tstopt(01){STEIG}" => "[EI][G]"; 
		"tstopt(01)^{STIEG}" => "[0N-][I][G]"; 
		"tstopt(01){STIEG}" => "[I][G]"; 
		"tstopt(01){TREIB}" => "[EI][B]"; 
		"tstopt(01){TRIEB}" => "[I][B]"; 
		"tstopt(01)^{ZEICH}" => "[0N-][EI][^CH]"; 
		"tstopt(01){ZEICH}" => "[EI][^CH]"; 
		"tstopt(01){ZEIT}" => "[HEIT]"; 
		"tstopt(01){NICHTMEHR}" => "[I][N=][E][VR]"; 
		"tstopt(01){MANAG}" => "{MAN}[A][G]"; // same abbreviation 
		"tstopt(01)^M{MENT2}\[O\]\[&E\]AN" => "[O][M][A][N]"; // momentan
		"tstopt(01)^M{MENT2}" => "[O][M][#9][EM]"; // Moment
		"tstopt(01){MENT2}" => "[#9][EM]"; 
		"tstopt(01){KUNFT}" => "[U][K]"; 
		"tstopt(01){KÜNFT}" => "[U][K]"; 
		"tstopt(01){GLEICHZEITIG}" => "[G@L3][&EITG]"; 
		"tstopt(01){WIRSIE}" => "[W][S][/I]"; 
		"tstopt(01)^{SITZ}" => "[0N-][I][Z]"; 
		"tstopt(01){SITZ}" => "[I][Z]"; 
		"tstopt(01)^{PREIS}" => "[0N-][EI][S]"; 
		"tstopt(01){PREIS}" => "[EI][S]"; 
		//"tstopt(01)^{HOCH}" => "[0N-][O][H]";  // NOT NECESSARY
		"tstopt(01){HOCH}" => "[O][H]"; 
		"tstopt(01){HÖH}-?TES" => "[O][H][&EITES]"; 
		"tstopt(01){HÖH}-?T$" => "[O][H][HEIT]"; 
		"tstopt(01){HÖH}-?T" => "[O][H][&EIT&E]"; 
		"tstopt(01){HÖH}" => "[O][H]"; 
		"tstopt(01){ICHTIG}" => "[I][G]"; 
		"tstopt(01){ICHTUNG}" => "[AU][NG]"; 
		"tstopt(01){ICHT}" => "{IG}"; // same abbreviation 
		"tstopt(01){ICH}" => "{IG}"; // same abbreviation
		"tstopt(01){HERRSCH}" => "[RR]";
		"tstopt(01)^{BRIEF}" => "[0N-][I][F]";
		"tstopt(01){BRIEF}" => "[I][F]";
		"tstopt(01){BESTENFALLS}" => "[B][E][ST][_CH]";
		"tstopt(01){SCHLIMMSTENFALLS}" => "[SCH@L3][I][MM][ST][_CH]";
		"tstopt(01)^{LEBEN}" => "[L]";
		"tstopt(01)^{LEB}" => "[L]";
		"tstopt(01)^{EIN}{HEIT}" => "[0U-][EI][N][HEIT]";
		"tstopt(01){EIN}{HEIT}" => "[EI][N][HEIT]";
		"tstopt(01){INSBESONDERE}" => "[IN][O][ND]";
		"tstopt(01){SONDERN}" => "[0N-][O][ND]";
		"tstopt(01)^{SONDER}" => "[0N-][O][ND]";
		"tstopt(01){SONDER}" => "[O][ND]";
		"tstopt(01)^{SEITE}" => "[0U-][&EIT&E][-E]";
		"tstopt(01){SEITE}" => "\\[0U-][&EIT&E][-E]";
		"tstopt(01)(\[ND\])\|{SEIT}" => "$1\\[0U-][HEIT]"; // andererseits
		"tstopt(01)\|{SEIT}" => "[HEIT]";
		"tstopt(01){SEIT}" => "[0U-][HEIT]";
		"tstopt(01)^{SCHREIB}" => "[0N-][EI][B]";
		"tstopt(01){SCHREIB}" => "[EI][B]";
		"tstopt(01)^{GREIF}" => "[0N-][EI][F]";
		"tstopt(01){GREIF}" => "[EI][F]";
		"tstopt(01)^{GRIFF}" => "[0N-][I][FF]";
		"tstopt(01){GRIFF}" => "[I][FF]";
		"tstopt(01)^{HÖR}" => "[0N-][Ö][VR]";
		"tstopt(01){HÖR}" => "[Ö][VR]";
		"tstopt(01)^{SCHRIEB}" => "[0N-][I][B]";
		"tstopt(01){SCHRIEB}" => "[I][B]";
		"tstopt(01){SEINWIRD}" => "[SEIN][WIRD]";
		"tstopt(01){WERDENMUSS}" => "[I][&E][U][SS]";
		"tstopt(01){WERDENKONNTE}" => "[I][&E][O][NN][&T&E][-E]";
		"tstopt(3){WERDENSOLL}" => "[O][&E][#4][@L]"; // different in MAC ...
		"tstopt(01){WERDENSOLL}" => "{WERDENWILL}"; // same in HF01
		"tstopt(01){WERDENWILL}" => "[I][&E][#4][@L]";
		"tstopt(01){EBENFALLS}" => "[0N-][E][B][_CH]";
		"tstopt(01){DEMNACH}" => "[0U1B-][#9][A][CH]";
		"tstopt(01){GLEICHFALLS}" => "[G@L3][_CH]";
		"tstopt(01){ALLENFALLS}" => "[A][L][#6-][_S]";
		"tstopt(01){ANDERNFALLS}" => "[0N-][A][ND][_CH]";
		"tstopt(01){GEGEBENENFALLS}" => "[G][E][B][_CH]";
		"tstopt(01){ISCH}{ER}" => "{IGER}"; // to simplify replace isch by ig (and treat it the same)
		"tstopt(01){ISCH}" => "{IG}"; // to simplify replace isch by ig (and treat it the same)
		"tstopt(01){SO}{WI}" => "[0N-][SS][/I]";
		"tstopt(01)^{FIEL}" => "[I][F]";
		"tstopt(01){FIEL}" => "\\[I][F]";
		"tstopt(01)^{SAG}" => "[A][S=]";
		"tstopt(01){SAG}" => "[A][S]";
		"tstopt(01){JED}" => "[J][E][D]";
		"tstopt(01){SOGAR}" => "[A][SOBRE]";
		"tstopt(01){SOVIEL}" => "[0N-][SS][I][@L]";
		"tstopt(01){INSOFERN}" => "[IN][SS][E][N]";
		"tstopt(01){INSOWEIT}" => "[IN][SS][HEIT]";
		"tstopt(01){FALLS}" => "[A][F][#8-][_S]";
		"tstopt(01){MAL}{ER}" => "[A][M@R6]";
		"tstopt(01){LAG}{ER}" => "[A][L@R6]";
		"tstopt(01){LEG}{ER}" => "[L@R6]";
		"tstopt(01){INDIESER}" => "[IN][DIS@VR]";
		"tstopt(01){AUFÜBER}" => "[AUF][Ä][&U]";
		"tstopt(01)^{MEHR}" => "[0N-][E][VR]";
		"tstopt(01){MEHR}" => "[E][VR]";
		"tstopt(01){UMSOMEHR}" => "[0N-][U][M][E][VR]";
		"tstopt(01){SEHR}" => "[SER]"; // spanish ser
		"tstopt(01){SOSEHR}" => "[SOBRE]"; // spanish sobre
		"tstopt(01){SOFORT}" => "[0D-][SS]"; 
		"tstopt(01){SICHER}" => "I[SER]"; // spanish ser
		"tstopt(01)^{SCHRIF}" => "[0N-][I][F]";
		"tstopt(01){SCHRIF}" => "[I][F]";
		"tstopt(01)^{MACH}$" => "[M][A][CH]";
		"tstopt(01){BEISPIEL}\[-E\]" => "{BEISPIEL}[&E][-E]";
		"tstopt(01){EBENSO}" => "[0N-][E][B][_SO]";
		"tstopt(01){UMSO}" => "[0N-][U][M][_SO]";
		"tstopt(01){JAHR}{LICH}" => "[A][J][EI][H]"; // {JÄHR} not implemented! (passed as {JAHR})
		"tstopt(01){JAHR}-?T$" => "[A][J][HEIT]";
		"tstopt(01){JAHR}-?TES" => "[A][J][&EITES]";
		"tstopt(01){JAHR}-?T" => "[A][J][&EIT&E]";
		"tstopt(01){JAHR}" => "[A][J]";
		"tstopt(01){JE}{MAL}" => "[J][Ä][M]";
		"tstopt(01)\[EI\]N{MAL}" => "[EU][M]";
		"tstopt(01){EIN}{MAL}" => "[0D-][EU][M]";
		"tstopt(01){AUCH}{NOCH}" => "{AUCH}[#2-]{NOCH}";
		"tstopt(01){AUCH}{SCHON}" => "{AUCH}[#2]{SCHON}";
		"tstopt(01){WIE}{VIEL}" => "[I][W][I][@L]";
		"tstopt(01){SEIN}{ER}" => "[SEIN@VR]";
		"tstopt(01){HEIT}{BAR}" => "[A][&EITB]";
		"tstopt(01){EIN}{SAM}" => "[0D-][EU][S]";
		"tstopt(01){WIRKLICH}" => "[I][H]";
		"tstopt(01){VON}{EINANDER}" => "[V][EU][ND]";
		"tstopt(01){M}\+?{EINANDER}" => "[M][EU][ND]";
		"tstopt(01){FÜR}\+?{EINANDER}" => "[F][EU][ND]";
		"tstopt(01){VON}(\+|\|)?{EINANDER}" => "[V][EU][ND]";
		"tstopt(01){GEGEN}(\+|\|)?{EINANDER}" => "[GEGEN][EU][ND]";
		"tstopt(01)\|{EINANDER}" => "[EU][ND]"; // nebeneinander
		"tstopt(01)^{EINANDER}" => "[0N-][EU][ND]";
		"tstopt(01){EIN}{SCHAFT}" => "[EI][SCHAFT]";
		"tstopt(01){EINST}" => "[EI][ST]";
		"tstopt(01){WÜRD}{ET}" => "[AU][&U][#5-][0N-][ET]";
		"tstopt(01){WÜRD}{EN}" => "[AU][&U][#8-][_EN]";
		"tstopt(01){SIESICH}" => "[S=][I][S]";
		"tstopt(01){WIRMUSS}" => "[W][U][SS]";
		"tstopt(01){KÖNNENWIR}" => "[0N-][Ö][NN][W]";
		"tstopt(01){HABEICH}" => "[A][B][_CH]";
		"tstopt(01){HATER}" => "[A][H][E][VR]";
		"tstopt(01){ICHHABE}" => "[0N-][I][^CH][-E]";
		"tstopt(01){BINICH}" => "[I][B][_CH]";
		"tstopt(01){ICHGLAUBNICHT}" => "[0U-][AU][^CH][N]";
		"tstopt(01){ICHGLAUB}" => "[0U-][AU][^CH]";
		"tstopt(01)^{SAGEICH}" => "[A][S=][_CH]";
		"tstopt(01){SAGEICH}" => "[A][S][_CH]";
		"tstopt(01){ICHBIN}" => "[0N-][I][^CH][N]";
		"tstopt(01){WURDEICH}" => "[AU][&U][_CH]";
		"tstopt(01){WIRWOLLEN}" => "[W][O][L][EN]";
		"tstopt(01){WURD}" => "[AU][&U]";
		"tstopt(01){GEWESEN}" => "[G]";
		"tstopt(01)^{GEWORDEN}" => "[I][&O]";
		"tstopt(01){GEWORDEN}" => "\\[I][&O]";
		"tstopt(01){WIRWURD}" => "[W]\\[AU][&U]";
		"tstopt(01){WURDWIR}" => "[AU][&U]\\[W]";
		"tstopt(01)^{WOLL}" => "[0N-][O][L]";
		"tstopt(01){WOLL}" => "[O][L]";
		"tstopt(01){STELL}U\[NG\]" => "[STUNG]";
		"tstopt(01){STELL}" => "[ST]";
		"tstopt(01){STEHT}" => "[STT]";
		"tstopt(01){STEH}" => "[ST]";
		"tstopt(01){STÄND}\[?-E\]?" => "[A][ST][Ü][-EI]";
		"tstopt(01){STÄND}{ER}" => "[A][ST][EI][AR]";
		"tstopt(01){STÄND}" => "[A][ST]";
		"tstopt(01){STAND}" => "[A][ST]";
		"tstopt(01){HÄTT}" => "[TT]";
		"tstopt(01){MACH}{EN}" => "\\[0U1-]{EN}"; // does this work? baseline + 1 => not very logic ...
		"tstopt(01){MACH}" => "\\[0U-]"; 
		"tstopt(01){MACHUNG}" => "\\[AU][NG]";
		"tstopt(01){WIRNEHM}" => "[W][E][M]";
		"tstopt(01){MUSSICH}" => "[0N-][U][SS][_CH]";
		"tstopt(01)^{NIMM}" => "[0N-][I][MM]";
		"tstopt(01){NIMM}" => "[I][MM]";
		"tstopt(01)^{STIMM}" => "[0N-][I][MM]";
		"tstopt(01){STIMM}" => "[I][MM]";
		"tstopt(01)^{NOMM}" => "[0N-][O][MM]";
		"tstopt(01){NOMM}" => "[O][MM]";
		"tstopt(01)^{NEHM}{ER}" => "[0N-][E][M@R6]";
		"tstopt(01){NEHM}{ER}" => "[E][M@R6]";
		"tstopt(01)^{NEHM}" => "[0N-][E][M]";
		"tstopt(01){NEHM}" => "[E][M]";
		"tstopt(01)^{EIN}$" => "[0D-][E][-EI]";
		"tstopt(01){EIN}$" => "[E][-EI]";
		"tstopt(01)^{EIN}B" => "[0D-][EI][B]";
		"tstopt(01)^{EIN}" => "[0D-][EI][N]";
		"tstopt(01){EIN1}" => "[#9][#6][-EI]";
		"tstopt(01)^{EINE}" => "[0D-][EI][N][-E]";
		"tstopt(01){EINE}" => "[EI][N][-E]";
		"tstopt(01)^{EINEN}" => "[0D-][EI][N]";
		"tstopt(01){EINEN}" => "[EI][N]";
		"tstopt(01)^{EINEM}" => "[0D-][EI][M]";
		"tstopt(01){EINEM}" => "[EI][M]";
		"tstopt(01)^{EINER}" => "[0D-][EI][VR]";
		"tstopt(01){EINER}" => "[EI][VR]";
		"tstopt(01)^{EINES}" => "[0D-][EI][S]";
		"tstopt(01){EINES}" => "[EI][S]";
		"tstopt(01)^{GLAUB}" => "[0N-][AU][B]";
		"tstopt(01){GLAUB}" => "[AU][B]";
		"tstopt(01)^{GLÄUB}" => "[0N-][EU][B]";
		"tstopt(01){GLÄUB}" => "[EU][B]";
		"tstopt(01)^{LIESS}" => "[0N-][I][SS]";
		"tstopt(01){LIESS}" => "[I][SS]";
		"tstopt(01)^{FASS}" => "[0N-][A][SS]";
		"tstopt(01){FASS}" => "[A][SS]";
		"tstopt(01){NUMMER}" => "[N=][VR]";
		"tstopt(01){WÜRD}" => "[AU][&U][#7-][0N-]"; // very special case ... shift position to left in order to "cross" the &u with ending
		"tstopt(01){SEI}" => "[0U-][#9][-EI]";
		"tstopt(01){SEI_}(?!(?:\[ST\]|D))" => "[0U-][EI][&E]";
		"tstopt(01){SEI_}" => "[0U-][EI]";
		"tstopt(01){ICHMAG}" => "[0N-][I][^CH][A][G]";
		"tstopt(01){MÖG}" => "[0N-][Ö][G]";
		"tstopt(01){MÖCH}" => "[0N-][Ö][CH]";
		"tstopt(01){LANG}" => "[A][NG]";
		"tstopt(01){LÄNG}" => "[0N-][Ä][NG]";
		"tstopt(01){DING}" => "[I][NG]";
		"tstopt(01){KOST}" => "[O][K]";
		"tstopt(01){KÖST}{LICH}" => "[O][K][EI][H]";
		"tstopt(01){KÖST}{IGUNG}" => "[O][K][EU][NG]";
		"tstopt(01){KÖST}" => "[O][K]";
		"tstopt(01){ODER}" => "[0N-][O][D]";
		"tstopt(01){GEH}" => "[G]";
		"tstopt(01){GING}" => "[I][NG]";
		"tstopt(01){GANG}" => "[A][NG]";
		"tstopt(01)^{SAM}" => "[A][S=]";
		"tstopt(01){SAM}" => "[A][S]";
		"tstopt(01){DURCH1}" => "[U][D]";
		"tstopt(01){JA}" => "[A][J]";
		"tstopt(01){DU}" => "[U][D]";
		"tstopt(01){ZUM}" => "[ZUM]";
		"tstopt(01){BEISPIEL}" => "[I][BEI]";
		"tstopt(01){ABER}" => "[A][B@R6]";
		"tstopt(01){VIEL}" => "[0N-][I][@L]";
		"tstopt(01){DOCH}" => "[O][D]";
		"tstopt(01){DOPPEL}" => "[O][D@L3]";
		"tstopt(01){HIER}" => "[I][VR]";
		"tstopt(01)^{NOCH}" => "[0N-][O][CH]";
		"tstopt(01){NOCH}" => "[O][CH]";
		"tstopt(01){HER}" => "[H]";
		"tstopt(01){BIST}" => "[I][B]";
		"tstopt(01){BIS}" => "[I][B]";
		"tstopt(01){MAN}" => "[A][M]";
		"tstopt(01){MÄNN}{ER}" => "[A][M][EI][AR]";
		"tstopt(01){MÄNN}{LICH}" => "[A][M][EI][H]";
		"tstopt(3){DENN}" => "[Y]";
		"tstopt(01)^{DENN}" => "[0N-][E][NN]";
		"tstopt(01){NUR}" => "[U][VR]";
		"tstopt(01){SCHON}" => "[O][SCH]";
		"tstopt(01)^{IMMER}" => "[0D-][I][MM]";
		"tstopt(01){IMMER}" => "[I][MM]";
		"tstopt(01){FALT}" => "[A][F]";
		"tstopt(01){FALL}" => "[A][F]";
		"tstopt(01){FÄLL}\[-E\]" => "[A][F][Ü][-EI]";
		"tstopt(01){FÄLL}-?T$" => "[A][F][HEIT]";
		"tstopt(01){FÄLL}-?T" => "[A][F][&EIT&E]";
		"tstopt(01){FÄLL}" => "[A][F]";
		"tstopt(01){FACH}" => "[A][F]";
		"tstopt(01){FÄCH}{ER}" => "[A][F][EI][AR]";
		"tstopt(01){BANK}" => "[A][NK]";
		"tstopt(01){DANK}" => "[A][NK]";
		"tstopt(01){DENK}" => "[NK]";
		"tstopt(3){WANN}" => "[A][NN]"; // only MAC
		"tstopt(01){NUN}" => "[U][&U]";
		"tstopt(01){ALSO}" => "[0N-][A][L][_SO]";
		"tstopt(01){SIE}" => "[S][/I]";
		"tstopt(0){DISER}" => "[DIS@VR]";
		"tstopt(01){MAL}" => "[A][M]";
		"tstopt(01){DAMIT}" => "[AU][D]";
		"tstopt(01){BALD}" => "[A][B]";
		"tstopt(01){BAHN}" => "[A][B]";
		"tstopt(01){BAND}" => "[A][B]";
		"tstopt(01){BÄND}\[-E\]" => "[A][B][Ü][-EI]";
		"tstopt(01){BÄND}{ER}" => "[A][B][EI][AR]";
		"tstopt(01){BÄND}{IGUNG}" => "[A][B][EU][NG]";
		"tstopt(01){BÄND}" => "[A][B]"; // all other cases: don't take care of umlaut
		"tstopt(01){REINFALL}" => "[AR][EU][F]";
		"tstopt(01){EINFALL}" => "[0D-][EU][F]";
		"tstopt(01){EINFACH}" => "[0D-][EU][F]";
		"tstopt(01){UNSER}$" => "[0N-][U][NS][#0]"; // #0 to make ns non final
		"tstopt(01){UNSER}" => "[0N-][U][NS]";
		"tstopt(01){VOLL}{ER}" => "[O][V@R6]";
		"tstopt(01){VOLL}" => "[O][V]";
		"tstopt(01)^{RICHT}" => "[I][AR]";
		"tstopt(01){RICHT}" => "\\[I][AR]";
		"tstopt(01){RECHTZEITIG}" => "[AR][&EITG]";
		"tstopt(01){RECHT}{IGUNG}" => "[AR][&TG][U][NG]";
		"tstopt(01){RECHT}IG" => "[AR][&TG]";
		"tstopt(01){RECHT}" => "[AR][&T]";
		"tstopt(01){RECH}" => "[AR]";
		"tstopt(01){LETZT}" => "[L][&T]";
		"tstopt(01){BESTEN}" => "[B][E][ST]";
		"tstopt(01){SPRECH}" => "[SP@R6]";
		"tstopt(01){SPRACH}" => "[A][SP@R6]";
		"tstopt(01)^{SPRICH}" => "[I][SP@R6]";
		"tstopt(01){SPRICH}" => "\\[I][SP@R6]";
		"tstopt(01){SPRUCH}" => "[U][SP@R6]";
		"tstopt(01){SPRÜCH}\[-E\]" => "[U][SP@R6][Ü][-EI]";
		"tstopt(01){SPRÜCH}(?:\[H\]|{LICH})" => "[U][SP@R6][EI][H]";
		"tstopt(01){SPROCH}" => "[O][SP@R6]";
		"tstopt(01){ZUVIEL}" => "[Z][#3][I][@L]";
		"tstopt(01){MÜSSWIR}" => "[0N-][Ü][SS][W]";
		"tstopt(01){JANOCH}" => "[A][J][O][CH]";
		"tstopt(01){GEHENSIE}" => "[G][S][/I]";
		"tstopt(01){TRANS}" => "[A][T@R]";
		"tstopt(01){GANZ}" => "[A][G]";
		"tstopt(01){GÄNZ}E\[ND\]" => "[A][G][EI][ND]";
		"tstopt(01){GÄNZ}-?T$" => "[A][G][&EIT]";
		"tstopt(01){GÄNZ}-?T" => "[A][G][&EIT&E]";
		"tstopt(01){GÄNZ}" => "[A][G]";
		"tstopt(01){GENAU}" => "[AU][G]";
		"tstopt(01){GROSS}" => "[O][G@R]";
		"tstopt(01){GRÖSS}-T$" => "[O][G@R][&EIT]";
		"tstopt(01){GRÖSS}-T" => "[O][G@R][&EIT&E]";
		"tstopt(01){GRÖSS}\[-E\]" => "[O][G@R][Ü][-EI]";
		"tstopt(01){GRÖSS}{EN}" => "[O][G@R][Ü][-EI]";
		"tstopt(01){GRÖSS}" => "[O][G@R]"; // treat it like gross
		"tstopt(01){TRANSPORT}" => "[U][T@R]";
		"tstopt(01){WIRIHNEN}" => "[W][I][N][EN]";
		"tstopt(01){GESELLSCHAFT}" => "[SCHAFT]";
		"tstopt(01){DASHEISST}" => "[A][S=][H]";
		"tstopt(01)^{SCHRUMPF}" => "[0N-][U][MPF]";
		"tstopt(01){SCHRUMPF}" => "[U][MPF]";
		
		"tstopt(01)^{MISS}" => "[0D-][I][SS]";
		"tstopt(01){MISS}" => "[I][SS]";
		"tstopt(01){EL}" => "[#5][@L]";

		"{MISS}-?T" => "MI[SS][&T]"; // bleeding with MA12 => place MA12 rule before!
		"{MISS}" => "MI[SS]"; // bleeding with MA12 => place MA12 rule before!

		"tstopt(01){ESIST}" => "[ES][#6-][U][IST]";		// spacing comes from token definition
		"{ESIST}" => "[ES]\\[#0][IST]";		// spacing comes from token definition

		"{DA@R}" => "[DA@R]";  
		"{AUF}" => "[AUF]";  
		
		"{GEHABT}" => "[G][&T]";
		"^{AN}" => "[0N-]AN";
		"{AN}" => "AN";
		
		"{WI}(-)?(.?)" => "[W][/I]\\$2";
		"{ZWIE}" => "[ZW][&I]";

		"{HEIT}{HEIT}" => "[&EIT&E][HEIT]"; // Gescheitheit

		"^{SO}" => "[0n-][SS]";
		"(\||\\){SO}" => "$1[0n-][SS]";
		"L{SO}$" => "L[SS]"; // also
		"#?{SO}$" => "[0N-][SS]";
		"{SO}$" => "[SS]";
		
		"(\[0D-\]\[AU\]\[SS\]{ER}){DEM}" => "$1[#0][#0][#4-][EM]"; // ausserdem: make [EM] longer (trick of 3x [#x] must be used in order to avoid autospacing in postspacer ...
		"(?<!ALL)}{DEM}" => "}[EM]";

		// trickier ones
		"\[&T\]{ER}" => "[&T][VR]";  // hopefully better this way
		"\[&T\]{ALL}" => "{&TALL}";
		//"{TUM}\[VR\]" => "{TUM}{VR}";	//??
		//"{TUM}{VR}" => "{TUM}[VR]"; //??
		"(?<!U)R}t" => "R}[&T]";
		"^\{ANT\}" => "[0N-][#N]{ANT}";
		"{HEIT}{ET}" => "{HEIT}[&E][ET3/4]";
		"{ET}(e[^s]|{EN}|{EM})" => "{ET}[&E]$1";
		"\[EI\]t" => "[EI]T";

		"{ALL}E{DEM}" => "[A][L][-E]\\[DEM]"; // alledem
		"{ALL}{DEM}" => "[A][L]\\[DEM]"; // alldem

		//"{VOR}r" => "[VOR+AR]";
		"{ER}\[AR\]" => "[VR+AR]";
		"(.){DES}" => "$1[S]";
		"{DES}" => "[S=]";
		"^{DE(M|N)}$" => "[DE$1]";
		"{DEM}(-?)N" => "[^DEM]$1N";
		"{DE(M|N)}j" => "[^^DE$1]J";
		"{DE(M|N)}\[j\]" => "[^^DE$1][J]";
		"{DE(M|N)}[-+]?g" => "[^^DE$1]G";
		"{DE(M|N)}[-+]?{G" => "[^^DE$1]{G";
		"{DE(M|N)}[-+]?{GE}" => "[^^DE$1]{GE}";
		"{DE(M|N)}z" => "[^^DE$1]Z";
		"{DE(M|N)}{ZU}" => "[^^DE$1]{ZU}";
		"{DE(M|N)}" => "[E$1]";
		"{SEIN}" => "[SEIN]";
		

		"o{HEIT}" => "[&O]{HEIT}";
		"\[AU\]{HEIT}" => "[AU][&E]{HEIT}";
		"{SCHAFT}ler(n|in(nen)?)?$" => "{SCHAFT}[&L]{ER}$1";
		"{TUM}er(s|in|innen)?$" => "{TUM}[VR]$1";
		"{HEIT}({EN}|{EM})" => "{HEIT}[&E]$1";
		"{HEIT}er" => "{HEIT}[VR]";
		"{HEIT}el" => "{HEIT}[&E][-E]L";
		"{HEIT}e$" => "{HEIT}[&E][-E]";
		"{HEIT}es" => "{&EITES}";
		"{HEIT}e\[NS\]" => "[&EITNS]";
		"{HEIT}[Ii]-?[Gg]" => "[&EITG]";
		"{HEIT}u\[NG\]" => "[A][&EITNG]";
		"{HEIT}e" => "{HEIT}[&E]e";

		"^\{ER\}" => "[0N-][#4][VR]";
		//"\[&T\]{ER}" => "[&TVR]"; // even 2x ...
		// trivial ones
		"(.){DASS?}" => "$1[A][S]"; // sodass, ebendas
		"{DASS?}" => "[#NS][S=]";
		"{HEIT}{ER}" => "[&EITVR]";
		//"{ER}" => "[E][VR]";
		//"{BE}" => "[B]";
		//"{GE}" => "[G]";
		"{UND}" => "[#NS][&U]";
		"{DI}" => "[D]";
		"{MIT}" => "[M]";
		"{VON}" => "[V]";
		"{FÜR}" => "[F]";
		"{LICH}" => "[H]";
		"{ALS}" => "[L]";
		"^\[AR\]E{CON}" => "[AR][E][&E][C]"; // rekonstruieren (qué chorrada ... )
		"O{CON}" => "[&O][C]"; // Prokonsul
		"{CON}" => "[C]";
		"{ES}" => "[ES]";
		"{WENN}" => "[WENN]";
		"{WIR}" => "[W]";
		"{ZU}" => "[Z]";
		"{DER}" => "[VR]";
		"{NICHT}" => "[NICHT]";
		"{HEIT}ig" => "[#W][TIG]";
		"\|{VER}" => "[EN][AR]";
		"^{VER}" => "[0N-][EN][AR]";
		"\\{VER}" => "\\[0N-][EN][AR]";
		"{VER}" => "[EN][AR]";
		"{DEM}" => "[0N-][EM]";
		"{DEN}" => "[0N-][EN]";
		"{SI}" => "[S=][/I]";
		"{UN}" => "[#NS][&U]";
		"{IN}\[EM\]" => "[IN-][EM]"; // indem
		"{IN}" => "[IN]";
		"{WAR}T$" => "[0U-][#0S][&A][&T]";
		"{WAR}" => "[0U-][#0S][&A]";
		"{WÄR}" => "[0U-][#WS][&A]";
		"{HAT}{ET}" => "[HAT][D.][ET]";
		"{ET}" => "[ET]";
		"{HAT}" => "[HAT]";
		"{DA}" => "[DA]";
		"{DES}" => "[0N-][S]";
		//"{SIND}" => "[SIND]";
		//"{DIS}" => "[0N-][#0][I][S]";
		"{ZER}" => "[Z@R]";
		"{ANTI}" => "[0N-][ANTI]";
		//"^{UNTER}" => "[0N-][N@R6]";
		"^{UNTER}" => "[N=@R6]";
		"\\{UNTER}" => "\\[N=@R6]";
		"{UNTER}" => "[N@R6]";
		"^{ÜBER}" => "[0N-][#WS][&U]";
		"\\(\[#.\])?{ÜBER}" => "\\[0N-]$1[#WS][&U]";
		"{ÜBER}" => "[#WS][&U]";
		"{WI}" => "[W][/I]";
		"{WIDER}" => "[W@R6]";
		//"{SOLCH}" => "[SOLCH]"; // with following rules token [solch] probably becomes obsolete
		"^{SOLCH}" => "[S=]O[CH]";
		"{SOLCH}" => "SO[CH]";
		"{WELCH}" => "[CH]";
		"{HEIT}{HIN}" => "[&EITH][#0][N]";
		"{HIN}" => "[H][#0][N]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[&T\]\[#N\]\[VR\]$" => "[&T][VR]";
		"{USW}" => "[A][&U][SS]";
		"{USF}" => "[A][&U][SS][FORT]";
		"{GEHABT}" => "[G][&T]";
		"{HAB}T" => "[HAB][&T]";
		"{HAB}" => "[HAB]";
		"{ZUSAMMEN}" => "[Z][A][S]";
		"{ER}L(\[#.\]\[-EI\])$" => "[VR@L]$1"; // waserlei, allerlei
		"\[&T\]\[VR\]L(\[EI\]N)" => "[&TVR@L]$1"; // Töchterlein		
		"{ER}L((?:\[#.\])?(?:\[I\]|I)\[NG\](?:S|\[S\]|\[-E\])?$)" => "[VR@L]$1"; // Pfifferling[se]
		"{ER}" => "[VR]";
		"(^|\\){INTER}" => "$1[INTER]";
		"{INTER}" => "[I][INTER]";
		"^{ZURÜCK}" => "[ZURÜCK]";
		"{ZURÜCK}" => "[I][ZURÜCK]";
		"{E(N|M)}\|" => "[E][$1]|";   // dissolve ending in composed words
		"{E(N|M)}" => "[E$1]";
		"{WO}" => "[WO]";
		"{SIND}" => "[ND]"; // token "sind" becomes obsolete with this rule
		"{WAS}" => "[A][W]"; // token "was" probably obsolete
		"{AUS}" => "[AUS]";
		"{UR}\[AR\]" => "[UR]I[AR]"; // Urrecht
		"{UR}" => "[UR]";
		"{SCHAFT}" => "[SCHAFT]";
		"^{SICH}\|\[VR\]" => "[SICH]\\[0N-][#3][VR]"; // Sicherfüllen
		
		"^{SICH}\|{ANT}" => "[SICH]\\[0N-][ANT]"; // das Sichaufopfern
		"^{SICH}\|" => "[SICH]\\"; // das Sichaufopfern

		// optional abbreviations (option0: MAC)		
		"tstopt(01){BAR}" => "[A][B]";
		"tstopt(01){KOMM}" => "[O][K]";
		"tstopt(01){KÖMM}\[H\]" => "[O][K][EI][H]";
		"tstopt(01){KAM}" => "[A][K]";
		"tstopt(01)^{KAUF}" => "[0N-][AU][F]";
		"tstopt(01){KAUF}" => "[AU][F]";
		"tstopt(01)^{KÄUF}" => "[0N-][EU][F]";
		"tstopt(01){KÄUF}" => "[EU][F]";
		"tstopt(01)^{LAUF}" => "[0N-][AU][F]";
		"tstopt(01){LAUF}" => "[AU][F]";
		"tstopt(01)^{LÄUF}" => "[0N-][EU][F]";
		"tstopt(01){LÄUF}" => "[EU][F]";
		"tstopt(01)^{LIEF}" => "[0N-][I][F]";
		"tstopt(01){LIEF}" => "[I][F]";
		//"tstopt(01)\[VR\]{IGER}" => "[VR][I][DUMMY][I][VR]"; // special treatment after are (1 higher) // darned ... no chance to get that with SE1rev1 (apart from creating new token) ...
		"tstopt(01){IGER}" => "[I][VR]";
		"tstopt(01){IGUNG}" => "[AU][NG]";
		"tstopt(01){IG}([es]|\[)" => "[I][&E]$1";
		"tstopt(01){IG}($|\\|\|)" => "[/I]$1";
		"tstopt(01){NISS}" => "[I][SS]";
		"tstopt(01){NIS}" => "[I][S]";
		"tstopt(01)^{KANN}" => "[0N-][A][NN]";
		"tstopt(01)^{KONN}" => "[0N-][O][NN]";
		"tstopt(01)^{KÖNN}" => "[0N-][Ö][NN]";
		"tstopt(01){KANN}" => "[A][NN]";
		"tstopt(01){KONN}" => "[O][NN]";
		"tstopt(01){KÖNN}" => "[Ö][NN]";
		"tstopt(01){KENN}" => "[K]";
		"tstopt(01){KANNT}" => "[A][K]";
		"tstopt(01)^{SEH}" => "[S=]";
		"tstopt(01){SEH}" => "[S]";
		"tstopt(01)^{SIEH}" => "[I][S=]";
		"tstopt(01){SIEH}" => "\\[I][S=]";
		"tstopt(01)^{SAH}" => "[A][S=]";
		"tstopt(01){SAH}" => "[A][S=]"; // not sure when this has to be separated ?!
		"tstopt(01){LEG}" => "[L]";
		"tstopt(01){LAG}" => "[A][L]";
		"tstopt(01){LIEG}" => "[I][L]";
		"tstopt(01)^{NAHM}" => "[0N-][A][M]";
		"tstopt(01){NAHM}" => "[A][M]";
		"tstopt(01){MUSS}" => "[0N-][U][SS]";
		"tstopt(01)^{MESS}" => "[0N-][E][SS]";
		"tstopt(01){MESS}" => "[E][SS]";
		"tstopt(01)^{MASS}" => "[0N-][A][SS]";
		"tstopt(01){MASS}" => "[A][SS]";
		"tstopt(01)^{MÄSS}" => "[0N-][Ä][SS]";
		"tstopt(01){MÄSS}" => "[Ä][SS]";
		"tstopt(01){WUSS}" => "[0N-][U][SS]";
		"tstopt(01){MÜSS}" => "[0N-][Ü][SS]";
		"tstopt(01){WÜSS}" => "[0N-][Ü][SS]";
		"tstopt(01){WISS}" => "[0N-][I][SS]";
		"tstopt(01){WEISS}" => "[0N-][EI][SS]";
		"tstopt(01){EL}" => "[#4][@L]"; // use custom (hardcoded) distance
		"tstopt(01){IELL}" => "[#4][@L]"; // use custom (hardcoded) distance
		"tstopt(01){ELL}" => "[0N-][E][L]"; 
		"tstopt(01)^{SICH}" => "[I][S=]"; 
		"tstopt(01){SICH}" => "\\[I][S=]"; 
		"tstopt(01)^{LOS}" => "[0N-][O][S]"; 
		"tstopt(01){LOS}" => "[O][S]"; 
		"tstopt(01)^{LASS}" => "[0N-][A][SS]"; 
		"tstopt(01){LASS}" => "[A][SS]"; 
		"tstopt(01)^{LÖS}" => "[0N-][Ö][S]"; 
		"tstopt(01){LÖS}" => "[Ö][S]"; 
		"tstopt(01)^{LÄSS}" => "[0N-][Ä][SS]"; 
		"tstopt(01){LÄSS}" => "[Ä][SS]"; 
		"tstopt(01)^{LOST}" => "[0N-][O][ST]"; 
		"tstopt(01){LOST}" => "[O][ST]"; 
		"tstopt(01)^{LÖST}" => "[0N-][Ö][ST]"; 
		"tstopt(01){LÖST}" => "[Ö][ST]"; 
		"tstopt(01)^{HANDEL}" => "[0N-][#4][@L]"; 
		"tstopt(01){HANDEL}" => "[#4][@L]"; 
		"tstopt(01)^{SOLL}" => "[0D-][#4][@L]"; 
		"tstopt(01){SOLL}" => "\\[0D-][#4][@L]"; 
		"tstopt(01)^{WILL}" => "[0U-][#4][@L]"; 
		"tstopt(01){WILL}" => "\\[0U-][#4][@L]"; 
		"tstopt(01){ICHMUSS}" => "[0N-][#4][I][^CH][U][SS]"; 
		"tstopt(01){ERMUSS}" => "[0N-][E][VR][U][SS]"; 
		"tstopt(01){WIRMÜSS}" => "[W][Ü][SS]"; 
		"tstopt(01){ICHWILL}" => "[0N-][I][^CH][#4][I][@L]"; 
		"tstopt(01){WIRSIND}" => "[W][ND]"; 
		"tstopt(01){WIRKÖNNEN}" => "[W][Ö][NN][EN]"; 
		"tstopt(01){ICHKANN}" => "[0N-][I][^CH][A][NN]"; 
		"tstopt(01){WIRHABEN}" => "[W][A][B][EN]"; 
		"tstopt(01){ICHKÖNNTE}" => "[0N-][I][^CH][Ö][NN][&T&E][-E]"; 
		"tstopt(01){KANNER}" => "[0N-][A][NN][E][VR]"; 
		"tstopt(01){INDER}" => "[IN][VR]"; 
		"tstopt(01){INDIE}" => "[IN][D]"; 
		"tstopt(01){INDEN}" => "[IN][EN]"; 
		"tstopt(01){INDIES}" => "[IN][DIS]"; 
		"tstopt(01){AUFDER}" => "[AUF+AR]"; 
		"tstopt(01){BEIDER}" => "[BEI+AR]"; 
		"tstopt(01){VONDER}" => "[V@R6]"; 
		"tstopt(01){MITDER}" => "[M@R6]"; 
		"tstopt(01){KANNICH}" => "[0N-][A][NN][_CH]"; 
		"tstopt(01){WILLICH}" => "[0U-][#4][@L][_CH]"; 
		"tstopt(01){SOLLICH}" => "[0D-][#4][@L][_CH]"; 
		"tstopt(01){WENNICH}" => "[NN][_CH]"; 
		"tstopt(01){KAUFICH}" => "[0N-][AU][F][#2][_CH]"; 
		"tstopt(3){DANN}" => "[A][Y]"; 
		//"tstopt(3){DENN}" => "[Y]"; 
		"tstopt(01){DANN}" => "[A][NN]"; 
		//"tstopt(01){DENN}" => "[E][NN]"; 
		"tstopt(01)^{UNS}" => "[0N-][U][NS]"; 
		"tstopt(01){UNS}" => "[U][NS]"; 
		
		"tstopt(01){HEIT}" => "[HEIT]"; 
		
		"tstopt(01){EITR}" => "[0D-][EI][T@R]";
		"tstopt(01){EIPR}" => "[0D-][EI][P@R6]";
		
		//"{AN}" => "[0N-][A][N]";

		
		"{HEIT}" => "[HEIT]";

		"(.){DIS}" => "$1[#1-][I][S]"; // überdies
		"{RÜCK}" => "[rück]";
		"{ANT}" => "[ANT]";
		"E#{HAFT}" => "[E][&E][A][F]"; // ränkehaft
		"{HAFT}" => "[A][F]";
		"{FORT}" => "[FORT]"; 
		"{ION}" => "[ION]"; 
		"{DIS}" => "[DIS]"; 
		"{SICH}" => "[SICH]"; // sichs
		"{SO}" => "[SS]"; // alsobald
		"{WEM}" => "WEM"; // irgendwem

		"\[&T\]ES" => "[&TES]"; // necessary for "gehabtes"
		
	#EndSubSection(substituter)
	#BeginSubSection(laterewriter)
		// due to additional abbreviations in MAC some combinations / transcription / rewritings
		// are not handled (correctly)
		// laterewriter is an additional step to do those rewritings retroactively
		"\]-" => "]"; // get rid of annoying - ... :)
		"\]\+" => "]"; // get rid of annoying + ... :)
		"\]#" => "]"; // get rid of annoying # ... :)
		"}-" => "}"; // get rid of annoying - ... :)
		
		"(\[W@R6\])\[?T\]?" => "$1[&T]";
		"(\\\[#.\])S" => "$1[S=]"; // Fortunatussäckel 

		"tstopt(01)\[((?:NN|S=|SS|@L|ST|0U-|MM|CK|CH|NG|NK|NZ|ND|RR|SER|AR|VR|CH|MPF|G@R|ANT|W@L|L@R6|M@R6|W@R6|B@R6|D@L3|T@R|SP@R6|F@R6)|[BCDFGHJKLMNPQRSVWXYZ])\][Tt](?:\[?-?E\]?\[?S\]?|E)" => "[$1][&TES]"; 
		"tstopt(01)\[((?:NN|S=|SS|@L|ST|0U-|MM|CK|CH|NG|NK|NZ|ND|RR|SER|AR|VR|CH|MPF|G@R|ANT|W@L|L@R6|M@R6|W@R6|B@R6|D@L3|T@R|SP@R6|F@R6)|[BCDFGHJKLMNPQRSVWXYZ])\][Tt](E|\[-E\])" => "[$1][&T&E]$2"; 
		"tstopt(01)\[((?:NN|S=|SS|@L|ST|0U-|MM|CK|CH|NG|NK|NZ|ND|RR|SER|AR|VR|CH|MPF|G@R|ANT|W@L|L@R6|M@R6|W@R6|B@R6|D@L3|T@R|SP@R6|F@R6)|[BCDFGHJKLMNPQRSVWXYZ])\][Tt]" => "[$1][&T]"; // kommt, kauft
		"\[&T\]\[ET\]" => "[&T&E][ET3/4]";
		"\[&T\]\[E([NM])\]" => "[&T&E][E$1]";
		"tstopt(01)\[EI\]\[O\]" => "[EI][&E][O]"; // parteilos 01
		"tstopt(01)\[&T\]\[O\]" => "[&T][&E][O]"; // haltlos 01
		"tstopt(01)\[?E\]?-?\[?L\]?(\[?U\]?\[NG\])$" => "[#4][@L]$1";
		
		"tstopt(01)\[HEIT\]\[H\]" => "[&EITH]"; // weither, zeitlich

		"\[?(?<!N)(G)\]?\[?L\]?" => "[G@L3]"; // would be fabulous to have kind of gosub branching (rewriter could be recalled at this point ...)

		// Machthaber
		"\[&T\]\|?\[HAB\]\[VR\]" => "[A][&TB@R6]";
 		//"\[&TM\]\[VR\]" => "[&TM@R6]"; // Reichtümer: this rule is wrong!?
		"\[&T\]\[HAFT\]" => "[A][&TF]"; // gesamthaft
		"\[&T\]\|?\[?B\]?" => "[&TB]"; // Wartburg
		
		// haltestelle
		"\[&T\]E" => "[&T][&E][E]";
		"\[&T\]\[-E\]" => "[&T][&E][-E]";
		"\[ANT\]\[EN\]" => "[ANT][&E][EN]"; // Kommissionen
		"\[HEIT\]\[O\]\[S\]" => "[&EIT&E][O][S]"; // arbeitslos (not like in the book)

		"\[&T&E\]ES" => "[&TES]"; // gutes 

		"Ä\[\/I\]" => "[Ä][&A][/I]"; europäisch

		"\[&T\]\|?\[(A|Ä)\]\[&A\]" => "[&T&E][$1][&A] "; // Ratschlag, -schläge
		"\[&EIT&E\]\[VR\]" => "[&EITVR]"; // recorrection
		"\[&T&E\]\[HAB\]" => "[A][&TB]"; // recorrection Guthaben
		"\[HEIT\]S" => "[&EITS]"; // einerseits
		//"\[VR\]L" => "[VR@L]"; // waserlei
		"\[ET\]\[VR\]" => "[&ETVR]"; // geendeter

		"\[&T\](\[F@L\])" => "[&T-1]$1"; // Sintflut

		"\[ET\]-?L(\[#.\]\[&I\])" => "[&ET3@L3]$1"; // Heimetli
		"\[&T-1\]-?K" => "[&TK]"; // hartköpfigen
		"\[&T\^SCH\](?!$)" => "[&TSCH]"; // Kaltschnauzigkeit
		"(\[&T&E\]\[EI\])(I\[\^SCH\])" => "$1[&E]$2"; // parteiisch

	#EndSubSection(laterewriter)
	#BeginSubSection(latesubstituter)
		"{BE}" => "[B]";
		"{GE}" => "[G]";  // Getue (must be placed here because of &t in laterewriter)
		"{VOR}" => "[VOR]"; // must be substituted here in order to get correct spacing
		"{SELB}" => "[SELB]"; // idem
		"(..){WERD}" => "$1\\[WERD]"; // Vollerwerden
		"{WERD}" => "[WERD]"; 
		"{M}" => "[M]";
		"{GEGEN}" => "[GEGEN]";
		"{NICHT2}" => "[NICHT]";
		"{HEIT}{HEIT}" => "[&EIT&E][HEIT]"; // Gescheitheit
		"{BEI}" => "[BEI]"; // Beifallsbezeugung
		"{ALL}" => "[ALL]"; // überallhin
		"{DURCH}" => "[DURCH]";
		"{WIRD}" => "[WIRD]";:
		"{IST}" => "[IST]"; // ists
		"{HEIT&UL}" => "[HEIT&UL]"; // Meitschi
		"\[HEIT\]B" => "[&EITB]"; // unbestreitbar

	#EndSubSection(latesubstituter)
	#BeginSubSection(rewriter2)

		"\[&T\]\[HEIT\]" => "[&T&E][HEIT]"; // Unbekümmertheit

		"\[&T\]\[&ETES\]" => "[&T&E][&TES]"; // beleuchtetes

		"(\[VR@L\])-?T" => "$1[&T]"; // perlte

		//"\[&T\]-?\[H\]" => "[&T3/4][H]";
		"\[&T\]-?\[H\]" => "[&TH]";
		"\[&T\]-?\[VR\]" => "[&TVR]";
		"\[&T\]\[?S\]?(?!CHAFT|CH)" => "[&TS]";
		"(\[&TH\])T" => "$1[&T]"; // veröffentlichten (&t after secondary &th)
		"\[&T\](\[E[MN]\])" => "[&T&E]$1"; // idem
		"\[&T\]\[VR\]" => "[&TVR]"; // idem (all these secondary groups ...)
		"\[&T\]ES" => "[&TES]"; // idem
		"\[&T\](\[-E\])" => "[&T&E]$1"; // perlte
		"\[NICHT\]\|?\[AR\]" => "I[N=@R6]"; // Nichtraucher

	#EndSubSection(rewriter2)
	#BeginSubSection(separator2)
		// why are there 2 separators?!
		// separator decides wether or not a word should be written separatedly
		"\[&EITS\](\|)\[?T\]?" => "[&EITS][#5]]\\T";
		//"tstopt(01){VOR}\+?{LIEG}" => "{VOR}\\{LIEG}";

	#EndSubSection(separator2)
	#BeginSubSection(relancer2)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		//"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[.*?\])" => "strtoupper()";
		"\|\[&ai" => "|[0D-][&ai"; // d'Aiglemont
		// "\|\'\|" => "\'\"; // z'Morge => this rule should be in separator! => move it there (for: d'Afrique)
		//"\|\'\|\[&ai" => "\'\[ON-][&ai"; // d'Aiglemont
		"\|" => "";  // filter out all | from linguistical analysis (not needed any more, spacer needs them removed for correct spacing)
		"-\]" => "#=#=#]";	// the same goes for - (this one is trickier to get rid off ...)
		"\[-" => "[#=#=#";	// first combination of - with brackets must be rewritten
		"-(?![0-9])" => "";	// - can now be deleted (filter out [T-1] for example ...)
		"#=#=#" => "-";		// this still might have interferences (watch out if that occurs)
		"\[#=#\]" => "[=]";
		"(?!<\[vr)\+(?!ar\])" => "";  // eliminate morphem boundaries before spacer
		"([}\]])#" => "$1"; // eliminate suffix boundaries before spacer
		"#([{\[])" => "$1"; // eliminate suffix boundaries before spacer
		"\]\+\[" => "]["; // eliminate +

		"([gcktdGCKTD])@[Rr]3\^" => "$1@r"; // rule copied from finisher

		"\\(s)" => "\[S=]"; // d'Sichlete

	#EndSubSection(relancer2)
	#BeginSubSection(prespacer)
		// empty (just for shared font)
	#EndSubSection(prespacer)
	#BeginSubSection(spacer)
		
		// at this point all tokens are lower case 
		// single tokens can be inside [] or not
		// multiple tokens are inside []
		// all abbreviations have been transformed to single or multiple tokens (by preceeding subsituter)
			
		// apparently, there are still some accolades (not substituted by substituter because the represent a token of their own => replace accolades by brackets
		"{" => "[";
		"}" => "]";		

		// make sure single tokens ARE inside brackets [] (no confusion between f and ff!)
		"(\[.*?\])" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
		"(\[.*?\])" => "strtolower()";	
		
		// filter out orphanized #
		"\]#\[" => "][";


		//"(\[?[td]\]?)(\[?[aou]\]?)(\[?[td]\]?)" => "$1$2[#5]$3";
		"(\[[aou]\])(\[[td]\])" => "$1[#5]$2"; // make spacing for td more general
		"\[l\]\[k\]" => "[l][#2][k]";

		// spacer rules (generated with regex_helper.php

// case: aa
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: ab
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#0]$3$5";
// case: ba
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: bb
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#3]$3$5";

		// additional space for i, au
		//"\[(i|au)\](?!\[#)" => "[$1][#3]";
		"\[&e\]\[#3\]\[o\]" => "[&E][O]";   // test: recorrect certain distances
		"\[vr\]\[#3\]\[-e\]" => "[VR][#3-][-E]"; // just test if negative spacing is possible
		"\[#6\](\[?i\]?\[?n\]?)" => "$1";
		"\[#0\](\[i\])?\[ss\]" => "[#3]$1[ss]"; // just a quick fix
		"\[#0\]\[#ns\]\[&a\]" => "[#3][#NS][&A]"; 		// idem
		"(?<!\[&t\])#\[schaft\]" => "[#3][schaft]";		// idem
		"\[i\]\[st\]" => "[#3][I][ST]";				// idem
		"\[i\]\[t\]" => "[i][#5][t]";				// idem
		"(\[&t@l3\])\[#n\](\[&i\])" => "$1[#3]$2";		// idem
		"\[s=\]\[o\]\[nd\]" => "[S=][#2][O][ND]";		// idem
		"\[n=\]\[i\]\[d\]" => "[n=][#3][i][d]"; 		// idem
		"\[0d-\]\[i\](?!\[(?:vr|VR|ns|NS)\])" => "[0d-][#1][i]"; // idem
		"\[t\]\[i\]\[\^sch\]" => "[t][#2][i][^sch]";		// idem
		"\[s(=?)\]\[a\]\[([lh])\]" => "[S$1][#4][A][$2]";	// idem
		"\[s\]\[#3\]\[a\]\[h\]" => "[S][#5][A][H]";		// idem
		"\[a\]\[ss\]" => "[a][#2][ss]";				// idem
		"\[ch\]\[#3\]\[st\]" => "[ch][#5][st]";			// idem
		"\[rr\]\[#3\]\[n\]" => "[rr][n]";			// idem
		"\[auf\]\[#3\]\[s\]" => "[auf][#2-][s]"; 		// idem
		"\[auf\]\[ant\]" => "[auf][#6-][ant]";			// idem
		"\[bei\]\[#3\]\[s\]" => "[bei][#2-][s]";		// idem
		"(\[d\])(\[schaft\])" => "$1[#5]$2";			// idem
		"(\[k\])\[#3\](\[u\]\[tt\])" => "$1[#6]$2";		// idem
		"\[t\]\[#3\]\[a\]\[l\]" => "[t][#5][a][l]";		// idem
		//"\[s=\](?!\[#)" => "[s=][#4]";				// idem
		"\[n=@r6\]\[b@r6\]" => "[n=@r6][#4][b@r6]";		// idem
		"\[l\]\[i\]\[\^z\]" => "[l][#3][i][^z]";		// idem
		"\[g\]\[ar\]" => "[g][#2][ar]";				// idem
		"\[z\]\[#3\]\[t\]" => "[z][#5][t]";			// idem
		"\[k\]\[#3\]\[a\]\[p\]" => "[k][#6][a][p]";		// idem
		"\[p\]\[#3\]\[I\]\[#5\]\[T\]" => "[p][I][#5][T]";	// idem
		"\[n=@r6\]\[h\]" => "[n=@r6][#3][h]";			// idem
		"\[\^z\]\[u\]\[ng\]" => "[^z][#3][u][ng]";		// idem
		"\[ck\]\[#3\]\[w\]" => "[ck][#5][w]";			// idem
		"\[s\]\[#3\]\[o\]\[b\]" => "[s][#6][o][b]";		// idem
		"\[t\]\[#3\]\[au\]\[b\]" => "[t][#5][au][b]";		// idem
		"\[\^z\]\[a\]\[vr\]" => "[^z][#3][a][vr]";		// idem
		"\[k\]\[#3\]\[o\]\[st\]" => "[k][#5][o][st]";		// idem
		"\[t\]\[#3\]\[p@r6\]" => "[t][#5][p@r6]";		// idem
		"\[p@r6\]\[#3\]\[o\]\[b\]" => "[p@r6][#5][o][b]";	// idem
		"\[s\]\[#3\]\[u\]\[l\]" => "[s][#6][u][l]";		// idem
		"\[t@r\]\[#3\]\[o\]\[ff\]" => "[t@r][#5][o][ff]";	// idem
		"\[k\]\[#3\]\[au\]\[f\]" => "[k][#5][au][f]";		// idem
		"\[zw\]\[i\]\[\^sch\]" => "[zw][#3][i][^sch]";		// idem 
		"\[m\]\[#3\]\[i\]\[l\]" => "[m][i][l]";			// idem
		"\[bei\]\[#0\]\[z\]" => "[bei][#3-][z]";		// idem
		"\[\^z\]\[w\]" => "[^z][#3][w]";			// idem
		"\[b\]\[#3\]\[i\]\[d\]" => "[b][#1][i][d]";
		"\[b\]\[#3\]\[[Ii]\]" => "[b][#1][i]";			// idem
		"\[sch\]\[#3\]\[n\]" => "[sch][n]";			// idem
		"\[k\]\[#3\]\[a\]\[st\]" => "[k][#6][a][st]";		// idem
		"\[b\]\[#3\]\[s\]" => "[b][s]";				// idem
		"\[s\]\[#3\]\[o\]\[vr\]" => "[s][#5][o][vr]";		// idem
		"\[l@l\]\[schaft\]" => "[l@l][#3][schaft]";		// idem
		"\[vor\]\[#3\]\[t@r\]" => "[vor][#1-][t@r]";		// idem
		"\[z\]\[#3\]\[st\]" => "[z][#5][st]";			// idem
		"\[b@l\]\[#3\]\[i\]\[b\]" => "[b@l][i][b]";		// idem
		"\[vor\]\[#3\]\[bei\]" => "[vor][#2-][bei]";		// idem
		"\[\^ch\]\[#3\]\[h\]" => "[^ch][#5][h]";		// idem
		"\[z\]\[ar\]" => "[z][#2][ar]";				// idem
		"\[b\]\[o\]\[#5\]\[d\]" => "[b][o][#2][d]";		// idem
		"\[vor\]\[#3\]\[s\]" => "[vor][#2-][s]";		// idem
		"\[k\]\[#3\]\[o\]\[pf\]" => "[k][#5][o][pf]"; 		// idem
		"\[t@r\]\[#3\]\[a\]\[f\]" => "[t@r][#5][a][f]";		// idem
		"\[vr\]\[#3\]\[s\]" => "[vr][s]";			// idem
		"\[s=\]\[#4\]\[i\]\[m\]" => "[s=][i][m]";		// idem
		"\[m\]\[#3\]\[a\]\[n\]" => "[m][a][n]";			// idem
		"\[m\]\[#3\]\[a\]\[l\]" => "[m][#1][a][l]";		// idem
		"\[vr\]\[#3\]\[m\]" => "[vr][m]";			// idem
		"\[vr\]\[#3\]\[n\]" => "[vr][n]";			// idem
		"\[vr\]\[#3\]\[g\]" => "[vr][g]";			// idem
		"\[n=@r6\]\[w\]" => "[n=@r6][#3][w]";			// idem 
		"\[vr\]\[#3\]\[vor\]" => "[vr][vor]";			// idem 
		"\[j\]\[#3\]\[u\]" => "[j][#5][u]";			// idem
		"\[l\]\[#3\]\[n\]" => "[l][#1][n]";			// idem
		"\[ch\]\[#3\]\[b@l\]" => "[ch][#5][b@l]";		// idem
		"\[in\]\[#3\]\[m\]" => "[in][m]";			// idem 
		"\[d\]\[#3\]\[i\]\[b\]" => "[d][#5][i][b]";		// idem
		"\[l\]\[#0]\[au\]\[&e\]" => "[l][#3][au][&e]";		// idem
		"\[s\]\[#3\]\[a\]\[&a\]" => "[s][#6][a][&a]"; 		// idem
		"\[b\]\[#3\]\[a\]\[n\]" => "[b][a][n]";			// idem
		"\[s\]\[#3\]\[p\]" => "[s][#4][p]";			// idem
		"\[g\]\[#3\]\[i\]\[ng\]" => "[g][#1][i][ng]";		// idem
		"\[s=\]\[#4\]\[z\]" => "[s=][#1][z]";			// idem
		"\[ch\]\[#3\]\[o\]\[p\]" => "[ch][#5][o][p]";		// idem
		"\[p\]\[#3\]\[s\]" => "[p][s]";				// idem
		"\[t\]\[#3\]\[a\]\[b@l\]" => "[t][#6][a][b@l]";		// idem
		"\[s=\]\[#4\]\[\/i\]" => "[s=][#1-][/i]";		// idem
		"\[m\]\[#3\]\[a\]\[s\]" => "[m][a][s]";			// idem
		"\[l\]\[#3\]\[d\]" => "[l][#4][d]";			// idem
		"\[w\]\[#3\]\[i\]\[n\]" => "[w][i][n]";			// idem
		"\[st\]\[#3\]\[i\]\[nk\]" => "[st][i][nk]";		// idem
		"\[durch\]\[#3\]\[s\]" => "[durch][s]";			// idem
		"\[&t#l\]\[o\]\[s\]" => "[&t#l][#3][o][s]";		// idem
		"\[vr\]\[#3\]\[ch\]" => "[vr][ch]";			// idem
		"\[b\]\[#3\]\[a\]\[vr\]" => "[b][a][vr]";		// idem
		"\[vr\]\[#3\]\[k\]" => "[vr][k]";			// idem
		"\[k\]\[#3\]\[t\]" => "[k][#5][t]";			// idem
		"\[h\]\[#3\]\[o\]\[ch\]" => "[h][#1][o][ch]";		// idem
		"\[st\]\[#3\]\[a\]\[p@l\]" => "[st][#4][a][p@l]";
		"\[b\]\[#3\]\[i\]\[d\]" => "[b][#4][i][d]";
		"\[b\]\[#3\]\[t@r\]" => "[b][t@r]";
		"\[m\]\[#3\]\[l\]" => "[m][#1][l]";
		"\[vr\]\[#3\]\[z\]" => "[vr][z]";
		"\[n=@r6\]\[l\]" => "[n=@r6][#3][l]";
		"\[s=\]\[#4\]\[a\]\[#2\]\[ss\]" => "[s=][a][ss]"; // what a mess ...
		"\[k\]\[#3\]\[a\]\[ff\]" => "[k][#6][a][ff]";
		"\[vr\]\[#3\]\[i\]\[n\]" => "[vr][#2-][i][n]";
		"\[vr\]\[#3\]\[i\]\[s\]" => "[vr][#1-][i][s]";
		"\[b\]\[#0\]\[sch@r\]" => "[b][#5-][sch@r]";
		"\[m\]\[#3\]\[i\]\[n\]" => "[m][#0][i][n]";
		"\[n\]\[u\]\[#5\]\[t\]" => "[n][u][#3][t]";
		"\[st\]\[#3\]\[u\]\[m\]" => "[st][#1][u][m]";
		"\[l\]\[#0\]\[a\]\[ng\]" => "[l][#2][a][ng]";
		"\[ar\]\[#3\]\[au\]\[m\]" => "[ar][#1][au][m]";
		"\[t\]\[#3\]\[a\]\[st\]" => "[t][#5][a][st]";
		"\[t\]\[was\]" => "[t][#2][was]";
		"\[b\]\[#0\]\[g@r3\^\]" => "[b][#4-][g@r3^]";
		"\[v\]\[#3\]\[t@r\]" => "[v][#1][t@r]";
		"\[t@r\]\[#3\]\[a\]\[b\]" => "[t@r][#5][a][b]";
		"\[sch@l3\]\[#3\]\[o\]\[ss\]" => "[sch@l3][o][ss]";
		"\[auf\]\[#3\]\[st\]" => "[auf][#1][st]";
		"\[m\]\[#0\]\[i\]\[g@r3\^\]" => "[m][#4-][i][g@r3^]";
		"\[vor\]\[#3\]\[sch\]" => "[vor][#2-][sch]";
		"\[g\]\[#3\]\[o\]\[tt\]" => "[g][#5][o][tt]";
		"\[s\]\[ar\]" => "[s][#3][ar]";
		"\[ch\]\[#3\]\[d\]" => "[ch][#6][d]";
		"\[f\]\[#0\]\[sch@r\]" => "[f][#3-][sch@r]";
		"\[l\]\[#0\]\[a\]\[g\]" => "[l][#1][a][g]";
		"\[vr\]\[#3\]\[i\]\[g\]" => "[vr][#1-][i][g]";
		"\[b@l\]\[#3\]\[a\]\[s\]" => "[b@l][#1][a][s]";
		"\[m\]\[#3\]\[u\]\[s\]" => "[m][#1][u][s]";
		"\[v\]\[#3\]\[i\]\[s\]" => "[v][#0][i][s]";
		"\[sch\]\[#3\]\[o\]\[n\]" => "[sch][#0][o][n]";
		"\[b\]\[#3\]\[a\]\[l\]" => "[b][#1][a][l]";
		"\[ant\]\[#3\]\[st\]" => "[ant][#0][st]";
		"\[w\]\[#3\]\[i\]\[vr\]" => "[w][#0][i][vr]";
		"\[m\]\[#3\]\[u\]\[nd\]" => "[m][#2][u][nd]";
		"\[j\]\[#3\]\[a\]\[&a\]" => "[j][#5][a][&a]";
		"\[s=\]\[#4\]\[u\]\[ch\]" => "[s=][#2][u][ch]";
		"\[t\]\[#3\]\[h\]" => "[t][#5][h]";
		"\[n\]\[#3\]\[l\]" => "[n][#1][l]";
		"\[k@l3\]\[#3\]\[a\]\[pp\]" => "[k@l3][#6][a][pp]";
		"\[n\]\[#3\]\[o\]\[pf\]" => "[n][#2][o][pf]";
		"\[b\]\[ar\]" => "[b][#1-][ar]";
		"\[ar\]\[#3\]\[u\]\[f\]" => "[ar][#5][u][f]";
		"\[b\]\[#3\]\[n\]" => "[b][#0][n]";
		"\[ar\]\[#3\]\[sp\]" => "[ar][#0][sp]";
		"\[t@r\]\[#3\]\[o\]\[st\]" => "[t@r][#5][o][st]";
		"\[k\]\[#3\]\[u\]\[pf\]" => "[k][#5][u][pf]";
		"\[0n-\]\[#n\]\[vr\+ar\]" => "[0n-][#3][#n][vr+ar]";
		"\[b\]\[a\]\[#5\]\[d\]" => "[b][a][#4][d]";
		"\[g\]\[#3\]\[sch\]" => "[g][#1][sch]";
		"\[m\]\[#0\]\[sch\]" => "[m][#1-][sch]";
		"\[d\]\[#3\]\[k@r3\^\]" => "[d][#0][k@r3^]";
		"\[ch\]\[#3\]\[a\]\[b\]" => "[ch][#5][a][b]";
		"\[vr\]\[e\]\[s\]" => "[vr][#3-][e][s]";
		"\[n=\]\[a\]\[h\]" => "[n=][#3][a][h]";
		"\[t@r\]\[#3\]\[au\]\[t\]" => "[t@r][#5][au][t]";
		"\[ar\]\[#3\]\[t@r\]" => "[ar][#1][t@r]";
		"\[s\]\[i\]\[\^sch\]" => "[s][#3][i][^sch]";
		"\[t@r\]\[i\]\[\^sch\]" => "[t@r][#3][i][^sch]";
		"\[s\]\[#3\]\[t\]" => "[s][#5][t]";
		"\[s=\]\[#4\]\[a\]\[m\]" => "[s=][#1][a][m]";
		"\[m\]\[#3\]\[s\]" => "[m][#1][s]";
		"\[pf\]\[#0\]\[u\]\[sch\]" => "[pf][#3-][u][sch]";
		"\[0n-\]\[#0\]\[a\]\[ng\]" => "[0n-][#2][a][ng]";
		"\[ng\]\[#3\]\[st\]" => "[ng][#5][st]";
		"\[da\]\[#3\]\[z\]" => "[da][#1][z]";
		"\[c\]\[#3\]\[a\]\[p@l\]" => "[c][#5][a][p@l]";
		"\[l\]\[#3\]\[u\]\[st\]" => "[l][#5][u][st]";
		"\[ch\]\[#3\]\[o\]\[l\]" => "[ch][#5][o][l]";
		"\[g\]\[i\]\[\^sch\]" => "[g][#3][i][^sch]";
		"\[t\]\[#3\]\[p\]" => "[t][#6][p]";
		"\[m\]\[#3\]\[a\]\[x\]" => "[m][#0][a][x]";
		"\[sch\]\[i\]\[\^z\]" => "[sch][#2][i][^z]";
		"\[\^z\]\[&o\]" => "[^z][#2][&o]";
		"\[\^z\]\[i\]\[vr\]" => "[^z][#3][i][vr]";
		"\[p@l\]\[i\]\[\^z\]" => "[p@l][#2][i][^z]";
		"\[ch\]\[#3\]\[u\]\[ng\]" => "[ch][#5][u][ng]";
		"\[n=@r6\]\[s\]" => "[n=@r6][#3][s]";
		"\[k\]\[#3\]\[i\]\[nd\]" => "[k][#5][i][nd]";
		"\[ng\]\[&t\]" => "[ng][#5][&t]";
		"\[sp@r6\]\[#0\]\[i\]\[ng\]" => "[sp@r6][#2][i][ng]";
		"\[ch\]\[#3\]\[vr\]" => "[ch][#5][vr]";
		"\[st\]\[#3\]\[g\]" => "[st][#0][g]";
		"\[g\]\[#3\]\[st\]" => "[g][#5][st]";
		"\[s\]\[en\]" => "[s][#2][en]";
		"\[\^ch\]\[#3\]\[w\]" => "[^ch][#5][w]";
		"\[vor\]\[#3\]\[g\]" => "[vor][#2-][g]";
		"\[g\]\[#3\]\[w\]" => "[g][#4][w]";
		"\[0d-\]\[#4-\]\[i\]\[d\]" => "[0d-][#1][i][d]";
		"\[nd\]\[schaft\]" => "[nd][#5][schaft]";
		"\[s\]\[@l\]" => "[s][#3][@l]";
		"\[ck@l3\]\[i\]\[ng\]" => "[ck@l3][#4][i][ng]";
		"\[tt\]\[#3\]\[f\]" => "[tt][#5][f]";
		"\[s\]\[i\]\[\^z\]" => "[s][#4][i][^z]";
		"\[s\]\[#3\]\[p@r6\]" => "[s][#5][p@r6]";
		"\[k\]\[#3\]\[f@l\]" => "[k][#5][f@l]";
		"\[\^ch\]\[#3\]\[f\]" => "[^ch][#5][f]";
		"\[&u\]\[dis\]" => "[&u][#1-][dis]";
		"\[s\]\[#3\]\[st\]" => "[s][#5][st]";
		"\[t\]\[#3\]\[u\]\[b\]" => "[t][#5][u][b]";
		"\[b\]\[o\]\[#5\]\[t\]" => "[b][o][#3][t]";
		"\[n=\]\[o\]\[pp\]" => "[n=][#3][o][pp]";
		"\[durch\]\[#3\]\[sch\]" => "[durch][#3-][sch]";
		"\[vr\]\[schaft\]" => "[vr][#3][schaft]";
		"\[t\]\[schaft\]" => "[t][#4][schaft]";
		"\[m\]\[u\]\[#5\]\[t\]" => "[m][u][#3][t]";
		"\[k\]\[au\]\[\^z\]" => "[k][#3][au][^z]";
		"\[vr\]\[#3\]\[sch\]" => "[vr][#1-][sch]";
		"\[z\]\[i\]\[\^z\]" => "[z][#3][i][^z]";
		"\[\^z\]\[vr\]" => "[^z][#2][vr]";
		"\[ch\]\[#3\]\[t\]" => "[ch][#5][t]";
		"\[\^sch\]\[ch\]" => "[^sch][#2-][ch]";
		"\[k\]\[#3\]\[o\]\[ff\]" => "[k][#6][o][ff]";
		"\[k\]\[#3\]\[a\]\[pp\]" => "[k][#6][a][pp]";
		"\[z@r\]\[ar\]" => "[z@r][#2][ar]";
		"\[st\]\[#3\]\[o\]\[tt\]" => "[st][#5][o][tt]";
		"\[ck@l3\]\[i\]\[m\]" => "[ck@l3][#4][i][m]";
		"\[b\]\[#3\]\[st\]" => "[b][#1][st]";
		"\[vr\]\[#3\]\[schw\]" => "[vr][#1-][schw]";
		"\[s=\]\[u\]\[pp\]" => "[s=][#4][u][pp]";
		"\[b\]\[#3\]\[a\]\[l@l\]" => "[b][#1][a][l@l]";
		"\[rr\]\[#3\]\[w\]" => "[rr][#1-][w]";
		"\[nn\]\[#3\]\[v\]" => "[nn][#0][v]";
		"\[g\]\[#3\]\[g\]" => "[g][#2][g]";
		"\[da\]\[#3\]\[bei\]" => "[da][#0][bei]";
		"\[s\]\[#3\]\[h\]" => "[s][#4][h]";
		"\[t@r\]\[#3\]\[i\]\[tt\]" => "[t@r][#5][i][tt]";
		"\[t\]\[o\]\[vr\+ar\]" => "[t][#3][o][vr+ar]";
		"\[m\]\[o\]\[#5\]\[t\]" => "[m][o][#3][t]";
		"\[n\]\[#3\]\[d@r3\^\]" => "[n][#1][d@r3^]";
		"\[t\]\[au\]\[\^ch\]" => "[t][#2][au][^ch]";
		"\[s\]\[#3\]\[d\]" => "[s][#5][d]";
		"\[in\]\[#3\]\[sch@r\]" => "[in][#3-][sch@r]";
		"\[vor\]\[#3\]\[k\]" => "[vor][#2-][k]";
		"\[ar\]\[#3\]\[schw\]" => "[ar][#0][schw]";
		"\[durch\]\[#3\]\[b@r6\]" => "[durch][#1-][b@r6]";
		"\[st@r3\^\]\[#3\]\[a\]\[#2\]\[ss\]" => "[st@r3^][#1][a][ss]";
		"\[b\]\[#2-\]\[i\]\[tt\]" => "[b][#1][i][tt]";
		"\[vor\]\[#3\]\[sch@r\]" => "[vor][#4-][sch@r]";
		"\[\^z\]\[b\]" => "[^z][#5][b]";
		"\[anti\]\[c\]" => "[anti][#3][c]";
		"\[t\]\[#3\]\[b\]" => "[t][#5][b]";
		"\[s=\]\[i\]\[d\]" => "[s=][#4][i][d]";
		"\[ch\]\[#3\]\[i\]\[c\]" => "[ch][#5][i][c]";
		"\[t\]\[#3\]\[a\]\[p\]" => "[t][#6][a][p]";
		"\[g\]\[#3\]\[a\]\[b\]" => "[g][#6][a][b]";
		"\[vorar\]\[u\]\[nd\]" => "[vorar][#5][u][nd]";
		"\[z\]\[#3\]\[a\]\[l\]" => "[z][#6][a][l]";
		"\[k\]\[u\]\[#5\]\[t\]" => "[k][u][#7][t]";
		"\[\^ch\]\[#3\]\[vr\]" => "[^ch][#5][vr]";
		"\[k\]\[#3\]\[u\]\[b\]" => "[k][#6][u][b]";
		"\[l\]\[#0\]\[u\]\[k\]" => "[l][#2][u][k]";
		"\[z\]\[#3\]\[w\]" => "[z][#5][w]";
		"\[f\]\[#0\]\[o\]\[y\]" => "[f][#3][o][y]";
		"\[s=\]\[o\]\[f\]" => "[s=][#3][o][f]";
		"\[k@l3\]\[#3\]\[o\]\[st\]" => "[k@l3][#5][o][st]";
		"\[\^ch\]\[i\]\[\^sch\]" => "[^ch][#3][i][^sch]";
		"\[&i\]\[#0\]\[a\]\[&a\]" => "[&i][#5][a][&a]";
		"\[t\]\[#3\]\[i\]\[f\]" => "[t][#5][i][f]";
		"\[d\]\[#3\]\[o\]\[x\]" => "[d][#5][o][x]";
		"\[s\]\[#3\]\[u\]\[nd\]" => "[s][#5][u][nd]";
		"\[n=@r6\]\[n\]" => "[n=@r6][#2][n]";
		"\[(t|d|k|g|tt|ck|st)@r3\^\]\[(a|i|o|u|au)\]" => "[$1@r3^][#3][$2]"; // general rule for new token @r3^
		"\[ck@r3\^\]\[#3\]\[u\]\[f\]" => "[ck@r3^][#5][u][f]";
		"\[s\]\[in\]" => "[s][#4][in]";
		"\[l@l\]\[#0\]\[k\]" => "[l@l][#4][k]";
		"\[s\]\[i\]\[\^ch\]" => "[s][#3][i][^ch]";
		"\[w\]\[#0\]\[o\]\[ch\]" => "[w][#1][o][ch]";
		"\[s=\]\[i\]\[\^z\]" => "[s=][#3][i][^z]";
		"\[p\]\[s\]" => "[p][#1][s]";
		"\[ar\]\[#3\]\[a\]\[nd@l3\]" => "[ar][#5][a][nd@l3]";
		"\[w\]\[#0\]\[u\]\[ss\]" => "[w][#2][u][ss]";
		"\[st@r3\^\]\[#3\]\[i\]\[\^ch\]" => "[st@r3^][#1][i][^ch]";
		"\[n\]\[#0\]\[a\]\[&a\]" => "[n][#3][a][&a]";
		"\[pf\]\[#3\]\[i\]\[ff\]" => "[pf][#6][i][ff]";
		"\[\^ch\]\[en\]" => "[^ch][#4][en]"; // correct length -en: why is this necessary for ch but not for sch?!?
		"\[s=\]\[au\]\[&e\]" => "[s=][#2][au][&e]";
		"\[n\]\[#0\]\[au\]\[&e\]" => "[n][#3][au][&e]";
		"\[0d-\]\[#4-\]\[i\]\[l@l\]" => "[0d-][#1][i][l@l]";
		"\[l@l\]\[u\]\[st@r3\^\]" => "[l@l][#1][u][st@r3^]";
		"\[&t3\/4\]\[h\]" => "[&t3/4][#1][h]";
		"\[b@l\]\[i\]\[b\]" => "[b@l][#2][i][b]";
		"\[zurück\]\[b@l\]" => "[zurück][#3][b@l]";
		"\[d\]\[i\]\[\^z\]" => "[d][#4][i][^z]";
		"\[\^z\]\[i\]\[l\]" => "[^z][#5][i][l]";
		"\[\^z\]\[l\]" => "[^z][#4][l]";
		"\[n=@r6\]\[t\]" => "[n=@r6][#4][t]";
		"\[ch\]\[vr\+ar\]" => "[ch][#4]][vr+ar]";
		"\[\^z\]\[&i\]" => "[^z][#4][&i]";
		"\[ff\]\[i\]\[\^z\]" => "[ff][#3]][i][^z]";
		"\[s=\]\[u\]\[b\]" => "[s=][#3][u][b]";
		"\[b\]\[#0\]\[j\]" => "[b][#1][j]";
		"\[sp@r6\]\[i\]\[\^z\]" => "[sp@r6][#2][i][^z]";
		"\[t\]\[vr\+ar\]" => "[t][#3][vr+ar]";
		"\[ck\]\[#3\]\[p\]" => "[ck][#6][p]";
		"\[nn\]\[#0\]\[a\]\[&a\]" => "[nn][#2][a][&a]";
		"\[w\]\[o\]\[tt@l3\]" => "[w][#4][o][tt@l3]";
		"\[tt@l3\]\[i\]\[s\]" => "[tt@l3][#3][i][s]";
		"\[&tion\]\[s\]" => "[&tion][#2][s]";
		"\[0n-\]\[#0\]\[a\]" => "[0n-][#4][a]";
		"\[st\]\[#3\]\[i\]\[#5\]\[t\]" => "[st][#4][i][t]"; // correct completely wrong rule from above ...
		"\[s=\]\[a\]\[f\]" => "[s=][#4][a][f]";
		"\[&u\]\[#3\]\[i\]\[inter\]" => "[&u][#1-][i][inter]"; // recorrect distance 3 introduced automatically
		"\[n=@r6\]\[ar\]" => "[n=@r6][#2][ar]";
		"\[t\]\[#3\]\[u\]\[pf\]" => "[t][#5][u][pf]";
		"\[d\]\[#3\]\[i\]\[d\]" => "[d][#5][i][d]"; 
		"\[d\]\[#3\]\[a\]\[k\]" => "[d][#5][a][k]";
		"\[0d-\]\[au\]\[t\]" => "[0d-][#2][au][t]";
		"\[n=@r6\]\[st\]" => "[n=@r6][#3]][st]";
		"\[zurück\]\[f\]" => "[zurück][#3][f]";
		"\[t@r3\^\]\[#3\]\[i\]\[tt\]" => "[t@r3^][#5][i][tt]";
		"\[f\]\[#0\]\[u\]\[ss\]" => "[f][#1][u][ss]";
		"\[st\]\[#3\]\[sch\]" => "[st][#0][sch]";
		"\[ck\]\[#3\]\[h\]" => "[ck][#5][h]";
		"\[l\]\[#0\]\[y\]" => "[l][#2][y]";
		"\[b\]\[#1\]\[i\]\[tt\]" => "[b][#3][i][tt]";
		"\[mm\]\[#0\]\[a\]\[&a\]" => "[mm][#3][a][&a]";
		"\[t\]\[i\]\[\^sch@l3\]" => "[t][#3][i][^sch@l3]";
		"\[\^z\]\[i\]\[n\]" => "[^z][#3][i][n]";
		"\[\^ch\]\[&t\]" => "[^ch][#2][&t]";
		"\[sch@r\]\[#3\]\[o\]\[ck\]" => "[sch@r][#7][o][ck]";
		"\[vr\]\[#3\]\[sch@r\]" => "[vr][#4-][sch@r]";
		//"\[c\]\[#5\]\[&i\]" => "[c][#1][&i]"; // replaced by generic rule
		"\[d\]\[i\]\[\^ch\]" => "[d][#4][i][^ch]";
		"\[l\]\[#0\](\[a\])?\[m\]" => "[l][#3]$1[m]";
		"\[l\]\[#0\]\[a\]\[ch\]" => "[l][#3][a][ch]";
		"\[ch\]\[en\]" => "[ch][#3][en]";
		"\[s\]\[#4\]\[h\]" => "[s][#6][h]";
		//"\[b\]\[#5\]\[&i\]" => "[b][#2][&i]"; // replaced by generic rule
		"\[auf\]\[#3\]\[n\]" => "[auf][#1-][n]";
		"\[t@r3\^\]\[#3\]\[a\]\[f\]" => "[t@r3^][#5][a][f]";
		"\[st\]\[#3\]\[a\]\[tt\]" => "[st][#6][a][tt]";
		"\[l\]\[#3\]\[au\]\[t\]" => "[l][#5][au][t]";
		"\[w\]\[i\]\[\^z\]" => "[w][#3]][i][^z]";
		"\[\^z\]\[-e\]" => "[^z][#3][-e]";
		"\[z\]\[#3\]\[i\]\[tt\]" => "[z][#6][i][tt]";
		"\[l\]\[au\]\[\^sch\]" => "[l][#3][au][^sch]";
		"\[n\]\[au\]\[\^z\]" => "[n][#3][au][^z]";
		"\[d@r3\^\]\[#3\]\[i\]\[tt\]" => "[d@r3^][#6][i][tt]";
		"\[t@r3\^\]\[#3\]\[au\]\[m\]" => "[t@r3^][#5][au][m]";
		"\[w\]\[#0\]\[a\]\[&a\]" => "[w][#3][a][&a]";
		"\[ar\]\[t@r3\^\]" => "[ar][#3][t@r3^]";
		"\[g\]\[#3\]\[d\]" => "[g][#5][d]";
		"\[d\]\[#3\]\[a\]\[nk\]" => "[d][#5][a][nk]";
		"\[h\]\[#3\]\[au\]\[t\]" => "[h][#5][au][t]";
		"\[ng\]\[#3\]\[t\]" => "[ng][#6][t]";
		"\[g\]\[#3\]\[a\]\[ng\]" => "[g][#5][a][ng]";
		"\[s=\]\[h\]" => "[s=][#4][h]";
		"\[s=\]\[u\]\[tt\]" => "[s=][#4][u][tt]";
		"\[\^z\]\[i\]\[d\]" => "[^z][#5][i][d]";
		"\[k\]\[#3\]\[a\]\[p@l\]" => " [k][#6][a][p@l]";
		"\[st\]\[i\]\[\^z\]" => "[st][#3][i][^z]";
		"\[b\]\[#0\]\[au\]\[&e\]" => "[b][#2][au][&e]";
		"\[s\]\[#3\]\[i\]\[d\]" => "[s][#4][i][d]";
		"\[n=\]\[a\]\[&a\]" => "[n=][#4][a][&a]";
		"\[\^z\]\[i\]\[g\]" => "[^Z][#4][I][G]";
		"\[t\]\[#3\]\[a\]\[b\]" => "[T][#6][A][B]";
		"\[l\]\[#0\]\[ch\]" => "[l][#3][ch]";
		"\[ck@l3\]\[u\]\[ng\]" => "[ck@l3][#3][u][ng]";
		"\[t\]\[#3\]\[a\]\[f\]" => "[t][#5][a][f]";
		"\[k\]\[#3\]\[u\]\[nd\]" => "[k][#5][u][nd]";
		"\[l\]\[#0\]\[a\]\[&a\]" => "[l][#4][a][&a]";
		"\[t\]\[#3\]\[i\]\[ck\]" => "[t][#6][i][ck]";
		"\[sch\]\[#3\]\[i\]\[ck\]" => "[sch][#6][i][ck]";
		"\[tt@l3\]\[vr\]" => "[tt@l3][#5][vr]";
		"\[m\]\[i\]\[tt@l3\]" => "[m][#6][i][tt@l3]";

		// experimental: generic -&i, -&a
		"\[#5\]\[&i\]$" => "[#2][&i]";
		"\[#3\]\[a\]\[&a\]" => "[#5][a][&a]";

		// experimental: draw-arround-knot _._
		"\[(sch|d|t)@(r|l.?|r3\^)\]\[#(.*?)\]\[(i|u)\]\[(tt|ck|pp|b)\]" => "[$1@$2][_._][#$3][$4][$5]";

		"^(.*?)$" => "strtoupper()";	// all to upper

		// fix spacing bug for \
		// What spacing bug?!? Problem is: with following rule words like rendez-vous are written wrong
		// (z at the end of rendez doesn't loose last part after early exit point)
		//"\\" => "[#S#]";
		"\[VR@L\]\[EN\]" => "[VR@L][O][EN]"; // figh vertical position -en with combined token vrl (bug?)

		"\[VR@L\]\[#3\]\[O\]\[-E\]" => "[VR@L][#2-][O][-E]"; // re-recorrect re-corrections ...

	#EndSubSection(spacer)
	#BeginSubSection(postspacer)
		// empty (just for shared font)
	#EndSubSection(postspacer)
	#BeginSubSection(finisher)
		// make all tokens upper case for rendering and assing prt
		"([a-z]*?)" => "strtoupper()";
		"(\[SCH@L3\])$" => "$1[#0]"; // fix problem at end of the word: @l is not drawn if schl is last token (add dummy [#0])
		"(\[CH@R\])$" => "$1[#0]"; // v.Chr.
		"ü" => "Ü";
		"ä" => "Ä";
		"ö" => "Ö";
		"è" => "E"; // Helène
		// fix a problem whose origin is unknown: replace all @r3^ by @r (less beautiful, but should work)
		//"([GCKTD])@R3\^" => "$1@R"; // include this rule before spacer to get correct spacing
		"\]#\[" => "]["; // bugfix
		"\[VR\]\[\/I\]" => "[VR][I][/I]"; // bösartig in MA12
		"tstopt(01)\[VR\]\[#4\]\[@L\]" => "[VR][#4][I][@L]"; // seriell in MA12
		"tstopt(01)\[\^CH\]\[\/I\]" => "[^CH][#4][/I]"; // richtig MA2
		"{" => "[";
		"}" => "]";
		// dots inside words (e.g. websites)
		"(\])\.(\[)" => "$1[.][#5]$2";

	#EndSubSection(finisher,=:prt)
#EndSection(rules)

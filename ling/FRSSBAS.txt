#BeginSection(header)
	// 
	// FRSSBAS - VSTENO shorthand model for french
	// Set of rules interpreted and processed by VSTENO (www.vsteno.ch) 
	// (c) 2019-2023 - Marcel Maci (m.maci@gmx.ch)
 	//
	// This program* is free software: you can redistribute it and/or modify it under	
	// the terms of the GNU General Public License as published by the Free Software
 	// Foundation, either version 3 of the License, or (at your option) any later
 	// version.
	//
 	// This program is distributed in the hope that it will be useful, but WITHOUT
	// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
	// details.
	// 
 	// You should have received a copy of the GNU General Public License along with
	// this program. If not, see <http://www.gnu.org/licenses/>.
 	//
	// * As explained in the documentation of VSTENO, shorthand models are considered
	// as interpreted code (and thus code licensed under the same terms as the main 
	// program).
	//
	// Model naming:
	// FR = Spanisch, SS = Stolze-Schrey, BAS = basic system (Grundsystem)
	//
	// Based on:
	//  
	// [1] Emil Hug, Französische Stenografie (Verlag und Buchhandlung des Allgemeinen
	// Schweizerischen Stenografenvereins), Druckerei Wetzikon AG, 1983 (8. Auflage)
	//
	#BeginSubSection(session)
		"license" := "
	<p>FRSSBAS - model for VSTENO (Grundschrift Stolze-Schrey, Französisch)<br>
    	(c) 2018-2023  Marcel Maci</p>
	
	<p>This program is free software: you can redistribute it and/or modify
    	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
    	(at your option) any later version.</p>

    	<p>This program is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.<p>

    	<p>You should have received a copy of the GNU General Public License
    	along with this program.  If not, see www.gnu.org/licenses.<p>
	";
		"release_notes" := "
	<p>Based on:</p>
	<p>[1] Emil Hug, "Französische Stenografie, nach dem Einigungssystem Stolze-Schrey", 
	Offizielle Übertragung des Allgemeinen Schweizerischen Stenografenvereins (Zentralverein Stolze-Schrey), 
	Verlag und Buchhandlung des Allgemeinen Schweizerischen Stenografenvereins, Druckerei Wetzikon AG, 8620 Wetzikon ZH, 8. Auflage 1983.</p>
	<p>[2] Rob. Meyer, "Lehrbuch der französischen Stenographie" (Système unifié, offizielle Fassung) für Kenner des Systems Stolze-Schrey, 13. Auflage 1979,
Verlang und Buchhandlung des Allgemeinen Schweizerischen Stenografenvereins,
Druckerei Wetzikon AG, 8620 Wetzikon.
	</p>
	<p>This is based on the german and spanish models (DESSBAS, SPSSBAS). 
	Meaning of the characters: FR = french, SS=Stolze-Schrey, BAS=Grundschrift).</p> 
	
	<p>Model is based on SE1 rev0 exclusively. Tokens were optimized for an 
	inclination of 60 degrees.</p>
	<p>The model is now in beta stage (i.e. it still has to be improved and tested but many words are calculated correctly).</p>
	";
		"copyright_footer" := "Erstellt mit Freier Software<br>VSTENO (www.vsteno.ch)<br>(c) 2018-2020 Marcel Maci";
		// model version
		"model_version" := "0.5";
		"required_version" := "0.3";
		"model_date" := "13/09/23";
		// wide distance
		"token_distance_wide" := "17";
		"model_se_revision" := "0";

		// enable phonetics
		// VSTENO uses eSpeak to generate phonetic transcription
		// eSpeak uses (more or less) the Kirschenbaum alphabet
		// see: https://en.wikipedia.org/wiki/Kirshenbaum
		// and also: https://www.cs.cmu.edu/Groups/AI/pubs/faqs/nlp/ipa.faq
		"analysis_type" := "selected";
		"hyphenate_yesno" := "no";
		"composed_words_yesno" := "no";
		"phonetics_yesno" := "yes";
		"phonetic_alphabet" := "espeak";
		// set language
		"language_hunspell" := "fr";		// set it, even if not used
		"language_hyphenator" := "fr";
		"language_espeak" := "fr";
		// set morphological parameters
		"prefixes_list" := "";
		"stems_list" := "";
		"suffixes_list" := ""; // use non caputuring groups! (?:)
		// set phonetics parameters
		"phonetics_single_char_yesno" := "no";
		"phonetics_acronyms_yesno" := "no"; // don't transcribe acronyms
		"phonetics_acronyms_lowercase_yesno" := "yes"; // convert acronyms to lower case
		"phonetics_transcription_list" := "
			"laids?":"lE",
			"(?:(l)')?aspects?":"$1aspE", // use full regex for phonetic transcriptions
			"respects?":"respE",
			"cheques?":"SEk",
			"quantités?":"ka~tite",
			"assid(?:û|u)ment":"asidyma~",
			"discutions":"diskytio~",
			"vingt":"vE~t",
			"l'as":"la",
			"([slmt])?'?enhardi(r)?":"$1a~ardi$2",  // don't use any escape character \
			"(slmt)?'?enharnach(e[rz]|ée?s?)":"$1a~arnaSe"	// \ leads to an empty array (why?!)
		";
		// engine parameters
		"token_distance_wide" := "18";
		"title_text" := "Französisch";
		"introduction_text" := "Französisches System 'FRSSBAS' (Stolze-Schrey, Grundschrift)";
		// font
		"font_exportable_yesno" := "no";
		"font_importable_yesno" := "yes";
		"font_borrow_yesno" := "yes";
		"font_borrow_model_name" := "GESSBAS";
		"font_load_from_file_yesno" := "yes";
		"handwriting_marker" := "0";
		// spacer groups
		// L/R: left, right
		// M/N/P/K: minus, normal, plus (more or less space needed), circle (special space rules)
		// A/B/C/D/E: vertical delta of connection (A = baseline, B = 1/2 line, C = 1 line, D = 2 lines, E = 3 lines
		// main groups: (to reduce number of groups)
		// LK = LKA, LKB, LKC
		// LN = LNA, LNB, LNC
		// LP = LPA, LPB
		// RK = RKA, RKB, RKC
		// RN = RNA, RNB, RNC (low; high = RND and RNE are not regrouped!)
		// RP = RPA, RPB, RPC (idem)
		"spacer_token_combinations" := "
			C1:[LK,RK],
			C2:[LK,RN],		// RN = RNA / RNB / RNC
			C3:[LK,RND],
			C4:[LK,RNE],
			C5:[LK,RP],		// RP = RPA / RPB / RPC
			C6:[LK,RPD],
			C7:[LK,RPE],
			C8:[LMA,RK],
			C9:[LMA,RN],		// RN = RNA / RNB / RNC
			C10:[LMA,RND],
			C11:[LMA,RNE],
			C12:[LMA,RP],		// RP = RPA / RPB / RPC
			C13:[LMA,RPD],
			C14:[LMA,RPE],
			C15:[LN,RK],
			C16:[LN,RN],		// RN = RNA / RNB / RNC
			C17:[LN,RND],
			C18:[LN,RNE],
			C19:[LN,RP],		// RP = RPA / RPB / RPC
			C20:[LN,RPD],
			C21:[LN,RPE],
			C22:[LP,RK],
			C23:[LP,RN],		// RN = RNA / RNB / RNC
			C24:[LP,RND],
			C25:[LP,RNE],
			C26:[LP,RP],		// RP = RPA / RPB / RPC
			C27:[LP,RPD],
			C28:[LP,RPE]";
		"spacer_vowel_groups" := "
			V1:[A,O,U],
			V2:[I,AU]";
		"spacer_rules_list" := "
			R1:[C1,V1,D1,?],
			R2:[C1,V2,D2,],
			R3:[C2,V1,D3,?],
			R4:[C2,V2,D4,],
			R5:[C3,V1,D5,?],
			R6:[C3,V2,D6,],
			R7:[C4,V1,D7,?],
			R8:[C4,V2,D8,],
			R9:[C5,V1,D9,?],
			R10:[C5,V2,D10,],
			R11:[C6,V1,D11,?],
			R12:[C6,V2,D12,],
			R13:[C7,V1,D13,?],
			R14:[C7,V2,D14,],
			R15:[C8,V1,D15,?],
			R16:[C8,V2,D16,],
			R17:[C9,V1,D17,?],
			R18:[C9,V2,D18,],
			R19:[C10,V1,D19,?],
			R20:[C10,V2,D20,],
			R21:[C11,V1,D21,?],
			R22:[C11,V2,D22,],
			R23:[C12,V1,D23,?],
			R24:[C12,V2,D24,],
			R25:[C13,V1,D25,?],
			R26:[C13,V2,D26,],
			R27:[C14,V1,D27,?],
			R28:[C14,V2,D28,],
			R29:[C15,V1,D29,?],
			R30:[C15,V2,D30,],
			R31:[C16,V1,D31,?],
			R32:[C16,V2,D32,],
			R33:[C17,V1,D33,?],
			R34:[C17,V2,D34,],
			R35:[C18,V1,D35,?],
			R36:[C18,V2,D36,],
			R37:[C19,V1,D37,?],
			R38:[C19,V2,D38,],
			R39:[C20,V1,D39,?],
			R40:[C20,V2,D40,],
			R41:[C21,V1,D41,?],
			R42:[C21,V2,D42,],
			R43:[C22,V1,D43,?],
			R44:[C22,V2,D44,],
			R45:[C23,V1,D45,?],
			R46:[C23,V2,D46,],
			R47:[C24,V1,D47,?],
			R48:[C24,V2,D48,],
			R49:[C25,V1,D49,?],
			R50:[C25,V2,D50,],
			R51:[C26,V1,D51,?],
			R52:[C26,V2,D52,],
			R53:[C27,V1,D53,?],
			R54:[C27,V2,D54,],
			R55:[C28,V1,D55,?],
			R56:[C28,V2,D56,]";
	#EndSubSection(session)
	#BeginSubSection(analyzer)
		// corrections
		"k'Omt" => "k'O~t"; // correct "compte": is done wrong by espeak
		"mm" => { "m", "#comme" }; // simpflify double m (espeak does this wrong in "immense" for example)
		"gr'andru:t" => "gra~ rut"; // grand'route
		"S'Ef d'Wvr" => "SEdWvr"; // chef-d'oeuvre
		//"v'i; a v'i" => "vizavi"; // vis-à-vis (liaison missing)
		// problem with composed words (e.g. vis-à-vis, pot-au-feu)
		// eSpeak doesn't transcripe the laison, which is wrong:
		// - v'i; a v'i, p'o o f'W (wrong)
		// - v'izav,i, p'otof,W (correct)
		// solution: eliminate - in stage 0 
		// vis-à-vis => visàvis
		// pot-au-feu => potaufeu
		// This might have some side effects so keep an eye on that ...
		// Here we go ... It took 5 examples to show the first side effect:
		// - vice-recteur: r should be [ar] instead of [vr] => solution: check for "prefix" vice- in in transcriptor ... 

		// filterings
		"'" => ""; // filter out primary stress (and apostrophes like in l'âme)
		"," => ""; // filter out secondary stress
		// note: original punctuation marks (like , ; . " ' ! ? etc. are not filtered out because they
		// are not part of the word given to the analyzer!
		//"( *?)?(.*?)( *?)?" => "$2"; // additional spaces created by eSpeak => are now trimmed directly inside php-code
		"mA~t$" => "{MENT1}"; // mark diacritics (holy cow ... what a mess :)
		
		// mark diacritics (using : before filtering it out)
		// examples: 
		// - ôte hôte hotte => difference in preceeding vowel (closed vs open)
		// - pâte vs patte (p'a:t vs p'at): difficult to handle because short vowel is marked, but short vowel
		//   is the standard case (and if the rules mark it, it will be marked in a lot of words where it 	
		//   shouldn't be marked (e.g. date vs datte) ... So, the only solution is to do it with a list of
		//   words that have to be marked ...
		// no distinction: 
		// - bête, dette (b'Et vs d'Et)
		// - date, datte (d'at vs d'at)

		"(?<!o|^|:|[eEaAbBcCdDfFgGkKiIjJlLmMpPrRsStTvVwWxXyYzZuU@]|~)t(?!r)" => { "[T@#/.]", "[nv]Otr", "^#", "^(pr|n|(?:kO~)?patri)Ot", "#avaient", "^f[Oo]t[Oo]" }; // exception: protester, note, (com)patriote

		// list of words that have to be marked
		"^p('?)at$" => "pa[T@#/.]";

		// filtering (after diacritics)
		":" => ""; // filter out long vowel mark (again: original : are not touched)
		"[-\.](?!\])" => ""; // filter out rounded/unrounded (dont filter out diacritics)
		"_\|" => ""; // filter out aspiration (haute)

		// special space filtering
		// filter out spaces, e.g.: au-dessus: - generates space in eSpeak
		// use | to get correct r|l separation in tire-ligne
		// nice (positive) side-effect: this also avoids [st] in passe-temps, [sk]([skl] in fausse-clé etc.
		" " => "|"; 

		// corrections
		"(kO~tr)\|(ba)" => "$1$2"; // contre-bas: write it in one word
		"(o|la|si)\|(d@s[yu])" => "$1$2"; // au-dess(o)us
		"(o|la|si)\|(d@vA~)" => "$1$2"; // au-devant
		"^(o)\|(d@la)$" => "$1$2"; // au-delà

		"(pO(?:\[T@#\/\.\]|[Tt])o)\|(fY)" => "$1$2"; // pot-au-feu

		"^inuj$" => "inui"; // inouï

		"^hEnri$" => "a~ri"; // Henry
		"(labIr)[Ii]n[DtT]" => "$1E~t";  // labyrinthe (error in espeak?)

		"yije" => "yje"; // fuyez
		"manjEr" => "manier"; // manière (correction eSpeak)
		"^nje$" => "nie"; // nier, nié etc. (correction eSpeak)

		"aEko" => "Eko"; // ex aequo (correction eSpeak)
		"Ekstr@mi" => "ekstremis"; // extremis (correction eSpeak)

		"^zyriS$" => "zyrik"; // Zürich (correction eSpeak)

	#EndSubSection(analyzer)
#EndSection(header)
#BeginSection(font)
	#BeginSubSection(base)
		"@#/" => {  /*h:diacriticas*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ -5,  -4,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#_" => {  /*h:diacritics*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ 5,  0,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#." => {  /*h:diacritics*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  -0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0.5,  0,  0.5,  0,  1.0,  0,  1,  0.5  }
		"@#/." => {  /*h:diacritics:pointhigh*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  -0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0.5,  0,  0.5,  0,  1.0,  0,  1,  0.5  }	
		"@#/_" => {  /*h:diacritics*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ 5,  0,  0.0,  0,  1.0,  0,  1,  0.0  }
		"0" => { /*spanisch*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 1, 0 }
		"1" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 11, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"2" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"3" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 0, 5, 0, 0, 1, 0, 1, 0 }
		"4" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 11, 0, 0, 1, 0, 0, 0,  /**/ 5.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 5.5, 1, 0, 0, 1, 0, 0, 0 }
		"5" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 4, 0.5, 0, 1, 0, 0, 0 }
		"6" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0.5,  /**/ 1, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 10, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 1, 0 }
		"7" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 5, 0, 0,  /**/ 6.5, 11, 0, 0, 1, 0, 0, 0 }
		"8" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 11, 0, 0, 1, 5, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 1, 1, 0, 0, 0 }
		"9" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 3.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0 }
		"IST" => { /*header*/ 1, 0.5, 0, 0.5, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 10.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0.5, 9.5, 0.5, 0, 3, 0, 1, 0 }
		"ES" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 2, 5, 0, 0, 1, 0, 1, 0 }
		"EST" => { /*spanisch*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LPB:LP", /*data*/ 0.5, 5.25, 0, 1, 1, 0, 0, 0,  /**/ 0, -0.05, 0, 0, 1, 0, 1, 0, /*diacritics*/ -10,  10,  0,  "@#/_",  0,  0,  0,  0 }
		"NO" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 6, -5, 0, 0, 1, 0, 1, 0 }
		"WAS" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"AUCH" => { /*header*/ 5, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4.2, 10, 0.7, 2, 2.5, 0, 0, 0.6,  /**/ 7.8, 5.6, 0.8, 0, 3, 0, 0, 0.5,  /**/ 6.9, -5.2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -8, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 4, -10, 0.5, 0, 1, 0, 0, 0 }
		"TIG" => { /*header*/ 7.5, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 6, 20, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 7.5, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 7.5, 10, 0, 0, 1, 0, 1, 0,  /**/ 7.5, 12.5, 0, 4, 1, 0, 0, 0 }
		"NICHT" => { /*header*/ 15, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6.5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.75, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 12.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 14, 1, 0.5, 0, 1, 0, 1, 0 }
		"ALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"WERD" => { /*header*/ 1.25, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.25, 0, 0.5, 0, 1.2, 0, 1, 0 }
		"IN" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0,"", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0, "LNA:LN:RNB:RN", /*data*/ 0, 3, 0, 1, 1, 0, 0, 0,  /**/ 3, 4, 0, 0, 1, 0, 0, 0,  /**/ 2, 0, 0, 0, 1, 0, 0, 0,  /**/ 5, 1, 0, 0, 1, 0, 1, 0 }
		"LES" => { /*spanish*/ 2.5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPA:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.75, 0, 0.5, 0, 1.2, 0, 2, 0,  /**/ 2.5, 1, 0.5, 0, 1.2, 0, 1, 0 }
		"SEIN" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 15, 3.5, 0.5, 0, 2.25, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 2.5, 0, 0, 0,  /**/ 20, 0, 0, 0, 1, 0, 1, 0 }
		"GEGEN" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0.5, 7.5, 0.5, 1, 1, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 1, 0, 0, 0.5,  /**/ 4, 8, 0.5, 0, 1, 0, 0, 0,  /**/ 4, 4.5, 0, 0, 1, 0, 0, 0.5,  /**/ 6.25, 5.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 3, 0, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"HAB" => { /*header*/ 4, 0.5, 0, 0, 1.5, 1.5, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"HAT" => { /*header*/ 4.5, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNC:RN", /*data*/ 0, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 1, 0 }
		"DA" => { /*header*/ 0, 0.5, 0, 0, 0, 2.25, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"SIND" => { /*header*/ 2.5, 0.5, 0, 0.5, 1, 2.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, "", "", "", 0, "LPA:LP:RPB:RP", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7.75, 6.2, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.14, 0.5, 0.5, 0, 1, 0, 0, 0 }
		"VOR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"VORAR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 5.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 3, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 3, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANT" => { /*header*/ 26, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 11.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 17.75, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 26, 0, 0.5, 0, 1, 0, 1, 0 }
		"RÜCK" => { /*header*/ 8, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"UR" => { /*header*/ 5, 0.5, 0, 0, 0, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ -2, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANTI" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 24.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"ZURÜCK" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 2, 0, 0, 0.5,  /**/ 1, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 2, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"INTER" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 2, 1, 0, 0, 0.5,  /**/ 4, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"ION" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 25, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 18,  5,  0,  "@#/_",  0,  0,  0,  0 }
		"ON" => { /*header:french*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 25, 2, 0.5, 0, 1, 0, 1, 0 }
		"HAFT" => { /*header*/ 4, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SCHAFT" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 19.25, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"TALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 15, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 18.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.1, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 12, 0.5, 0, 2.5, 0, 0, 0,  /**/ 7, 10, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 12, 0.5, 0, 1, 0, 1, 0 }
		"TUNG" => { /*header*/ 8, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 7, 18, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 11.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 5, 12, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 14, 0.5, 0, 1, 0, 1, 0 }
		"AUF" => { /*header*/ 9, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 2, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 9, 5, 0.5, 0, 1, 0, 1, 0 }
		"AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"-AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "RNB:RN", /*data*/ 10, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"BEI" => { /*header*/ 18, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 9, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 14, 0.5, 0, 0, 1, 0, 2, 0.5,  /**/ 18, 5, 0.5, 0, 1, 0, 1, 0 }
		"BEI+AR" => { /*header*/ 25, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 5, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 21.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 5, 0.5, 0, 1, 0, 0, 0.5, /**/ 16.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 20.5, 0.2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 25, 5, 0.5, 0, 1, 0, 1, 0 }
		"DURCH" => { /*header*/ 10, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 3, 10, 0, 1, 1, 0, 0, 0.3,  /**/ 0.5, 5, 0.3, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"DIS" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ -1, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 6.5, 5, 0, 0, 1, 0, 1, 0 }
		"SICH" => { /*header*/ 11.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 9.5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 5, 0, 0, 1, 0, 1, 0 }
		"SOLCH" => { /*header*/ 15, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, -0.5, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2.5, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.5, 4, 0, 0, 1, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 0, 0,  /**/ 10, 3.5, 0, 1, 1.3, 0, 0, 0.5,  /**/ 12.5, 5, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 15, 2, 0.8, 0, 3, 0, 0, 0.5,  /**/ 15, -13, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 13, -15, 0.5, 0, 2, 0, 99, 0.5,  /**/ 11.5, -14, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, -12, 0.5, 0, 1, 0, 2, 0.5,  /**/ 13, -7, 0.5, 0, 1, 0, 1, 0.5,  /**/ 15, -2.5, 0, 4, 1, 0, 0, 0 }
		"WIRD" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 5, 0.5, 1, 1, 0, 1, 0 }
		"SELB" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 2, 2, 0.5, 0, 1, 0, 1, 0 }
		"WO" => { /*header*/ 7, 0.5, 0, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 3.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 1.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"VILLEICHT" => { /*header*/ 5, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 12, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 17, 0.5, 0, 1, 0, 1, 0 }
		"TOT" => { /*header:french*/ 5, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 7, 12, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 17, 0.5, 0, 1, 0, 1, 0 }
		"HEIT" => { /*header*/ 24, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0, /*diacritics*/ 19,  25,  0,  "@#/_",  0,  0,  0,  0,}
		"HEIT-1" => { /*header*/ 24, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0 }
		"FORT" => { /*header*/ 8, 0.5, 0, 0, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 5, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"\" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 }
		"#0" => { /*header*/ 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, "",  /**/ "", "", "", 0, 2, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#S#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0, 0, 0, 1, 5, 1, 0 }
		"#1" => { /*header*/ 1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2" => { /*header*/ 2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7" => { /*header*/ 7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9" => { /*header*/ 9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#10" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#1-" => { /*header*/ -1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2-" => { /*header*/ -2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3-" => { /*header*/ -3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4-" => { /*header*/ -4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5-" => { /*header*/ -5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6-" => { /*header*/ -6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7-" => { /*header*/ -7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8-" => { /*header*/ -8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9-" => { /*header*/ -9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"MPF" => { /*header*/ 6, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNC:LN:RNA:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 3.1, 0.5, 0, 1, 0, 0, 0.8,  /**/ 0.75, 2.6, 0.8, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ -7,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"SCH" => { /*header*/ 9, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 5, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"^SCH" => {  /*h*/ 9,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  "LNA:LN:RPC:RP", /*d*/ 5,  7,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  10,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9.5,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -8,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  -6.5,  0.5,  0,  1,  0,  1,  0.5, /**/ 5,  -6,  0,  4,  1,  0,  0,  0.5 }
		"^SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^CH" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4, 10, 0.7, 2, 2.5, 0, 0, 0.5,  /**/ 7, 6.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 3, -8.5, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 2.5, -6.5, 0.5, 0, 1, 0, 2, 0.5,  /**/ 4, -4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 7, 2.5, 0, 4, 1, 0, 0, 0 }
		"^ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^Z" => { /*header*/ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 1, -1, 0, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"CK" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNE", /*data*/ 0, 28.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 30, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 27, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4, 25, 0, 0, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"FF" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 27, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 30, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 28, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"LL" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"LT" => { /*header*/ 8.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data1*/ 3, 15.5, 0.5, 1, 1.0, 0, 0, 0.5,  /*2*/ 5, 18, 0.5, 2, 1.0, 0, 0, 0.5,  /*3*/ 2, 20, 0.5, 0, 1.75, 0, 0, 0.5,  /*4*/ 1.5, 16.75, 0.5, 0, 2.0, 0, 0, 0.0,  /*5*/ 6, 10, 0.0, 0, 1.5, 0, 0, 0,  /*6*/ 2, 9, 0.5, 0, 2.0, 0, 0, 0.5,  /*7*/ 0, 5.75, 0.5, 0, 2.5, 0, 0, 0.5,  /*8*/ 1.5, 2, 0.5, 0, 2.0, 0, 0, 0.5,  /*9a*/ 6, 0, 0.5, 4, 1.5, 0, 2, 0.5, /*9b*/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /*10*/ 8.5, 3.5, 0.5, 0, 1.0, 0, 1, 0.5 }
		"MM" => { /*header*/ 13, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1.2, 0, 0, 0.5,  /**/ 8, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10, 8.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 10, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 12, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 12, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 13, 2, 0.5, 0, 1, 0, 1, 0 }
		"NN" => { /*header*/ 17, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 17, 2, 1, 0, 1, 0, 1, 0 }
		"PP" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 3, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 6, 2, 0, 0, 1, 0, 1, 0 }
		"RR" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK:RKC:RK", /*data*/ 0, 8, 0.5, 1, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 8, 7.75, 0.5, 5, 3, 0, 0, 0.5,  /**/ 10, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 9, 0.25, 0.5, 5, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 1, 0, 1, 0 }
		"RR6" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK", /*data*/ /*1*/ 5, 0, 0.5, 1, 1, 0, 0, 0.5, /*2*/ 9, 0.25, 0.5, 0, 1.0, 0, 0, 0.5, /*3*/ 10, 4, 0.5, 0, 1, 0, 0, 0.5, /*4*/ 8, 7.75, 0.5, 0, 1, 0, 0, 0.5, /*5*/ 5, 10, 0.5, 0, 1.5, 0, 0, 0.5, /*6*/ 1, 9, 0.5, 0, 2.5, 0, 0, 0.5, /*7*/ 0.5, 4.75, 0.5, 0, 2.5, 0, 0, 0.5, /*8*/ 5, 0, 0.5, 0, 1, 0, 1, 0.5 }
		"SS" => { /*header*/ 14, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.5, 8, 0, 0, 3, 0, 0, 0,  /**/ 9.5, 6, 0, 0, 3, 0, 0, 0,  /**/ 14, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 12,  -5,  0,  "@#.",  0,  0,  0,  0, /*diacritics*/ -2,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"SUS" => { /*header*/ 18, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 3.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 4.5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 13, 0, 0.5, 0, 3, 0, 0, 0.5,  /**/ 16, -3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, -5, 0.5, 0, 1, 0, 1, 0.5 }
		"SOBRE" => { /*spanish*/ 15.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 13, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 9, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10.5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 12.5, 6, 0.5, 0, 3, 0, 0, 0.5, /**/ 15.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13, 0, 0.5, 0, 3, 0, 0, 0.5, /**/ 10.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13, 5, 0.5, 0, 3, 0, 1, 0.5 }
		"TT" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"CH" => { /*header*/ 5, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 5, 7, 0.8, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 99, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"ND" => { /*header*/ 3.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNB:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.5, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"NG" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2.5, 7.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3.5, 4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 4, 0, 4, 1, 0, 0, 0 }
		"NK" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPD", /*data*/ 3, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 1, 0.5,  /**/ 4, 5.5, 0, 4, 1, 0, 0, 0 }
		"NS" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2, 5.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5, 7.75, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.75, 1.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 2.5, 2.75, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3, 3.5, 0, 4, 1, 0, 0, 0 }
		"PF" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0.5, 7, 0.5, 2, 1, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 11.1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 16.5, 0.5, 0, 1.25, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 2.25, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.25, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.25, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SP" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ /*4, 15, 0.5, 0, 3, 0, 0, 0.5,*/  /**/ /*4, 5, 0.5, 0, 2.5, 0, 0, 0.5,*/  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"MP" => { /*spanish*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 0, 0, /*n*/ 4, 4, 0.5, 0, 1, 0, 0, 0, /*n*/ 1, 3, 0.5, 0, 1, 0, 0, 0, /*n*/ 6, 2, 0.5, 0, 1, 0, 2, 0, /*n*/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"ST" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 1, 0 }
		"XT" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5, 15, 0.5, 2, 2, 0, 0, 0.5,  /**/ 3.25, 18.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 10, 0, 0, 3, 0, 0, 0, /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 9, 0, 0, 1, 1, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 1, 0 }
		"EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 5, 0, 0, 1, 1, 0, 0, 0,  /**/ 18, 0, 0.5, 1, 1, 0, 1, 0 }
		"/EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"/EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 15, 0, 0.5, 1, 1, 0, 1, 0 }
		"DEN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"DEM" => { /*header*/ 13, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 13, 0, 0.5, 1, 1, 0, 1, 0 }
		"VR+AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"B" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 5, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ -1,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"C" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 9.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"D" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"F" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"G" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 1.75, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 2, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 4.5, 8, 0.0, 0, 3, 0, 0, 0,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4.5, 2.5, 0, 4, 1, 0, 0, 0 }
		"H" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNB:LN:RPC:RP", /*data*/ 0.5, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1.75, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3.5, 7.2, 0, 0, 3, 0, 0, 0,  /**/ 3.5, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.95, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1, 0, 99, 0.5,  /**/ 0, 2.4, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.5, 4.59, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 5, 0, 4, 1, 0, 0, 0 }
		"J" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 3, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"J^" => { /*header*/ 3, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"K" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 4, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"L" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 3.25, 8.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 2, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.25, 1.5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 0,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"LUI" => { /*header:french*/ 3, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ 3, 4, 1, 0, 1, 0, 0, 0.5,  /**/ 2, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 8.5, 0.5, 0, 1, 0, 2, 0.5,  /**/ 2.5, 7.5, 0.5, 0, 1, 0, 1, 0 }
		"@L" => { /*header*/ 0, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1, 1, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"@L3" => { /*header*/ 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ -0.75, 0.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ -0.75, -0.75, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"&L" => { /*header*/ 2, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 2.5, 0, 1, 0 }
		"M" => { /*header*/ 7.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.7, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 0.75, 10, 0.5, 2, 1.0, 0, 0, 0.5,  /**/ 1.7, 10, 0.5, 0, 1.75, 0, 0, 0.5,  /**/ 3.8, 7.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 5.5, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 5.5, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 7.5, 1.75, 0.5, 0, 1, 0, 1, 0 }
		"N" => { /*header*/ 11, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1.9, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.5, 3.9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 11, 1, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"N=" => { /*header*/ 12, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2.9, 5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5.5, 3.9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 8.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 12, 1, 0.5, 0, 1, 0, 1, 0 }
		"P" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 3, 0, 0, 0,  /**/ 0, 2.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 5, 2, 0, 0, 1, 0, 1, 0 }
		"Q" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPD", /*data*/ 1, 19, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 20, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 19, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"VR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7,  /**/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ -2,  10,  0,  "@#/_",  0,  0,  0,  0 }
		"AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"AR^" => { /*header*/ 5, 0.5, 0, 0.5, 0, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 2.5, 0.7, 0, 1, 0, 1, 0 }
		"AR5" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 2.5, 0.7, 1, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"AUF+AR" => { /*header*/ 10.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 1.75, 2.5, 0.5, 0, 2, 0, 0, 0,  /**/ 5.75, 0, 0.5, 0, 1, 0, 0, 0.7,  /**/ 10.5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 8, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 8, 0, 0.5, 0, 1, 0, 1, 0 }
		"@R" => {  /*R3^fromDESSBAS*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ -2.5,  4,  0.7,  0,  1,  0,  0,  0.5, /**/ -5,  1.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  1.5,  0.5,  0,  1,  0,  1,  0.7 }
		"@R6" => { /*header*/ 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ -2.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"S" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 3, 4.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, 3.5, 0.5, 0, 3, 0, 0, 0,  /**/ 8.75, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#.",  0,  0,  0,  0, /*diacritics*/ 5,  10,  0,  "@#/_",  0,  0,  0,  0 }
		"=ES" => { /*header*/ 18.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 5.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, 5.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 12, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 14, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 18.75, 0, 0, 0, 1, 0, 1, 0 }
		"S=" => { /*header*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 2, 0, 0, 0,  /**/ 5, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 9.75, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 8,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 8,  -5,  0,  "@#.",  0,  0,  0,  0 }
		"SER" => { /*spanisch*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 5.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.75, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/  5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 3, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"T" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0, /*diacritics*/ 0,  25,  0,  "@#/.",  0,  0,  0,  0, /*diacritics*/ -5,  25,  0,  "@#/_",  0,  0,  0,  0 }
		"&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 0, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&IT" => { /*spanisch*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 17.8, 0.5, 1, 1, 0, 1, 0.5 }
		"&T-1" => { /*header*/ 4, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T3/4" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T34" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&TES" => { /*header*/ 23, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 15, 20, 0.5, 0, 1, 0, 0, 0.5, /**/ 20, 17.8, 0.5, 0, 1, 0, 0, 0.5, /**/ 23, 15, 0.5, 0, 1, 0, 1, 0.5 }
		"ET" => { /*header*/ 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 25, 0, 1, 1, 0, 1, 0,  /**/ 4, 25, 0, 0, 1, 0, 1, 0 }
		"ET3/4" => { /*header*/ 4, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"V" => { /*header*/ 7, 0.5, 0, 0.5, 1.5, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 0.25, 16.75, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 2, 1, 0, 0, 0,  /**/ 6, 20, 0, 98, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 0, 1.5, 0, 0, 0.5,  /**/ 0.25, 16.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.75, 14, 0.5, 0, 3, 0, 0, 0.5,  /**/ -1.5, 9.75, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3.5, 0.25, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 0.5, 0.5, 0, 1, 0, 1, 0 }
		"W" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 1.5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#.",  0,  0,  0,  0 }
		"X" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 7.5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 3, 9.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1, 9.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.5, 6, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1.5, 0, 0, 0,  /**/ 7, 0, 0, 0, 1, 0, 1, 0 }
		"Y" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"Z" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"&E" => { /*header*/ 3, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.2, 0, 2, 0.5,  /**/ 3, 0, 0.5, 0, 1, 0, 1, 0 }
		"&A" => { /*header*/ 0, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"&U" => { /*header*/ 5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"&O" => { /*header*/ 6.75, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"&I" => { /*header*/ 2, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 1, 0.5, 1, 2, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1, 0, 0, 0,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"-E" => { /*header*/ 1.25, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 1, 5, 0, 1, 3, 0, 0, 0,  /**/ 1, 5, 0, 0, 3, 0, 1, 0 }
		"-A" => { /*header*/ 0, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"-U" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"-O" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"-I" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-I1" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 15, 0, 1, 3, 0, 0, 0,  /**/ 0, 15, 1, 0, 3, 0, 1, 0 }
		"-EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-^EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"/I" => { /*header*/ 1.25, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 0, 0, 0 }
		"0-" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"00" => { /*header:coordinate00:french*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0N-" => { /*header*/ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0D-" => { /*header*/ 3, 0, -0.5, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0U-" => { /*header*/ 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"PSPACE" => { /*header*/ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 2, 0, 0, 0, 1, 5, 2, 0 }
		"~~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"…" => { /*header*/ 9, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 5, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 4, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 9, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 8, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 0, 1, 0, 1, 0 }
		"." => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"," => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2, -2, 0, 1, 1, 5, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 1, 0 }
		";" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 3, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 3, 1, 0, 1, 1, 5, 0, 0,  /**/ 2, -2, 0, 0, 1, 0, 1, 0 }
		":" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 1, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"!" => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 20, 0, 1, 1, 5, 0, 0,  /**/ 0.5, 5, 0, 1, 1, 0, 0, 0,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"?" => { /*header*/ 5, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 15, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.75, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 13, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 0, 0, 0, 1, 0, 1, 0 }
		"=" => { /*header*/ 5, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 11, 0, 1, 1, 5, 0, 0.5,  /**/ 5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 0, 9, 0, 0, 1, 5, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 1, 0 }
		"'" => { /*header*/ 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0 }
		""" => { /*header*/ 3, 0, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"/" => { /*header*/ 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 1, 0, 1, 1, 5, 0, 0,  /**/ 6, 19, 0, 0, 1, 0, 1, 0 }
		"#Q#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"(" => { /*header*/ 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 4, 13, 0, 1, 1, 5, 0, 0,  /**/ 0, 13, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0 }
		")" => { /*header*/ 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 13, 0, 1, 1, 5, 0, 0,  /**/ 4, 13, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0 }
		"A" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#0S" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", 0, "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#N" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#W" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#ND" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WD" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WUS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"E" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"I" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"O" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"U" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ä" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ö" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ü" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"AU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EI" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#A+" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 3.5, 19, 0, 0, 1, 0, 0, 0,  /**/ 7, 0, 0, 0, 1, 0, 0, 0,  /**/ 1.75, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 5.25, 9.5, 0, 0, 1, 0, 1, 0 }
		"#A-" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 5.25, 9, 0, 1, 1, 5, 0, 0.5,  /**/ 4.5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 3.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 5.25, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 5.25, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 6, 0, 0, 0, 1, 0, 1, 0 }
	#EndSubSection(base)
	#BeginSubSection(combiner)
		"D" => { "@R", 0, 0 }
		"D" => { "@#/", "", "" }
		"C" => { "@R", 0, 0 }
		"ND" => { "@R", 0, 0 }
		"T" => { "@R", 0, 0 }
		"G" => { "@R", 0, 0 }
		"K" => { "@R", 0, 0 }
		"CH" => { "@R", 0, 0 }
		"NK" => { "@R", 0, 0 }
		"NG" => { "@R", 0, 0 }
		"NS" => { "@R", 0, 0 }
		"H" => { "@R", 0, 0 }
		"SCH" => { "@R", 0, 0 }
		"ST" => { "@R", 0, 0 }
		"L" => { "@L", 0, 0 }
		"B" => { "@L", 0, 0 }
		"G" => { "@L3", 0, 0 }
		"M" => { "@L", 0, 0 }
		"MM" => { "@L", 0, 0 }
		"F" => { "@L", 0, 0 }
		"P" => { "@L", 0, 0 }
		"PF" => { "@L", 0, 0 }
		"V" => { "@L", 0, 0 }
		"SP" => { "@L", 0, 0 }
		"W" => { "@L", 0, 0 }
		"T" => { "@L3", 0, 0 }
		"TT" => { "@L3", 0, 0 }
		"PP" => { "@L", 0, 0 }
		"CK" => { "@L3", 0, 0 }
		"FF" => { "@L", 0, 0 }
		"NG" => { "@L3", 0, 0 }
		"NS" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"D" => { "@L3", 0, 0 }
		"C" => { "@L3", 0, 0 }
		"ND" => { "@L3", 0, 0 }
		"ST" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"K" => { "@L3", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"SCH" => { "@L3", 0, 0 }
		"^SCH" => { "@L3", 0, 0 }
		"CH" => { "@L3", 0, 0 }
		"B" => { "@R6", 0, 0 }
		"SP" => { "@R6", 0, 0 }
		"F" => { "@R6", 0, 0 }
		"M" => { "@R6", 0, 0 }
		"P" => { "@R6", 0, 0 }
		"PF" => { "@R6", 0, 0 }
		"V" => { "@R6", 0, 0 }
		"W" => { "@R6", 0, 0 }
		"Z" => { "@R", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"DA" => { "@R", 0, 0 }
		"N" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"N" => { "@L", 0, 0 }
		"N" => { "@#/", "", "" }
		"NN" => { "@L", 0, 0 }
		"NN" => { "@R6", 0, 0 }
		"VR" => { "@L", 0, 0.5 }
		"RR" => { "@L", 0, 1 }
		"CK" => { "@L", 0, 0 }
		"L" => { "@R6", 0, 0 }
		"TT" => { "@R", 0, 0 }
		"PP" => { "@R6", 0, 0 }
		"CK" => { "@R", 0, 0 }
		"FF" => { "@R6", 0, 0 }
		"LT" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"B" => { "@#/", "", "" }
		"B" => { "@#_", "", "" }
		"L" => { "@#/", "", "" }
		"L" => { "@#/_", "", "" }
		"S=" => { "@#/", "", "" }
		"AR" => { "@#/", "", "" }
		"AR" => { "@#_", "", "" }
		"VR" => { "@#/_", "", "" }
		"S" => { "@#.", "", "" }
		"S" => { "@#/_", "", "" }
		"S=" => { "@#.", "", "" }
		"SS" => { "@#.", "", "" }
		"W" => { "@#.", "", "" }
		"T" => { "@#/.", "", "" }
		"T" => { "@#/_", "", "" }
		"SS" => { "@#/_", "", "" }
		"EST" => { "@#/_", "", "" }
		"MPF" => { "@#/_", "", "" }
		"ION" => { "@#/_", "", "" }
		"HEIT" => { "@#/_", "", "" }
	#EndSubSection(combiner)
	#BeginSubSection(shifter)
		"DEM" => { "^DEM", 0, 5, 0, 0 }
		"DEN" => { "^DEN", 0, 5, 0, 0 }
		"DEM" => { "^^DEM", 0, 10, 0, 0 }
		"DEN" => { "^^DEN", 0, 10, 0, 0 }
		"=ES" => { "&EITES", 10, 14.5, 0, 1 }
		"B" => { "&TB", 4, 10, 0, 1 }
		"NG" => { "&TNG", 4, 10, 0, 1 }
		"NS" => { "&TNS", 4, 10, 0, 1 }
		"C" => { "&TC", 4, 10, 0, 1 }
		"D" => { "&TD", 4, 10, 0, 1 }
		"G" => { "&TG", 4, 10, 0, 1 }
		"H" => { "&TH", 4, 10, 0, 1 }
		"J" => { "&TJ", 4, 10, 0, 1 }
		"L" => { "&T#L", 4, 10, 0, 1 }
		"@L3" => { "&T@L3", 4, 16.5, 0, 1.5 }
		"ALL" => { "&TALL", 4, 10, 0, 1 }
		"M" => { "&TM", 4, 10, 0, 1 }
		"W" => { "&TW", 4, 10, 0, 1 }
		"X" => { "&TX", 4, 10, 0, 1 }
		"Y" => { "&TY", 4, 10, 0, 1 }
		"&E" => { "&T&E", 4, 15, 0, 1.5 }
		"SCHAFT" => { "&TSCHAFT", 4, 15, 0, 1.5 }
		"ION" => { "&TION", 4, 10, 0, 1 }
		"N" => { "&TN", 4, 15, 0, 1.5 }
		"VR" => { "&TVR", 4, 15, 0, 1.5 }
		"AR5" => { "&TAR5", 4, 15, 0, 1.5 }
		"S" => { "&TS", 4, 15, 0, 1.5 }
		"&U" => { "&T&U", 4, 15, 0, 1.5 }
		"&O" => { "&T&O", 4, 15, 0, 1.5 }
		"&I" => { "&T&I", 4, 15, 0, 1.5 }
		"CH" => { "&TCH", 4, 20, 0, 1 }
		"SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"^Z" => { "&T^Z", 4, 20, 0, 1 }
		"^CH" => { "&T^CH", 4, 20, 0, 1 }
		"^SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"Z" => { "&TZ", 4, 20, 0, 1 }
		"F@L" => { "&TF@L", 4, 10, 0, 1 }
		"F" => { "&TF", 4, 10, 0, 1 }
		"HAFT" => { "&THAFT", 4, 10, 0, 1 }
		"K" => { "&TK", 4, 20, 0, 1 }
		"P" => { "&TP", 4, 20, 0, 1 }
		"Q" => { "&TQ", 4, 20, 0, 1 }
		"V" => { "&TV", 4, 20, 0, 1 }
		"NK" => { "&TK", 4, 20, 0, 1 }
		"PF" => { "&TPF", 4, 20, 0, 1 }
		"SP" => { "&TSP", 4, 20, 0, 1 }
		"ST" => { "&TST", 4, 10, 0, 1 }
		"SCHW" => { "&TSCHW", 4, 30, 0, 1 }
		"ZW" => { "&TZW", 4, 30, 0, 1 }
		"B" => { "&EITB", 18, 10, 0, 1 }
		"NG" => { "&EITNG", 18, 10, 0, 1 }
		"NS" => { "&EITNS", 18, 10, 0, 1 }
		"C" => { "&EITC", 18, 10, 0, 1 }
		"D" => { "&EITD", 18, 10, 0, 1 }
		"G" => { "&EITG", 18, 10, 0, 1 }
		"H" => { "&EITH", 18, 10, 0, 1 }
		"J" => { "&EITJ", 18, 10, 0, 1 }
		"L" => { "&EITL", 18, 10, 0, 1 }
		"@L3" => { "&EIT@L3", 18, 10, 0, 1 }
		"ALL" => { "&EITALL", 18, 10, 0, 1 }
		"M" => { "&EITM", 18, 10, 0, 1 }
		"W" => { "&EITW", 18, 10, 0, 1 }
		"X" => { "&EITX", 18, 10, 0, 1 }
		"Y" => { "&EITY", 18, 10, 0, 1 }
		"&E" => { "&EIT&E", 18, 15, 0, 1.5 }
		"SCHAFT" => { "&EITSCHAFT", 18, 15, 0, 1.5 }
		"N" => { "&EITN", 18, 15, 0, 1.5 }
		"VR" => { "&EITVR", 18, 15, 0, 1.5 }
		"S" => { "&EITS", 18, 15, 0, 1.5 }
		"U" => { "&EITU", 18, 15, 0, 1.5 }
		"&O" => { "&EIT&O", 18, 15, 0, 1.5 }
		"CH" => { "&EITCH", 18, 20, 0, 1 }
		"SCH" => { "&EITSCH", 18, 20, 0, 2 }
		"Z" => { "&EITZ", 18, 20, 0, 1 }
		"^Z" => { "&EIT^Z", 4, 20, 0, 1 }
		"^CH" => { "&EIT^CH", 4, 20, 0, 1 }
		"^SCH" => { "&EIT^SCH", 4, 20, 0, 1 }
		"F" => { "&EITF", 18, 10, 0, 1 }
		"K" => { "&EITK", 18, 20, 0, 1 }
		"P" => { "&EITP", 18, 20, 0, 1 }
		"Q" => { "&EITQ", 18, 20, 0, 1 }
		"V" => { "&EITV", 18, 20, 0, 1 }
		"NK" => { "&EITK", 18, 20, 0, 1 }
		"PF" => { "&EITPF", 18, 20, 0, 1 }
		"SP" => { "&EITSP", 18, 20, 0, 1 }
		"ST" => { "&EITST", 18, 10, 0, 1 }
		"SCHW" => { "&EITSCHW", 18, 30, 0, 1 }
		"ZW" => { "&EITZW", 18, 30, 0, 1 }
		"@L3" => { "&T@L3", 4, 15, 0, 1.5 }
		"@R" => { "&T@R", 4, 15, 0, 1.5 }
		"@L3" => { "&EIT@L3", 18, 15, 0, 1.5 }
		"@R" => { "&EIT@R", 18, 15, 0, 1.5 }
		"M" => { "ISIM", 4, 10, 0, 1 }
	#EndSubSection(shifter)
#EndSection(font)
#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		// global replacements in the whole text french
		// strange characters
		"’" => "'"; // strange apostrophe
		"«" => """; // no french apostrophes for the moment ... :-/
		"»" => """;

		// eliminate upper case at beginnings (otherwhise the model will use diacritics for all words that
		// start with upper case).
		//"(?<=^|[\.\?\:\!-])((?:.*?)(?:[A-Z]|Ä|Ö|Ü|À|Á|Â|É|È|Ê|Ó|Ò|Ô|Ú|Ù|Û))" => "strtolower()";
		"(?<=^|[-\.\?\!])( *?[A-Z])" => "strtolower()";

		"([tl])'avions" => "t#avions"; // avoid confusion with avion(s)

		// high priority replacements (= without any preliminar modification of the original text)		
		"Êtes" => "#etes";
		"(?<=^| )([Dd]|[Qq]u)?\'?[Aa]ujourd\'?hui(?=[ ,\.]|$)" => "$1#aujourdhui";	
		"(?<=^| )[Jj]usqu\'?à ce que(?=[ ,\.]|$)" => "#jusquaceque";	
		"(?<=^| )[Pp]lus tôt(?=[ ,\.]|$)" => "plutôt";	// make plus tôt and plutôt the same (parallel edition will be impossible ...)
		//"(?<=^| )([Qq]u)\'a(?=[ ,\.-]|$)" => "$1e a";	
		"(?<=^| )[Ss]wiss(air)(?=[ ,\.-]|$)" => "#swiss$1";	
		
		// abbreviations
		"(?<=^| )[Qq]uoiqu\'(il|elle)s?(?=[ ,\.-]|$)" => "#quoiqu$1";
		"(?<=^| )[Ff]rs?\.(?=[ ,\.-]|$)" => "#francs";
		"(?<=^| )[Dd]r(?=[ ,\.-]|$)" => "#docteur";
		//"([Jj]an|[Ff]év|[Mm]ar|[Aa]vr|[Mm]ai|[Jj]uin|[Jj]uil|[Aa]oût|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]éc)\."
		"(?<=^| )[Oo]ct\.(?=[ ,\.-]|$)" => "oct";
		"(?<=^| )[Cc]ie(?=[ ,\.-]|$)" => "#cie";
		"(?<=^| )[Cc]o\.(?=[ ,\.-]|$)" => "#co";
		"(?<=^| )[Kk]m(?=[ ,\.-]|$)" => "#km";
		"(?<!#)[Ee]tc\.?(?=[ ,\.-]|$)" => "#etc";
		"(?<=^| )[Ss]\.[Aa]\.(?=[ ,\.-]|$)" => "#socanon";
		"(?<=^| )[Cc]\.-(?:à|a)-d\.(?=[ ,\.-]|$)" => "#cad";
		"(?<=^| )[Pp]\.ex\.(?=[ ,\.-]|$)" => "#parex";
		"(?<=^| )[Kk]g(?=[ ,\.-]|$)" => "#kg";
		"(?<=^| )[Cc]m(?=[ ,\.-]|$)" => "#cm";
		"(?<=^| )[Nn]o(?=[ ,\.-]|$)" => "#nr";
		"(?<=^| )[Pp][Ss](?=[ ,\.-]|$)" => "#ps";
		"(?<=^| )[Aa]rt(?=[ ,\.-]|$)" => "#art";
		"(?<=^| )[Ss][Vv][Pp](?=[ ,\.-]|$)" => "#svp";
		"(?<=^| )[Ff]evr?(?=[ ,\.-]|$)" => "#fev";
		"(?<=^| )[Nn]ov(?=[ ,\.-]|$)" => "#nov";
		
		
		// ok, here's the problem: un avion / l'avion / les avions vs nous avions / nous les avions
		// this is not an unimportant distinction for "Vol de nuit" by Antoine de St-Exupéry for example ... :)
		// so, let's try to figure that out as good as we can ...
		// the trick is to mark all verbal forms as #avions (and not to mark avion/avions as a noun)
		"([Nn])ous (ne |n')?(les )?avions" => "$1ous $2$3#avions";
		

		// eliminate upper case vowels with accents (produces gibberish)
		"À" => "A";
		"(Ô|Ò)" => "O";
		"(Ê|È|É)" => "E";
		

		// fils vs fils (fil): quite tricky (if not impossible) to know which is which ...
		// mark "fils" (son) as #fils
		// if preceeded by possessive pronoun
		// if followed by "de", "du", "des"
		"(?<=^| )([MmTtSs](?:on|es)|[NnVv]o(?:tre|s)|leurs?) fils(?=[ ,\.]|$)" => "$1 #fils";
		"(?<=^| )[Ff]ils (d(?:es|[eu]))(?=[ ,\.]|$)" => "#fils $1";
		// fils (pl. fil) instead will be processed phoneticly by eSpeak
		
		// similar problem with: je sens vs le sens (sa~s by eSpeak)
		// the "easy" solution would be to transcribe all "sens" as "sa~" 
		// (which is a possible transcription for "le sens")
		// but in order to avoid confusions at reading it's better to keep the final s
		// therefore, mark all verbs as "#sens"
		"(?<=^| )([Jj]e|[Tt]u) sens(?=[ ,\.]|$)" => "$1 #sens";
		"(?<=^| )[Ss]ens-(tu)(?=[ ,\.]|$)" => "$1 #sens $1"; // inversion, eliminate -

		
		// french inversion with two pronouns (yes, that's a nice complication ... :)
		// do this before inversion with one pronoun
		"-([mts]|[nv]ous)['-](en|y)(?=[ ,\.]|$)" => " $1 $2"; // combinations m-en, vous'en possible (doesn't matter)
		"-(l[ea]|les)-([mt]oi|l(?:ui|eur)|[nv]ous)(?=[ ,\.]|$)" => " $1 $2";

		// and for the joy of everyone somebody has invented a special abbreviation for dois-je ... :~)
		"(?<=^| )([Dd]oi)s-(je)(?=[ ,\.]|$)" => "$1$2"; // transform it to "doije" and let eSpeak do the rest ..
		
		"(?<=^| )([Aa]vais)-(je)(?=[ ,\.]|$)" => "#$1$2"; // transform it to "#avaisje"
		"(?<=^| )([Aa]urais)-(je)(?=[ ,\.]|$)" => "#$1$2"; // transform it to "#auraisje"
		"(?<=^| )[Qq]uiconque(?=[ ,\.]|$)" => "#quiconque"; // transform it to "#avaisje"
	
		// and another one for serais-je ...
		"(?<=^| )([Ss]erai)s?-(je)(?=[ ,\.]|$)" => "$1$2"; // transform it to "seraije" and let eSpeak do the rest ..
		// and another one ... anyway: peux-je ... I'd prefer puis-je ...
		"(?<=^| )([Pp]eu|[Pp]ourrai)[sx]-(je)(?=[ ,\.]|$)" => "$1$2"; // transform it to "peuje" and let eSpeak do the rest ..	
		"(?<=^| )([Pp]ouvai)s-(je)(?=[ ,\.]|$)" => "#pouvaisje"; // inversion (special treatment)
		
		// some other nice invention: n'étais-je = no inversion (where's the logic anyway ... ;/)
		"([Eée]tais)-(je)" => "$1 $2"; // separate them

		// french inversion like va-t-elle are written va elle in shorthand
		// filter out "-t-" and - + pronom at the end of words
		"-t-" => " "; 
		// as-tu must be transcribed as #as 
		// because if isolate, eSpeak will pronounce it "as" (like the word "as" = ace) 
		"(?<=^| )[Qq]u'as-tu(?=[ ,\.]|$)" => "Qu'a tu";  // qu'as-tu bu (lazy solution ...)
		"(?<=^| )[Aa]s-tu(?=[ ,\.]|$)" => "#as tu";
		"([Aa]i|[Ss]ais)-(je)" => "$1=$2"; // protect ai-je against following rule
		"-(moi|toi|lui|leur|je|tu|ils?|elles?|on|nous|vous)" => " $1";
		"([Aa]i|[Ss]ais)=(je)" => "$1-$2"; // rewrite ai-je

		
		"(?<=^| )(?:É|E|é)tait-ce(?=[ ,\.]|$)" => "#etaitce";
		
		"(?<=^| )[Pp]arce qu'ils?(?=[ ,\.]|$)" => "#parcequil";
		"(?<=^| )[Pp]arce qu'elles?(?=[ ,\.]|$)" => "#parcequelle";
		"(?<=^| )[Pp]arce qu\'on(?=[ ,\.]|$)" => "#parcequon";
		"(?<=^| )[Pp]arce que(?=[ ,\.]|$)" => "#parceque";
		"(?<=^| )[Cc]e qu\'on(?=[ ,\.]|$)" => "#ce_quon";
		"(?<=^| )[Cc]e qu\'elles?(?=[ ,\.]|$)" => "#cequelle";
		"(?<=^| )[Cc]e qu\'ils(?=[ ,\.]|$)" => "#ce_quils";
		"(?<=^| )[Cc]e qu\'il(?=[ ,\.]|$)" => "#ce_quil";
		"(?<=^| )[Ee]st-ce qu\'on" => "#estcequon";
		"(?<=^| )[Qq]u\'est-ce qu'on" => "#questcequon";
		"(?<=^| )[Cc]e qui(?=[ ,\.]|$)" => "#ce_qui";
		"(?<=^| )[Cc]e qu\'a(?=[ ,.]|$)" => "#ce_qua ";
		"(?<=^| )[Cc]e qu(?:e|')" => "#ce_que ";
		
		// the problem with regexes like "(?<=^| )example(?= |$)" is that they don't apply to
		// words like (example), "example", example. etc.
		// to solve this, first add spaces (later filter them out again)
		"(\(|\[|\"|'|\?|!)([a-zA-Zàáâéèêïòôùû])" => "$1#># $2"; 
		"([a-zA-Zàáâéèêïòôùû])(\)|\]|\"|'|!|\?)" => "$1 #<#$2"; 
	
		// à is transcribed as "a accent grave" by eSpeak ...
		// filter out accent
		"(?<=^| )à(?= |$)" => "a";

		// mark all monosyllabic words with apostrophes
		"(?<=^| )([DdLlMmSsTtNn]) #<#'" => "#$1'";

		// special words
		// some abbreviated words have to be marked before phonetic transcriptions 
		// use # to inform analyzer that it should not be transcribed
		"(?<=^| )[Qq]uelques?(?=[ ,\.]|$)" => "#quelque";
		"(?<=^| )[Qq]uelqu'un?(?=[ ,\.]|$)" => "#quelquun";
		"(?<=^| )[Qq]uelques-uns?(?=[ ,\.]|$)" => "#quelquesuns";
		"(?<=^| )[Qq]uelques-unes?(?=[ ,\.]|$)" => "#quelquesunes";
		"(?<=^| )[Qq]uelconque(?=[ ,\.]|$)" => "#quelconque";
		"(?<=^| )[Qq]uelquefois(?=[ ,\.]|$)" => "#quelquefois";
		"(?<=^| )([Ll][ea]s?|[Dd]u|[Dd]es)?[Qq]uel(?:le)?|[Qq]u'elles?(?=[ ,\.]|$)" => "$1#quel";
		"(?<=^| )[Bb]ien-être(?=[ ,\.]|$)" => "#bienetre";
		"(?<=^| )[Tt]oujours(?=[ ,\.]|$)" => "#toujours";
		"(?<=^| )(?:I|i)ls(?=[ ,\.]|$)" => "#ils"; // diacritics 
		"(?<=^| )(?:I|i)l(?=[ ,\.]|$)" => "#il"; 
		"(?<=^| )[Ee]st-ce qu(?:e|')?" => "#estceque ";
		"(?<=^| )[Cc]e qu'ils?(?=[ ,\.]|$)" => "#cequil";	
		//"(?<=^| )[Cc]e qui(?<=[ ,\.]|$)" => "#ce_qui";
		//"(?<=^| )[Cc]e qu(e|')" => "#ce_que ";
		//"(?<=^| )[Cc]e qu\'a(?=[ ,\.]|$)" => "#ce_qua ";
		"(?<=^| )([Ll]e|[Uu]n) son(?= |,|\.|$)" => "$1_son";
		"(?<=^| )[Ss]ont?(?=[ ,\.]|$)" => " #son ";
		"(le|un)_son" => "$1 son";
		"(?<=^| )[Ss]ans(?=[ ,\.]|$)" => "#sans";
		"(?<=^| )[Dd]ans(?=[ ,\.]|$)" => "#dans";
		"(?<=^| )[Cc]omme(?=[ ,\.]|$)" => "#comme";
		"(?<=^| )[Tt]ous ([mtslc]es|[nv]os|leurs)(?=[ ,\.]|$)" => "#tout $1";
		"(?<=^| )[Cc]et(te)?(?=[ ,\.]|$)" => "#cet";
		"(?<=^| )[Pp]ar(?=[ ,\.]|$)" => "#par";
		"(?<=^| )[Ll]eurs?(?=[ ,\.]|$)" => "#leur";
		"(?<=^| )[Mm]onsieur(?=[ ,\.]|$)" => "#monsieur";
		"(?<=^| )M\.(?=[ ,\.]|$)" => "#monsieur";
		"(?<=^| )[Mm]essieurs(?=[ ,\.]|$)" => "#messieurs";
		"(?<=^| )MM\.(?=[ ,\.]|$)" => "#messieurs";
		"(?<=^| )[Ss]er(a[is]?|on[st]|ez|ai[st]|ions|iez|aient)(?= |$)" => "#ser$1";
		"(?<=^| )[Pp]lus(ieurs)?(?=[ ,\.]|$)" => "#plus$1";
		"(?<=^| )[Pp]lupart(?=[ ,\.]|$)" => "#plupart";
		"(?<=^| )[Ll]es(?=[ ,\.]|$)" => "#les";
		"(?<=^| )[Aa]v(ai[st]|ons|i?ez|aient|oir)(?=[ ,\.]|$)" => "#av$1"; // don't include avions! (has been marked earlier) => hm ... where ?!? => nous t'avions vu must be marked !
		//"([tl]')avions" => "l'#avions"; // nous l'avions vu => doesn't word => place it earlier!

		"(?<=^| )([CLSMTclsmt]es|[VNvn]os|[Ll]eurs) #avions(?=[ ,\.]|$)" => "$1 avions"; // don't mark it (delete mark again)
		//"(?<=^| )[Nn]\'y(?= |$)" => "#n'#y";
		"(?<=^| )[Yy](?=[ ,\.]|$)" => "#y";
		"(?<=^| )[Pp]ouvais-je(?=[ ,\.]|$)" => "#pouvaisje";
		"(?<=^| )[Pp]ouv(oir|ai[st]|i?ons|i?ez|aient)(?=[ ,\.]|$)" => "#pouv$1";
		"(?<=^| )[Bb]eaucoup(?=[ ,\.]|$)" => "#beaucoup";
		"(?<=^| )[Pp]our(?=[ ,\.]|$)" => "#pour";
		"(?<=^| )[Pp]ourr(ai[st]?|i?ons|i?ez|aient|as?|ont)(?=[ ,\.]|$)" => "#pourr$1";
		"(?<=^| )([Rr]e)?[Dd]oi[st](?=[ ,\.]|$)" => "$1#doit";		
		"(?<=^| )[Qq]uoi(?=[ ,\.]|$)" => "#quoi";		
		"(?<=^| )[Ss]oi([st]|ent)?(?=[ ,\.]|$)" => "#soit";		
		"(?<=^| )[Mm]ois?(?=[ ,\.]|$)" => "#moi";		
		"(?<=^| )[Ff]ois(?=[ ,\.-]|$)" => "#fois"; // fois vs foi (not written the same way!), add: cette fois-ci
		"(?<=^| )[Ff]ixions(?=[ ,\.]|$)" => "#fixions"; // fiction vs fixions (phoneticly indistinguishable)	
		"(?<=^| )[Ss]'ils?(?=[ ,\.]|$)" => "#sil";	
		"(?<=^| )d'il(?=[ ,\.]|$)" => "#dil";	
		"(?<=^| )[Qq]u'ils?(?=[ ,\.]|$)" => "#kil";	
		"(?<=^| )[Mm]oi-même(?=[ ,\.]|$)" => "#moimeme";	
		"(?<=^| )[Tt]oi-même(?=[ ,\.]|$)" => "#toimeme";	
		"(?<=^| )[Ss]oi-même(?=[ ,\.]|$)" => "#soimeme";	
		"(?<=^| )[Ee]ux-mêmes(?=[ ,\.]|$)" => "#euxmemes";	
		"(?<=^| )[Qq]uand même(?=[ ,\.]|$)" => "#quandmeme";	
		"(?<=^| )[Pp]eut-être(?=[ ,\.]|$)" => "#peutetre";	
		"(?<=^| )[Tt]outefois(?=[ ,\.]|$)" => "#toutefois";
		"(?<=^| )[Dd]ûment(?=[ ,\.]|$)" => "#dument";
		"(?<=^| )[Cc]eci(?=[ ,\.]|$)" => "#ceci";
		"(?<=^| )[Cc]eux-ci(?=[ ,\.]|$)" => "#ceuxci";
		"(?<=^| )[Ss]inon(?=[ ,\.]|$)" => "#sinon";
		"(?<=^| )[Mm]aintenant(?=[ ,\.]|$)" => "#maintenant";	
		"(?<=^| )[Ss]ui[st](?=[ ,\.]|$)" => "#suis";	
		"(?<=^| )[Ss]cies?(?=[ ,\.]|$)" => "#scie"; // treat separately: abbreviation has to be cancelled	
		"(?<=^| )[Rr]ats?(?=[ ,\.]|$)" => "#rat";	// idem
		"(?<=^| )[Ww]allons?(?=[ ,\.]|$)" => "#wallon";	// idem
		"(?<=^| )[Ff]aut(?=[ ,\.]|$)" => "#faut";
		"(?<=^| )[Tt]rop(?=[ ,\.]|$)" => "#trop";
		"(?<=^| )[Aa]vec(?=[ ,\.]|$)" => "#avec";
		"(?<=^| )Glaris(?=[ ,\.]|$)" => "#glaris";
		"(?<=^| )[Hh]être(?=[ ,\.]|$)" => "#hetre";
		"(?<=^| )[Mm]aître(?=[ ,\.]|$)" => "#maitre";
		//"(?<=^| )[Qq]u\'on(?=[ ,\.]|$)" => "#quon";
		"(?<=^| )([Ss])econd(es?)?(?=[ ,\.]|$)" => "$1cond$2";   // Second(es): correct phonetical transcription (the lazy way ...)

		"(?<=^| )[Vv]a-et-vient(?=[ ,\.]|$)" => "#vaetvient";
		
		"(?<=^| )[Ss]ix (#?[bdfjklmnpqrstvwxyz]|#?c[aou]|#?g[aou])" => "#six $1";	// six mois vs six avions
		"(?<=^| )[Hh]uit (#?[bdfjklmnpqrstvwxyz]|#?c[aou]|#?g[aou])" => "#huit $1";	// idem huit
		
		// wrong transcriptions
		// this is done in phonetics_transcriptor_list now (much better, no interference with original text)
		//"(?<=^| )([Ll])aid(?= |$)" => "#$1aid";	// eSpeak transcribes this as "lEd" instead of "lE"
		//"(?<=^| )([Aa])spect(?= |$)" => "#$1spect";
				
		// filter out inserted spaces
		"#># " => "";
		" #<#" => "";
		"#([DdLlMmSsTtNn])(?=#|')" => "$1"; // filter out # in monosyllabic words

		// do that only in stage 4, otherwhise n'#avais won't be transcribed correctly ...
		// wrong: must be done here - otherwhise in "n #<#'#># #avais", n will get transcribed as "en" ... 

		// regular treatment
		// composed words
		// eliminate - in composed words (vis-à-vis, pot-au-feu) in order to generate correct liaisons
		// problem: other words are written wrong, e.g. tire-ligne (wron rl combination)
		// so, limit the elimination to cases were there is a potential liaison, i.e. second word starts with vowel (including all accents - love french :):):)
		"(?<=^| )(.*?)-([aàâeéèêiïoôuû].*?)(?<= |$)" => "$1$2"; 

		
		
	#EndSubSection(global,#>stage1)
	#BeginSubSection(dasher,#>stage2)
		// "'" => ""; // filter out stress
		//" " => ""; // filter out spaces (e.g.: au-dessus: - generates space) => put it into postprocessing
	#EndSubSection(dasher,#>stage3)
	#BeginSubSection(splitter1,#>stage3)
		// check if word contains more then 1 upper case
		// mark it with #£# to have a branch condition
	#EndSubSection(splitter1,!>acronymator,=>packer)
	#BeginSubSection(acronymator)
		// empty
	#EndSubSection(acronymater)
	#BeginSubSection(packer)
		// empty
	#EndSubSection(packer)
	#BeginSubSection(earlybundler)
		// early shortener (before decapializer)
		"(?<!\[)S" => "[SCH]";
		"^Zysk" => "{JUSQUE}"; 
		"Zener" => "{GENERAL}";

		// like bundler but bundles tokens that become indistiguishable by decapitalizer
		"Z" => "[NG]";
		"\[NG\]@?l" => "[NGL]"; // according to [1] p. 15
		"Y" => "[Ö]";
	#EndSubSection(earlybundler)
	#BeginSubSection(decapitalizer)
		"(?<!#)w" => "#w"; // préserve original w
		"([A-Z])" => "strtolower()";
	#EndSubSection(decapitalizer)
	#BeginSubSection(accentizer)
		//empty
	#EndSubSection(accentizer)
	#BeginSubSection(normalizer)
		// distiguish between:
		// (1) fera: f@r => F[AR] (with appropriate distance)
		// (2) frein: fr => [F@R6]
		// don't know whether this is considered "correct" ... 
		// In my opinion, inserting a small distance in the case of @ (= e muet) makes "stenograms" more
		// readable.
		// ok, it's almost impossible to distinguish the two cases because of phonetical transcription.
		// espeak does it the following way:
		// - fera: f@ra => F[AR] and [F@R6] could be distinguished
		// - tomberai, donnera: to~mbre, donra => there's no @ (impossible to distinguish)
		// The strange thing is that in french there seems to be some space between F and combinend [AR]
		// (which is not the case in german!?)
		// Anyway ... the solution I consider reasonable is the following:
		// (1) espeaks transcribes an @ (f@ra) => insert a small distance between token + [AR] (F[AR])
		// (2) no @ (donra, tombrai) => use combined token without space ([N@R6], [B@R6] etc.)
		"s@?l" => "s[@L]"; // special case
		"rl@r" => "[RL][VR]"; // special case
		
		// as always the following rule is very strange ...
		// it applies to fera (f@ra) for example, but then in trembleront (tre~bl@ro~) it suddenly doesn't apply
		// (see CH5(19) p. 15 in the manuel)
		// as I always say: where's the logic anyway ... :)
		// solution: before applying @r => @[AR] transform bl@r to [bl][vr] in words where [AR] is not correct
		// same case: ornera
		// probably this occurs whenever @ is not there first syllable but stands inside (internal vowel)
		// if this is true, a more general rule could be written (and would be preferable) instead of
		// writing "exception rules" for each word ...
		"tstwrt(trembler)" => { "bl@r", "[BL][VR]" };
		"tstwrt(rner)" => { "rn@r", "[VR][NR]" }; // special: handle n@r as [NR] ?! verbs: retourner, orner
		"tstwrt(gler)" => { "gl@r", "[GL][VR]" }; // special: handle n@r as [NR] ?! verbs: retourner, orner

// experimentally replace the following line with a combination (might be completely wrong!)
// examples: tombera / réservera
	//	"([bflmnpv])@r" => "$1[AR]"; // use this for all tokens that finish with a round bow on the baseline
		"([bflmnpv])@r" => "$1r"; // use this for all tokens that finish with a round bow on the baseline
		
		"@o" => "[&E]o"; // e muet plus vowel
		// in all other cases, @ falls out and [VR] is used (?)
		
		// following rule: don't make fall out @ (e muet) in "importerons"
		// reason: is treated differently from "portrait"
		// group rt@r => [RT][VR]
		// (primary) group rtr => [RT][AR] (with additional distance correction [#6-])
		"^bj@n" => "{BIEN}"; // bien-aimé
		"^s@r" => "[S=][VR]"; // cerise
		"(?<!\[)@(?!#)" => { "", "^r@", "rt@r" }; // e muet falls out => all abbreviations with 1 syllable are automatically handled correctly: se, ce, me, ne, te etc.
		"(?<!#)y" => "[ü]";
		"^([sn])a$" => "[#NS]$1";
		"^([sn])o$" => "[#ND]$1";  // faux: f + vocal token 'o'
		"^([sn])u$" => "[#NDS]$1";
		"tstwrt(ni.+)" => { "^ni$", "[N=][-I]" }; // verb: nier (nie, nies, nions, niez, nient etc.)
		"^([sn])i$" => "[#NU]$1";
		"^([bdfgklmpqtvwxyz]|\[sch\])a$" => "[#NS]$1"; monosyllabic words consonant + a
		"^ra$" => "[#NS][AR]";
		"qu#" => "k#"; // qu'avez-vous => qu => before words marked with # in stage 0
	#EndSubSection(normalizer)
	#BeginSubSection(shortener)
	
		"^lin[Ee]ksp" => "l{IN}{EX}p"; // l'inexpérience

		"#fois\=ci" => "{FOIS}{SI}"; 

		"^in$" => "{IN}"; // in (standing alone)
		"#etaitce" => "{ETAITCE}"; // était-ce

		"#hetre" => "{HETRE}"; // hêtre
		"#maitre" => "{MAITRE}"; // maître
		"#avaisje" => "{AVAISJE}"; // avais-je
		"#auraisje" => "{AURAISJE}"; // aurais-je
		"#quiconque" => "{QUICONQUE}"; // quiconque

		"#quoiqu(il|elle)" => "{QUOIQUE}$1"; // quoiqu'il / elle
		"({QUOIQUE})elle" => "$1{ELLE}"; 
		"({QUOIQUE})il" => "$1{IL}";

		"#six" => "{SIX}"; // six "muet" (without x pronounced)
		"#huit" => "{HUIT}"; // six "muet" (without t pronounced)

		"#kg" => "{KG}"; // abbréviation
		"#cm" => "{CM}"; // abbréviation
		"#nr" => "{NR}"; // abbréviation
		"#ps" => "{PS}"; // abbréviation
		"#art" => "{ART}"; // abbréviation
		"#svp" => "{SVP}"; // abbréviation
		"#fev" => "{FEVR}"; // abbréviation
		"#nov" => "{NOV}"; // abbréviation
		
		"tstwrt(^[Cc]i-)" => { "^si", "{CI}" }; // ci-devant
		"^sjapre" => "{CI}apre"; // ci-après
		"^sj(an[Ee])" => "{CI}$1"; // ci-annexé 

		"([tl])#avions" => "$1{AV}{ION}"; // nous [lt]'avions vu 

		"tstwrt(^là=)" => { "^\[#NS\][Ll]", "{LA}" };
		"tstwrt(^bas=)" => { "^(?:ba|\[#NS\]b)$", "{BAS}" };
		"tstwrt(^ci=)" => { "^(?:si)", "{CI}" };
		"tstwrt(^au=)" => { "^(?:[oO])", "{AU=}" };

		"lorsk#il" => "{LORSQUIL}";
		"^odla$" => "O[DL]A"; // au-delà
		"^k[Ee]l$" => "{QUEL}";
		"^ekstra(?!k)" =>  "{EXTRA}"; // don't apply to: extraction
		"e~par(sj)" => "e~PA[VR]$1"; // impartial 
		"e~par" => "{IMPAR}"; // imparfait 
		"^([mtsl])?e~s\[ü\]r" => "$1{INSUR}";  // s'insurge, l'insurrection
		"^r[@eE][zs]\[ü\]r" => "{RESUR}"; // resurrection
		"^#toutefois$" => "{TOUTEFOIS}";
		"^#dument$" => "{DU}{MENT}";
		"^#parcequil$" => "{PARCEQUIL}";
		"^#parcequelle$" => "{PARCEQUELLE}";
		"#aujourdhui$" => "{AUJOURDHUI}";
		"^reeks" => "{RE}{EX}";
		"^ree~te?r" => "{RE}{INTER}";
		"^partik\[ü\]l" => "{PARTICUL}";
 		"^(d)?otr\[ü\]i$" => "$1{AUTRUI}";
		"tstwrt(^plus)" => { "^pl(y|\[ü\])$", "{PLUS}" }; // plus-value (stage 3 = ply alone, since eSpeak transforms it to ply|)
		"tstwrt(^[Ss]ans)" => { "^s[Aa]~$", "{SANS}" }; // sans-souci, sans-travail
		"^parf#?wa" => "{PAR}{FOIS}"; // parfois
		"tstwrt(^part$)" => { "par", "PA[VR]" }; // add ^ (otherwise it blocks plupart (bleeding))
 		"^par([ao]d|al|apl|iz|sje)" => "PA[VR]$1"; // parade, parodie, paradis; parallel; parapluie; parisien; partiel
		"^par(agr)" => "PA[VR]$1"; // paragraphe
		"^par(sel)" => "PA[VR]$1"; // parcelle
		"^par(\[sch\])" => "PA[VR]$1"; // parchemin
		"^parite$" => "PA[VR]{ITE}"; // parité
		"^par(#?wa)$" => "PA[VR]$1"; // paroi
		"^part(a\[(?:ng|NG)\])" => "PA[RT]$1"; // partager, partage
		"^part(@?ner)" => "PA[RT]$1"; // partenaire, partenariat

		"^par(?!l|ti|[Oo]l|[Ee]~?|[Aa]~|ke)" => { "{PAR}", "^pari$", "^park$", "^par(?:y|\[ü\])" }; // exceptions: partir (parti), parôle, paraître (paraît), pareil, parquet etc.
		"{PAR}tu$" => "{PAR}{TOUT}";


		// wrong transcriptions => write them manually here
		// done with phonetics_transcription_list now
		//"#[Ll]aid" => "[L][-E]";
		//"(l?)#[Aa]spect" => "$1[A][SP][-E]";
		
		"^si(d@?s(?:\[ü\]|[yu]))" => "{SI}$1";
		"^s[ji]((?:[Ee]~|\[[Ee]~\])kl(?:y|\[ü\]))" => "{SI}$1";
		"^s(?:@?l|\[@[lL]\])(y|\[ü\])i" => "{CELUI}";
		"^(d@?)d[Aa]~$" => "$1{DANS}";
		"^s@?r([Ee](?:[Zz]|\[(?:ng|NG)\]))$" => "{SER}$1";

		"#vaetvient" => "{VAETVIENT}";
		"#jusquaceque" => "{JUSQUACEQUE}";

		"#francs?" => "{FRANCS}";
		"#docteur" => "{DOCTEUR}";
		"#cie" => "{CIE}";
		"#co(?!m)" => "{CO}"; // comme!
		"#km" => "{KM}";
		"#etc" => "{ETC}";
		"#socanon" => "{SOCANON}";
		"#cad" => "{CAD}";
		"#parex" => "{PAR}{EX}";

		"#etes" => "[0N-]ET";
		"#as" => "a"; // verb: as (with inversion)
		"#sens" => "sa~"; // verb: je, tu sens
		"#fils" => "fis";
		"[Ss]#il" => "{SIL}";
		"[Dd]#il" => "{DIL}";
		"([Kk]|[Qq]u)#ils" => "{KIL}"; // don't use diacritics here
		"([Kk]|[Qq]u)#il" => "{KIL}";
		"puis{KIL}" => "P[Ü][&E][C][-E]"; // send it the direct way ...
		"#ils" => "{ILS}";
		"#il" => "{IL}";
		"#quon" => "{QUON}";
		"#parceque" => "{PARCEQUE}";
		"#parcequon" => "{PARCEQUON}";
		"#quelconque" => "{QUELCONQUE}";
		"#quelquefois" => "{QUELQUEFOIS}";
		
		"#pouvaisje" => "{POUVAISJE}";
		"#ce_que" => "{CEQUE}";
		"#ce_qua" => "{CEQUA}";
		"#ce_quon" => "{CEQUON}";
		"#ce_quon" => "{CEQUON}";
		"#ce_quils" => "{CEQUILS}";
		"#cequelle" => "{CEQUELLE}";
		"#ce_quil" => "{CEQUIL}";
		"#ce_qui" => "{CEQUI}";
		"#estcequon" => "{ESTCEQUON}";
		"#questcequon" => "{QUESTCEQUON}";
		"#estceque" => "{ESTCEQUE}";
		"#rat" => "{RAT}";
		"#wallon" => "[W@#.]alo~";
		"^no~$" => "{NON}";
		"#son" => "{SON}";
		"#sans" => "{SANS}";
		"#comme" => "{COMME}";
		"#scie" => "[S=@#/][-I]";
		"tstwrt((êtez|ettez|ait(?:é|e)e?[sz]?)$)" => { "ete$", "E[T]E" }; // arrêtez: no abbreviation!
		"(?<!su)(i|j?e)te$" => "{ITE}";   // not: souhaiter (according to Meyer, ch1.1)
		"#dans" => "{DANS}";
		"^d\[ü\]$" => "{DU}";
		"^tu$" => "{TOUT}";
		"#tout" => "{TOUT}";
		"^tus$" => "{TOUT}s";
		"^tut$" => "{TOUTE}";
		"^bje~" => "{BIEN}";
		"^p\[(Ö|ö)\]$" => "{PEU}";
		"^ki$" => "{QUI}";
		"#cet" => "{CET}";
		"^v(?:\[Ö\]|w)$" => "{VEUT}";
		"^vo$" => "{VOS}";
		"^vu$" => "{VOUS}";
		"^rie~$" => "{RIEN}";
		"#par" => "{PAR}";
		"^notr$" => "{NOTRE}";
		"^votr$" => "{VOTRE}";
		"^#leur$" => "{LEUR}";
		"^#monsieur$" => "{MONSIEUR}";
		"^#messieurs$" => "{MESSIEURS}";
		"^ko~tre$" => "[K]o~tre"; // contrée(s)
		"^ko~tra" => "{CONTRE}a"; // preposition and prefix 
		"^ko~tr" => "{CONTRE}"; 
		"tstwrt(^[Ll]ettre)" => { "^letr", "[L]etr" };  // lettre <=> l'être (avoid collusion) 
		"tstwrt(^[Mm]ettre)" => { "^metr", "[M]etr" };  // mettre <=> m'être (avoid collusion) - (maître is alread done) 
		"^([mnsldt])?etr$" => "$1{ETRE}";   // n'être, d'être, l'être etc.
		"#trop$" => "{TROP}";
		"^#ser(?:ai[st]?|ez|aient)?$" => "{SER}e";
		"^#seras?$" => "{SER}a";
		"^#seron[st]$" => "{SER}o~";
		"^#serions$" => "{SER}jo~";
		"^#seriez$" => "{SER}je";
		"^s\[ü\]rtu$" => "{SUR}{TOUT}";
		"^s\[ü\]reks" => "{SUR}{EX}";
		"^s\[ü\]rpl\[ü\]s?$" => "{SUR}{PLUS}";
		"^s\[ü\]r" => "{SUR}"; // alone and prefix
		"^#plus$" => "{PLUS}";
		"^pl\[ü\]to$" => "{PLUS}{TOT}";
		"^#plusieurs$" => "{PLUS}[ö]r";
		"^#plupart$" => "{PLUS}par";
		"tstwrt(^[Ll]ui(-|$))" => { "^l\[ü\]i$", "{LUI}" }; // only pronoun "lui", not verb "luire" (luit)
		"^#les$" => "{LES}";
		"#av(ai[st]|aient)" => "{AV}e";
		"tstwrt(^(?:n'?)?#avions$)" => { "^(n'?)?.*?$", "$1{AV}j[o~]" }; // should only be applied to verbs now
		"#avons" => "{AV}[o~]";
		"#aviez" => "{AV}je";
		"#avez" => "{AV}e";
		"#avoir" => "{AV}war";
		"j#y" => "[NG][-I]";
		"k#y$" => "[I][K]";
		"n#y$" => "[I][N=]";
		"s#y$" => "[I][S=]";
		"t#y$" => "[I][T]";
		"m#y$" => "[I][M]";
		"#y$" => "{#Y}";
		"^\[ü\]$" => "{EUT}";
		"^#pouvoir" => "{POUV}war";
		"^#pouv(ai[st]|aient)" => "{POUV}e";
		"^#pouv(ions)" => "{POUV}j[O~]";
		"^#pouv(iez)" => "{POUV}je";
		"^#pouv(ons)" => "{POUV}[O~]";
		"^#pouv(ez)" => "{POUV}e";
		"^#beaucoup$" => "{BCP}"; 
		"^([dl])?otr(@?m[Aa]~|@?f#?wa)?$" => "$1{AUTRE}$2";
		"^#pourr(ai[st]?|aient|ez)$" => "{POUR}e";
		"^#pourr(as?)$" => "{POUR}a";
		"^#pourron[st]" => "{POUR}[O~]";
		"^#pourrion[st]" => "{POUR}j[O~]";
		"^#pourriez" => "{POUR}je";
		"^#pour$" => "{POUR}";
		"^depur" => "de{POUR}"; // depourvu
		"^pur" => { "{POUR}", "puri" }; // aussi: pourvoir, don't apply to: pourrir (all forms)
		"#doit$" => "{DOIT}";
		"^#quoi$" => "{QUOI}";
		"^#soit$" => "{SOIT}";
		"^#moi$" => "{MOI}";
		"^#fois$" => "{FOIS}";
		"^a~tjalk" => "{ANTI}alk"; // antialcoolique
		"^a~t[ie]" => { "{ANTI}", "^A~tikite$", "^A~tEn$" };
		"sirk(?:[OoWw]~|ym|\[ü\]m)" => "{CIRCON}"; // o~: circon-, W~: cirum- + all sorts of transcriptions ...
		"tstwrt(qu\'on)" => { "^ko~$", "K[ON]" };
		"tstwrt(^[Cc]ompt)" => { "^ko~", "K[O~]" };
		"^k[Oo]~b[ij][Ee]~$" => "{CON}{BIEN}";
		"^pr[Oo]k[oO]~" => "{PRO}{CON}";
		"^(l)?[Aa]~k[Oo]~" => "$1[A~]K[O~]";
		"^k[Oo]~bl" => "[K]o~bl"; // comble (no abbréviation)
		"lako~pl" => "[L][A][K]o~pl"; // l'accomplissement (no abbréviation)
		"(?<!s|\[ü\])(dis|tra~[sz])?ko~" => { "$1{CON}", "^ko[nm]", "^kO~Ze$", "^rakO~", "kO~tw\'?ar", "^[Aa]k[Oo]~p",   "r[Aa]~k[Oo]~t" }; // original word is phonetic  transcription! (without stress! = ')
		"^ekse$" => "{EX}se"; // excès
		"^eks$" => "[0N-][E]ks"; // no abbreviation when "ex" stands alone (according to Meyer)
		"(?<=^r@|^r|^pre|^l|^d|^)e[kg][sz]" => "{EX}";
		"^\[ng\]e[kg][sz]" => "[NG]{EX}";  // j'exigerais
		"^(in|{IN})e[kg][sz]" => "$1{EX}";  // inexact

		"^s[Ee]ks(\[ü\]|y|$)" => "SEks$1"; // sex, sexuel etc.
		"(?<=^[mtsl])e[kg][sz](?!t)" => "{EX}";   // pronoms ... article ... et l'horreur commence ... :)
		
		"^(dez)e~te?r" => "$1{INTER}"; // désintéressement
		
		"(?<!t)e~ter(?!min)" => "{INTER}"; // not in: tintèrent, interminable
		"^e~tra~sm" => "e~{TRANS}m"; // intransmissible
		"^(l)?e~tr(?!uvabl)" => "$1{INTER}" };
		"^e~d\[ü\]$" => "[E~]d[ü]"; // no prefix in- in indû 
		"^linapt" => "l{IN}apt"; // l'inaptitude
		"^(?:in)(?!(?:j|$))" => { "{IN}", "[Ee]~si ?$" }; // why is original word with E uppercase?!? (see ExecuteRule())
		"s\[ü\]b" => "{SUB}";
		"tra~skr" => "{TRANS}skr"; // transcrire
		"tra~[sz]" => "{TRANS}";
		"([aeiou])?sj(o~)" => "$1{SION}"; // no diacritics
		"([aeiou])?sj(on)$" => "$1{SIONN}"; // diacritics
		"([aeiou])?zj(o~|on)$" => "$1{ZIONN}"; // diacritics
		"([aeiou])?sj(on)" => "$1{SION}"; // no diacritics
		"([aeiou])?zj(o~|on)" => "$1{ZION}"; // no diacritics
		
		"#fixions" => "fiks{ION}";

		// this is the new beauty of VSTENO: a hybrid rule!
		// checks written form in order to determine if ma~ comes form ment$ or mant$, mand$, end$
		// abbreviation {MENT} can only be applied to ment$
		"tstwrt((?:an[dt]|end)$)" => { "ma~$", "[M]{EM_FR}" };   
		
		// original rules
		//"(?<!^)m[Aa]~t" => "{MENT}"; // also inside word
		//"(?<!^)m[Aa]~(?!d)" => "{MENT}"; // don't apply to: commander
		"koma~sma~" => "KOMa~s{MENT}"; // special case: (re)commencement 
		"tstwrt(ment)" => { "(?<!^)m[Aa]~t", "{MENT}" }; // also inside word
		"tstwrt(ment)" => { "(?<!^)m[Aa]~(?!d)", "{MENT}" }; // don't apply to: commander
		
		"^#moimeme$" => "{MOIMEME}";
		"^#toimeme$" => "{TOIMEME}";
		"^#soimeme$" => "{SOIMEME}";
		"#euxmemes$" => "{EUXMEMES}";
		"^#quandmeme$" => "{QUANDMEME}";
		"^#peutetre$" => "{PEUTETRE}";
		"^#ceci$" => "{CECI}";
		"^#sinon$" => "{SINON}";
		"^#ceuxci$" => "{CEUXCI}";
		"#faut$" => "{FAUT}";
		"#glaris$" => "{GLARIS}";
		
		"^mem$" => "{MEME}";
		"#avec$" => "{AVEC}";
		"^a~kor$" => "{ENCORE}";
		"^pa~da~$" => "{PENDANT}";
		"^s@?pa~da~$" => "{CEPENDANT}";
		"^#sil$" => "{SIL}";
		"^#dil$" => "{DIL}";
		"^#quil$" => "{KIL}";
		"^#cequil$" => "{CEQUIL}";
		//"(?<!{)([ld][ea]s?|du)(#quels)?" => "{$1}$2"; // not a very clean rule ...
		"(?<!{)([ld][ea]s?|du)(#)(quels)?" => "{$1}$2$3"; // try to do better ...
		"#quels?$" => "{QUEL}";
		"^#quelque$" => "{QUELQUE}";
		"^#quelquun$" => "{QUELQUUN}";
		"^#quelquesuns$" => "{QUELQUESUNS}";
		"^#quelquesunes$" => "{QUELQUESUNES}";
		"tstwrt((?<!ren)forts?$)" => { "f[Oo]r$", "{FORT}" };  // infort => yes: in{FORT}, renfort => no: ra~for (WHERE IS THE LOGIC ANYWAY ... ;/)
		
		"^f[Oo]r(\[ng\]|n|m(?:y|\[ü\]|$))" => "[F][O][VR]$1";   // forger, forn- (..), formule
		"^(E~|e~)fort" => "$1{FORTE}"; // infortune
		"^fort" => "{FORTE}";
		"^for(?!s)" => { "{FORT}", "^f[Oo]rm(?:a|e|i)", "^f[Oo]ra", "^f[Oo]rf" }; // format, formattage, former, formidable, forage, forfait, forger, forge, forgeron
		"^sito$" => "{SI}{TOT}";
		//"i?to$" => { "{TOT}", "^f[Oo]t[Oo]", "^to$" };
		"tstwrt(tôt)" => { "i?to$", "{TOT}" }; // more precise rule for -tôt (bientôt, sitôt, aussitôt etc.)
		"#bienetre$" => "{BIENETRE}";
		"^okel$" => "{AUQUEL}";
		"^#maintenant$" => "{MAINTENANT}";
		"^lorsk@?" => "{LORSQUE}";
		"^{LORSQUE}il" => "{LORSQUE}{IL}";
		"^#suis$" => "{SUIS}";
		"#s#?wiss" => "{SUISSE}";
		"^s(\[ü\]|#?w)is" => "{SUISSE}";
		"^#toujours$" => "{TOUJOURS}";
		"^neseser" => "{NECESSAIRE}";
		"^(l)?\[?[Aa]~\]?a" => "$1{EN=}a"; // enhardir

		"[ji](?:[oO][nN]|\[[oO][nN]\])$" => "{ION1}"; // diacritics
		//"[ji](?:[oO][~nN]|\[[oO][~nN]\])" => "{ION}"; // include possible variants, wrong: lorgnon
		"(e\[sch\]a~ti)j(o~)" => "$1[H]$2"; // echantillons

		"^rej(?:o~$|on)" => "re[H]{ION}"; // rayon, rayonnement

		"tstwrt((?<!gn)o[nm])" => { "(?<!a)[ji](?:[oO][~nN]|\[[oO][~nN]\])", "{ION}" }; // include possible variants
		
		// recorrection
		"{MENT}r" => "{MENT}[VR]"; // where's the logic anyway ... :) :) :) (or - as I use to say - stenographs aren't linguists ... :o)
		"}\[@L\]" => "}l"; // normal l after prefix

		"pre{EX}" => "{PRE}{EX}"; // préexistence

	#EndSubSection(shortener,#>stage4)
	#BeginSubSection(phonetizer,#>stage4)
		
		// empty
	#EndSubSection(phonetizer)
	#BeginSubSection(preworder)
		// use | to separate words
		"^{LA}\|" => "{LA}\\";
		"^{BAS}\|" => "{BAS}\\";
		"^{CI}\|" => "{CI}\\";
		"^{AU=}\|" => "{AU=}\\";

	#EndSubSection(preworder)
	#BeginSubSection(specialtokensfilter)
		" #<#'#># " => ""; // n'#avais
		"#># " => "";
		" #<#" => "";
	#EndSubSection(specialtokensfilter)
	#BeginSubSection(bundler)

		// three characters
		"str" => "[STR]";
		"spl" => "[SPL]";
		"ktr" => "[CTR]";
		"skr" => "[SCR]";
		"skl" => "[SCL]";
		"ptr" => "[PTR]";
		"ltr" => "[LTR]";
		"vrt" => "[VRT]";
		"brt" => "[BR]T"; // bretelles
		"blr" => "[BL][VR]"; // Diablerets		

		"(?<!\[)a~" => "[A~]";
		"(?<!\[)o~" => "[O~]";
		"(?<!\[)(e|w)~" => { "[E~]", "sirkw~" }; // no distinction: dinde vs humble
		"(?<!\[)#?wa" => "[WA]";
		"(?<!\[)#?w\[E~\]$" => "[WE~]"; // moins vs lointain - what happens to # in #w?!?
		"(?<!\[)#?w\[E~\]" => "[&O][E~]"; // lointain
		"(?<!#)w" => "[Ö]";  // wa vs W (lower vs upper case) => if it leads to confusion here, put this rule inside early bundler
		// restore original #w
		"#wikend" => "[W@#.]ikend";
		"#w" => "w";
		"wi" => "ui"; // Louis, oui		

		"(?<!\[)pr(?!\])" => "[PR]"; // pr => [pr] before rt => [rt], ex: propr(e)té (e muet falls out => prt)
		"(?<!^)rtr" => "[RT][#6-][AR]"; // like spanish: artritis
		"(?<!^)rt" => "[RT]"; // not at beginning, rt => [rt] before tr => [tr], e.g. portrait
		
		"(?<!\[)vl(?!\])" => "[VL]";
		"(?<!\[)ks(?!\])" => "x";
		"(?<!\[)br(?!\])" => "[BR]";
		"(?<!\[)fr(?!\])" => "[FR]";
		"(?<!\[)lr(?!\])" => "[LR]";
		"(?<!\[)mr(?!\])" => "[MR]";
		"(?<!\[)nr(?!\])" => "[NR]";
		"(?<!\[)vr(?!\])" => "[#VR]"; // confusion with r == [VR]
		"(?<!\[)dr(?!\])" => "[DR]";
		"(?<!\[)gr(?!\])" => "[GR]";
		"(?<!\[)qr(?!\])" => "[QR]";
		"(?<!\[)tr(?!\])" => "[TR]";
		"(?<!\[)rl(?!\])" => { "[RL]", "^tirlir$" };
		"(?<!\[)kl(?!\])" => "[KL]";
		
		"(?<!\[)bl(?!\])" => "[BL]";
		"(?<!\[)fl(?!\])" => "[FL]";
		"(?<!\[)ll(?!\])" => "[LL]";
		"(?<!\[)ml(?!\])" => "[ML]";
		"(?<!\[)nl(?!\])" => "[NL]";
		"(?<!\[)pl(?!\])" => "[PL]";
		//"vr" => "[VR]"; // confusion with r == [VR]
		"(?<!\[)dl(?!\])" => "[DL]";
		"(?<!\[)gl(?!\])" => "[GL]";
		"(?<!\[)ql(?!\])" => "[QL]";
		"(?<!\[)tl(?!\])" => "[TL]";
		"(?<!\[)kr(?!\])" => "[KR]";
		
		"(?<!\[)(?:ks|x)t(?!\])" => "[XT]";
		"(?<!\[)sk(?!\])" => "[SK]";
		"\[SK\]r" => "[SKR]";
		"(?<!\[)kr(?!\])" => "[KR]";
		"(?<!\[)sp(?!\])" => "[SP]";
		"(?<!\[)st(?!\])" => "[ST]";
		"(?<!\[)pt(?!\])" => "[PT]";
		"(?<!\[)kt(?!\])" => "[CT]";
		"(?<!\[)ft(?!\])" => "[FT]";
		"(?<!\[)lt(?!\])" => "[LT]";
		"tstwrt((ni[eè]re?)$)" => { "nj([eE]r?)", "[N]I[&E]$1" };
		"tstwrt((nieux|nieuse)$)" => { "nj\[Ö\]", "[N]j[Ö]" };
		"tstwrt(niez$)" => { "nje$", "nie" }; // retourniez (avoid following rule, i.e. bundling gn)
		"njl" => "[NN@L]"; // Saignelégier
		"venj\[(?:A~|a~)\]" => "ve[N]i[A~]"; // inconvéniant 
		"n\^|nj" => "[GN]";
		"\[GN\]r" => "[GNR]";
		"\[sch\]l" => "[SCHL]";

		
	#EndSubSection(bundler,=:std)
	#BeginSubSection(relancer1)	
		// empty
	#EndSubSection(relancer1)
	#BeginSubSection(transcriptor)
		//"^(.*)$" => "strtolower()";
		"({.*?})" => "strtoupper()";

		"\[#VR\]" => "[W@R6]";

		// use to separate methods to detect beginning of words:
		// (1) based on "prefixes" (e.g. vice-)
		// (2) based on | (inserted where eSpeak inserts a space which - by itself - is the result of
		//     a - in the original word (e.g. vice-recteur => vis rektWr => vis|rectWr; tire-ligne => tir liGN => tir|lir
		"^(vis)r" => "$1[AR]"; // vice-recteur
		"(\|)r" => "$1[AR]"; // vice-rectur
		
		"^re{DOIT}" => "[AR]{DOIT}"; redoit

		"^r@?" => "[AR]";
		"{ZION}r" => "{ZION}[VR]";
		"ION}r" => "ION}[VR]";		// sélectionnera (maybe preceeding rule can be eliminated)
		"}r" => "}[AR]"; // p.ex.: subroger
		"sr" => "[S][AR]"; // Israël
		"r" => "[VR]";
		"kaze" => "ka[S@#.]e"; // distinguish: casser vs caser (diacritics)
		"faz" => "fa[S@#.]"; // face vs phase (diacritics)
		"zel" => "[S=@#.]el"; // sel vs zèle (diacritics)
		"z2" => "s"; // paysan
		"z" => "s";
		
		"\[BR\]" => "[B@R6]";
		"\[FR\]" => "[F@R6]";
		"\[LR\]" => "[L@R6]";
		"\[MR\]" => "[M@R6]";
		"\[NR\]" => "[N@R6]";
		"\[PR\]" => "[P@R6]";
		//"\[VR\]" => "[V@R6]"; // confusion with r == [VR]!
		"\[GNR\]" => "[NN@R6]";
		"\[SKR\]" => "[C@R]";
		"\[KR\]" => "[K@R]";

		"\[DR\]" => "[D@R]";
		"\[GR\]" => "[G@R]";
		"\[KR\]" => "[K@R]";
		"\[QR\]" => "[Q@R]";
		"\[TR\]" => "[T@R]";

		"\[RL\]" => "[VR@L]";

		"\[BL\]" => "[B@L]";
		"\[FL\]" => "[F@L]";
		"\[LL\]" => "[L@L]";
		"\[ML\]" => "[M@L]";
		"\[NL\]" => "[N@L]";
		"\[PL\]" => "[P@L]";
		//"vr\]" => "[VR]"; // confusion with r == [VR]
		"\[DL\]" => "[D@L3]";
		"\[GL\]" => "[G@L3]";
		"\[QL\]" => "[Q@L3]";
		"\[TL\]" => "[T@L3]";
		"\[NGL\]" => "[NG@L3]";
		"\[ngl\]" => "[NG@L3]"; // geler: comes from decapitalizer ...
		"\[KL\]" => "[K@L3]";

		"[Ii]\[SCHL\]" => "I[^SCH@L3]"; // special transcription: Michelin
		"\[SCHL\]" => "[SCH@L3]";
		
	

	#EndSubSection(transcriptor)
	#BeginSubSection(completor)
		// transform all to lower
		"^(.*)$" => "strtolower()"; 
		"({.*?})" => "strtoupper()"; 
		
		// necessary to do some separations here (normally work for separator)
		"\|({VOUS})$" => "\\$1"; // rendez-vous

		// -io
		"[ji]o$" => "I[&O]";

		// double vowels
		"(\[(?:Ö|ö)\])[Jj](\[[Aa]~\])" => "$1[H]$2"; // accueillant
		"ee" => "e[&E]e";
		"e(\[o~\])" => "e[&E]$1";
		"i(e|\[e~\]|\[ö\])" => "i[&E]$1"; 
		"tstwrt(hier$)" => {  "j(e\[vr\])", "i[&E]$1" }; // hier => _|jer
		"tstwrt(^vien)" => {  "j(\[e~\])", "i[&E]$1" }; // vient
		"ije(\[vr\])?$" => "i[H]e$1"; // scintillait, cordillère
		"(?<!\[ö\]|[AaEe]|a\]|u)j(e|\[e~\])" => { "I[&E]$1", "f(?:y|\[ü\])je" }; // Pierre; don't apply to: veuillez, payez, travaillez, mouillé; and: fuyez (fyje)
		"(?<!\[wa\]|i|[eE]|[aA]|u)j(a|\[a~\])" => "I[&E]$1"; // mariage; don't apply to: voyageur, brillamment, ayant, envoyé, faïence, bouillant
		"(?<!a|\[wa\])j(o|\[o~\])" => "I[&E]$1"; // curiosité, pas : voyons
		"e(\[?[aeiouü]\]?~?)" => "E[&E]$1";
		"i(\[?[aeiouü]\]?~?)" => "I[&E]$1";
		"a(\[?[aeiouü]\]?~?)" => "A[&A]$1";

		"(?<=m)j(\[o~\])" => "[ION]"; // camion vs voyons
		"j(on)" => "[ION@#/_]"; // l'espionne (diacritics)
		"\[ü\]({?i)" => "[ü][&E]$1";
		"\[ü\](\[?[eaouiü]~?\]?)" => "[Ü][&E]$1";

		"^\[?u\]?(\[?[eaoui]~?\]?)" => "[0N-][A][&U]$1";
		"\[?u\]?(\[?[eaoui]~?\]?)" => "[A][&U]$1";

		"\[?(?<!&)o\]?(\[?[eaoui]~?\]?)" => "[&O]$1";

		"\[ö\](\[?[eaouiü]~?\]?)" => "[E][&O]$1";

		"(a)i" => "$1[&A]i";
		"(e)i" => "$1[&E]i";
		"u([ae])" => "A[&U]$1";
		"o(e|\[ü\])" => "[&O]$1";

		// vowel + ité
		"\[ü\]{ITE}" => "[ü][&E]{ITE}";
		"\[?e\]?{ITE}" => "E[&E]{ITE}";

		// vowels at beginning of word
		"^e" => "[0N-]e";
		"^ae" => "[0N-]A[&A]e";
		"^a" => "[0N-]a";
		"^(\[a~\])" => "[0N-]$1";
		"^(\[ng\]\[wa\])j(\[ö\])" => "$1H$2"; // joyeux

		"^j\[ö\]$" => "[0N-][EI][&O]";  
		"^([Iij]\[&E\](?:e|\[ö\]))" => "[0N-]$1"; // hier => same for other words? => yes for ö; hiérarchie
		"^i" => "[0D-]i";
		"^o" => "[0N-]o";
		
		"(?<!\[wa\]|[ae])j(\[ö\])(?!$)" => "i[&E]$1"; // don't apply to: joyeux, aïeul, meilleur

		"^\[e~\]$" => "[0N-]E[-EI]"; // un (must be placed here)

		"^(\[ü\])(?=(\[&E\]))" => "[0N-]$1"; // huit
		"^(\[ü\])(?!\[(sch)\])" => "[0D-]$1"; // une
		"^(\[ü\])(?=\[(sch)\])" => "[0N-]$1";
		
		"^(\[ö\])$" => "[0N-]$1"; // no example in the book, but according to german should be correct 
		"^(\[ö\])(?!\[(sch)\])" => "[0D-]$1"; 
		"^(\[ö\])(?=\[(sch)\])" => "[0N-]$1";
		
		"^(\[o~\])" => "[0N-]$1";
		"^(\[e~\])(?!\[(sch)\])" => "[0D-]$1";
		"^(\[e~\])(?=\[(sch)\])" => "[0N-]$1";
		
		"^(\[wa\])" => "[0N-]$1";

		"^u" => "[0N-]u";
		"^\[&O]" => "[0N-][&O]";
		"^\[AI]" => "[0N-][AI]";

		// n, s at beginning of word
		"^(\[#n(?:[sdu]|ds)\])?s" => "$1[S=]";
		"^(\[#n(?:[sdu]|ds)\])?n" => "$1[N=]";

		// diptongs at end of the word
		"\[IA\]$" => "I[LES]";
		"\[IO\]$" => "[#W][-EI]";
		"\[UA\]$" => "[#WS][&U]";
		"\[UE\]$" => "[#WS][&A]"; // not clear whether this should be shadowed?! (probably yes)
		"\[AI\]$" => "[AI][LES]";
		
		
		// vowels at end of the words
		"jo$" => "I[&O]";
		"j\[ö\]$" => "[EI][&O]";
		"ju$" => "[AU][&U]";

		"e$" => "[-E]";
		"a$" => "[EN]"; // keep token names as in original (mother) system
	
		"\[a~\]$" => "{EM_FR}"; // mark as french "em"
		"i$" => "[-I]";
		"^qu({ESTCEQUE})" => "K$1";
		"u(\||{I|$)" => "A[&U]$1"; 	// write literally as vowel before abbréviation {ITE}
		"o{" => "[O]{";	// partial bleeding with following: commentent
		"o(\||{|$)" => "[&O]$1";	// beau-frère
		"\\\[&O\]" => "\\[0N-][#2-][&O]"; // là-haut
		"\[ö\]$" => "E[&O]";
		"\[wa\]$" => "[AUF]";

		"\[IE\]$" => "[IE][LES]";
		"^A" => "[0N-]A";
		
		"([Ee]|\[[Ee]\])\\" => "[-E]\\"; // rendez-vous

		
	#EndSubSection(completor)
	#BeginSubSection(separator)
		// separations
		"(\[[Aa]~\])\|s" => "$1\\[S=]"; // avant-scène
		"(\[[Aa]~\])\|" => "$1\\"; // grand'route
		"\\(i\[&[Ee]\])" => "\\[0N-]$1"; // avant-hier
		
		"dmi\|" => "DM[-I]\\"; // demi-jour
		"\[o~\]\|" => "[ON]\\"; // wagon-lits

		"(\[#ns\]l)\|([Oo]|\[&[oO]\])$" => "$1\\[0N-]$2"; // là-haut (vs l'eau)

		"\|(\[#(?:NU|nu)\])[Ss]$" => "\\$1[S=]"; // -ci
		"\|(\[#(?:NS|ns)\])[Ll]$" => "\\$1L"; // -la

		"\[(?:Ö|ö)\]\\" => "E[&O]\\"; // ceux-la (completor)

		"^(\[#(?:NS|ns)\][Ll])\|(\[#(?:NS|ns)\][Bb])$" => "$1\\$2"; // là-bas
		"^(\[0D-\]i?s)i\|(\[#(?:NS|ns)\][Bb])$" => "$1[-I]\\[#4]$2"; // (i)ci-bas

	#EndSubSection(separator)
	#BeginSubSection(rewriter)
		
		// rewrite bundled tokens
		"\[str\]" => "[ST@R]";
		"\[spl\]" => "[SP@L]";
		"\[ctr\]" => "[CK@R]";
		"\[scr\]" => "[C@R]";
		"\[scl\]" => "[C@L3]";
		"\[ptr\]" => "[PP@R6]";
		"\[ltr\]" => "[LT@R6]";
		"\[vrt\]" => "[W@R6]T";
		


		// assign french vowels to original german system
		"^(.*)$" => "strtolower()";
		"({.*?})" => "strtoupper()"; // prevent transformations inside {}
		
		"\[a~\]\\" => "[EM]\\";
		
		"\[a~\]" => "[Ä]";
		"\[o~\]$" => "[ON]";
		"\[o~\]" => "[Ö]";
		"\[e~\]$" => "E[-EI]";

		"\[e~\]" => "[EI]";
		"\[ü\]$" => "[&T]"; 
		"\[ü\]" => "[AU]"; 
		"\[ö\]" => "[EU]"; 
		
		"\[wa\]" => "[Ü]";
		
		//"(?<!\[)w" => "[W@#.]"; // vallon vs wallon (diacritics) => done with #wallon
		"(?<!\[)v" => "w";
		"\[sk\]" => "[C]";
		"\[gn\]" => "[NN]";
		"\[pt\]" => "[PP]";
		"\[ct\]" => "[CK]";
		"\[ft\]" => "[FF]";
		"\[rt\]" => "[RR]";
		"\[vl\]" => "[W@L]";
		
		"(\[?i\]?|\[(?:EI|AU)\])\[sch\]" => "$1[^sch]";
		
		"j(?!\])" => "H";

		"\[we~\]$" => "[&O]E[-EI]";
		"\[we~\]" => "[&O][E~]";

		"(k)\[auf\]$" => "$1[EN]";
		"^bi{CON}" => "bi[&E]{CON}";

		"^(\[#ns\]b)\|" => "$1\"; bas-relief
		
	#EndSubSection(rewriter)
	#BeginSubSection(substituter)
		// convert all abbreviations to upperspace
		"({.*?})" => "strtoupper()";

		"{FOIS}{SI}" => "[F][EN]\\I[S=]";

		"{ETAITCE}" => "[0N-][HEIT]\\[S=]";

		"^{HETRE}" => "[0N-]E[T@R]"; // hêtre
		"{HETRE}" => "E[T@R]"; // hêtre
	
		"{MAITRE}" => "[M]E[T@R]"; // maître
		"{QUICONQUE}" => "IKKÖK"; // quiconque
		
		"{AVAISJE}" => "A[LES]E[NG]"; // avais-je
		"^{AURAISJE}" => "[0N-]O[VR]E[NG]"; // aurais-je

		"{QUOIQUE}{IL}" => "KÜK\\I[IL]";
		"{QUOIQUE}{ELLE}" => "KÜKEL";

		"{SIX}" => "[S=@#/][/I]"; // six mois
		"{HUIT}" => "[0N-][AU][&E][/I]"; // huit mois
		
		// rewrite some special distances in french
		// use ###x to mark "fixed" spacing and replace it in finalizer
		"t{EM_FR}" => "t[###6][EM]"; 
		"\[(ng|sch)\]{EM_FR}" => "[$1][###0][EM]"; // jugeant
		"([bfpH]){EM_FR}" => "$1[###0][EM]"; // barbant, greffant
		"([kdgsx]){EM_FR}" => "$1[###2][EM]"; // vacant, excédent, extravagant
		"([mnlw]|\[[mnlw]\]){EM_FR}" => "$1[###0][EM]"; // amant, gênant
		"\[vr\]{EM_FR}" => "[vr][###4-][EM]"; 
		"{EM_FR}" => "[EM]"; // use standard (common) spacing for all others 
		"(\[vr@l\])(\[E[NM]\])" => "$1[O]$2"; // parlant

		"{KG}" => "KG"; // abbréviation kg
		"{CM}" => "CM"; // abbréviation kg
		"{NR}" => "[N=][&O]"; // abbréviation kg
		"{PS}" => "PS"; // abbréviation kg
		"{ART}" => "[0N-]A[RR]"; // abbréviation kg
		"{SVP}" => "[S=]WP"; // abbréviation kg
		"{FEVR}" => "FE[W@R6]"; // abbréviation kg
		"{NOV}" => "[N=]OW"; // abbréviation kg
		
		
		"{PRE}{EX}" => "[P@R6][E][LES][LES]"; // préeexistence
		"^{TOT}$" => "[O][T]"; 
		"{QUON}" => "K[ON]";
		"{AUTRUI}" => "[VOR][AU][LES][-I]";
		"{EXTRA}" => "[0N-]A[LES]";
		"{AUQUEL}" => "[0N-][&O][CH]";
		"{PARTICUL}" => "A[RR6]";
		"{NECESSAIRE}" => "[N=][VR]";
		"{TOUJOURS}" => "OTU[VR]";
		"{SUIS}" => "[S=][-I]";
		"{SUISSE}a\[&a\]i\[vr\]" => "[0U-][#0][SS]E[VR]";
		"{SUISSE}" => "[0U-][#0][SS]";
		"{LORSQUE}{IL}" => "OL\\I[ES]";
		"{LORSQUE}" => "OL";
		"{MAINTENANT}" => "[0U-][EM]";
		"{BIEN}{TOT}" => "B[#4-][TOT]";
		"^{INSUR}" => "[0D-][EI][_SOBRE]";
		"{INSUR}" => "[EI][_SOBRE]";		// s'insurge
		"^{IMPAR}" => "[0D-][EI][RÜCK]";
		"{IMPAR}" => "[EI][RÜCK]";
		"{RE}{EX}" => "[AR]E[&E][&E]";
		"{RE}{INTER}" => "[AR]E[&E][#3-]I[_INTER]";
		"{IL}" => "I[IL]"; // "I[EST]"; // use spanish "est"
		"{ILS}" => "I[IL@#/_]"; // use spanish "est" (diacritics)
		"{CEQUE}" => "C";
		"{CEQUA}" => "[#NS]C";
		"{CEQUI}" => "[#NU]C";
		"{CEQUON}" => "C[#N][ON]";
		"{ESTCEQUON}" => "[0N-]EC[ON]";
		"{QUESTCEQUON}" => "KEC[ON]";

		"{ESTCEQUE}" => "[0N-]EC";
		"{NON}" => "[#ND][0N-][ON]";
		"{SON}" => "[#ND][SEIN]";
		"{SANS}" => "[#NDS][SEIN]";
		"{COMME}" => "OK";
		"^{ITE}" => "[0N-][HEIT]"; // elimate $ for "était-ce"
		"{ITE}" => "[HEIT]";
		"\|d{DANS}" => "\DAD"; // là-dedans
		"{DANS}" => "AD";
		"{DU}" => "[AU]D";
		"{TOUT}" => "OT";
		"{TOUTE}" => "UT";
		"{BIEN}([AEIOUaeiou]|\[(?:Ö|Ü|Ä|AU|EU|EI)\])" => "B[&E]$1";
		"{BIEN}" => "B";
		"{PEU}" => "P";
		"{QUI}" => "IK";
		"{CET}" => "[ST]";
		"{VEUT}" => "W";
		"{VOS}" => "OW";
		"(\[[Nn]=\])\|?{MEME}" => "$1M"; // nous-mêmes
		"{VOUS}\|?{MEME}" => "UWM"; // vous-mêmes
		"{VOUS}" => "UW";
		"{RIEN}" => "[AR]";
		"{PAR}" => "A[AR]";
		"{NOTRE}" => "[N=@R6]";
		"{VOTRE}" => "[W@R6]";
		"{LEUR}" => "[L@R6]";
		"{MONSIEUR}" => "[M@R6]";
		"{MESSIEURS}" => "[M@R6]S";
		"{CONTRE}$" => "[CONTRE]"; // new token 
		"{CONTRE}" => "[BEI+AR]";
		"{ETRE}" => "[0N-][&T@R]";
		"{TROP}" => "O[T@R]";
		"{SER}" => "[SER]";
		"^{PLUS}" => "[PLUS]"; // test, if ok all following substitutions of {PLUS} at beginning of a word can be deleted
		"{SUR}{PLUS}" => "[SOBRE][AU][@L]";
		"{SUR}" => "[SOBRE]";
		//"{PLUS}(p)" => "[0N-][EN][#3-][@L][#3]$1"; // plus part: [0N-][#2][A][@L] isn't renderd correctly ?!? 
		"{PLUS}" => "[0N-][#2]A[@L]";
		"{LES}" => "[LES]";
		"{AV}" => "A[LES]";
		"{#Y}" => "I[LES]";
		"{EUT}" => "[AU][LES]";
		"{POUV}" => "A[&U]";
		"{BCP}" => "U[&U]";
		"{AUTRE}" => "[VOR]";
		"{POUR}" => "[UR]";
		"{DOIT}" => "D[EN]";
		"{QUOI}" => "K[EN]";
		"{SOIT}" => "[S=][EN]";
		"{MOI}" => "M[EN]";
		"{FOIS}" => "F[EN]";
		"^{ANTI}" => "[0N-][ANT]";
		"{CIRCON}" => "C";
		"{CON}" => "[BEI]";
		"{EX}" => "[LES]";
		"{IN}" => "[IN]";
		"(?<!^){INTER}" => "[I][INTER]";
		"{INTER}" => "[INTER]";
		"{SUB}" => "[&U]";
		"\[(?:EI|ei)\]{TRANS}" => "[EU][T@R]"; // intransmissible
		"{TRANS}" => "A[T@R]";
		"{SION}" => "[SS]";
		"{ION1}" => "[ION@#/_]";
		"{SIONN}" => "[SS@#/_]";
		"{ZIONN}" => "[SS@#.]";
		"{ZION}" => "[SS]";
		"{MENT}" => "[MPF]";
		"{MENT1}" => "[MPF@#/_]";
		"^{AVEC}" => "[0N-]G";
		"{AVEC}" => "G";
		"{ENCORE}" => "[0N-]ÄG";
		"{PENDANT}" => "[0N-]ÄD";
		"{CEPENDANT}" => "[S=]ÄD";
		"{SIL}" => "I[S=][-E]";
		"{DIL}" => "ID[-E]";
		"{KIL}" => "IK[-E]";
		"{CEQUILS}" => "IC[-E]"; // no distinction between ils / il for now
		"{CEQUIL}" => "IC[-E]";
		"{CEQUELLE}" => "ICEL";
		"{MOIMEME}" => "MÜM";
		"{TOIMEME}" => "TÜM";
		"{SOIMEME}" => "[S=]ÜM";
		"^{EUXMEMES}" => "[0D-][EU]M";
		"{EUXMEMES}" => "[EU]M";
		"{FAUT}" => "O[F]";
		"{GLARIS}" => "[G@L3]A[VR]IS";
		"{QUANDMEME}" => "KÄM";
		"{PEUTETRE}" => "P[&T@R]";
		"{TOUTEFOIS}" => "UTF[EN]";
		"{LUI}\|?{MEME}" => "[LUI]M";
		"{LUI}" => "[LUI]";
		//"{LUI}" => "[_LUI]"; // celui
		"{MEME}" => "[0N-]M";
		"{CECI}" => "[S=]\\I[#4-][S=]";
		"{SINON}" => "I[S=]\\[0D-][ON]";
		"{CEUXCI}" => "[S=][E][&O]\\I[#4-][S=]";
		"{PARCEQUIL}" => "[RÜCK]C\\I[#3-][ES]";
		"{PARCEQUELLE}" => "[RÜCK]CEL";
		"{JUSQUE}" => "[AU][NG]";
		"^{AUJOURDHUI}" => "[0N-]O[NG]";
		"{AUJOURDHUI}" => "O[NG]";
		"{GENERAL}" => "[NG][VR]";
		"{QUEL}" => "[CH]";
		"^{QUELQUE}$" => "[CH][00]"; // add 00 to finish underlength
		"{QUELQUUN}" => "[CH]E[-EI]"; 
		"{QUELQUESUNS}" => "[CH]SE[-EI]"; 
		"{QUELQUESUNES}" => "[CH]S[AU]N"; 
		"{FORT}" => "[FORT]"; 
		"^\[EI\]{FORTE}" => "[0N-][EI][FORT]"; // infortune
		
		"^{FORTE}$" => "[FORT][#4-][00]";
		"{FORTE}" => "[FORT]";
		"^{SI}" => "I[S=]";
 		"{TOT}" => "[TOT]";
		"{BIENETRE}" => "B[&T@R]";
		"(\[[Hh]\]){ION}" => "$1[ON]"; // rayon
		"{ION}" => "[ION]"; // not really necessary (just to be consistent)
		"{SIL}" => "I[S=][EST]";
		"{DIL}" => "I[D][EST]";
		"{KIL}" => "I[K][EST]";
		"{PARCEQUE}" => "A[AR]C";
		"{PARCEQUON}" => "A[AR]C[ON]";
		"{CELUI}" => "[S=][_LUI]";
		"{VAETVIENT}" => "AW\\[EST]\\WI[&E][EI][-EI]";
		"{JUSQUACEQUE}" => "[AU][NG][EN]\\[#4]C";
		"{LE}" => "L";
		"{LA}" => "AL";
		"{LES}" => "[LES]";
		"{DES}" => "DE";
		"{DU}" => "[AU]D";
		"{QUELCONQUE}" => "[CH][Ö]K";
		"{QUELQUEFOIS}" => "[CH]F[EN]";
		"{BAS}" => "AB";
		"{AU=}" => "[0N-][&O]";
		"{POUVAISJE}" => "A[&U]E[NG]";
		"{CI}" => "I[S=]";
		"^{EN=}" => "[0N-][EM]O[&E]"; // enhardir
		"{EN=}" => "[EM]O[&E]"; // enhardir
		"{PRO}" => "PR[&O]"; // proconsul
		"{RESUR}" => "[AR]E[_SOBRE]"; // resurrection
		"{LORSQUIL}[Ss]" => "OL\\[#2-][ILS]"; // "[IL@#/_][#9-[#9-][#9-]\\OL"; // due to a bug, this doesn't work: "OL\\[#2-][IL@#/_]"; 
		"{LORSQUIL}" => "OL\\[#2-][IL]"; 
		"{RAT}" => "A[AR@#/]";
		"{FRANCS}" => "[F@R6]";
		"{DOCTEUR}" => "[D@R]";
		"{CIE}" => "K[-I]";
		"{CO}" => "K[&O]";
		"{KM}" => "KM";
		"{ETC}" => "[0N-]ETS";
		"{SOCANON}" => "[S=]A[&A]";
		"{CAD}" => "[S=]A[&A]D";
		
		
			
	#EndSubSection(substituter)
	#BeginSubSection(relancer2)	
		// empty
	#EndSubSection(relancer2)
	#BeginSubSection(eliminator)
		// filter out unused linguistical markers
		"(?<!\[)-(?!\])" => "";
	#EndSubSection(eliminator)
	#BeginSubSection(jailor)
		// puts all tokens (including single ones) inside brackets []
		"(.*)" => "strtolower()";
		"(\[.*?\])" => "strtoupper()";
		"({.*?})" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
	#EndSubSection(jailor)
	
	#BeginSubSection(corrector)
		// correct incorrect stuff ... :)
		"\[VR@L\]\[-E\]" => "[VR@L][#3-]O[-E]";    // -e 0.5 too high
		"\[VR\]\[-I\]" => "[VR][-I1]"; // -i 0.5 too low 
	#EndSubSection(corrector)
	#BeginSubSection(prespacer)
		// at this point words are raw token sequences inside brackets
		// add spacing where necessary
		
		// convert all to lower
		"(.*)" => "strtolower()";

		// special cases
		"\[f\]\[ar\]" => "f[#2-][ar]";

		// filtering
		"\|" => ""; // filter out | to get correct spacing (case tire-ligne: | is used to separate r-l)
		// filter out all remaining e muet (@), necessary for the spacer to work correctly
		"\]@\[" => "][";
		
		// end prespacer
	#EndSubSection(prespacer)
	#BeginSubSection(spacer)
// statistics: these rules cover approximately 159120 token combinations.
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d1]$2$3"; // R1|C1: LK#V1:D1#RK (576)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d10]$2$3"; // R10|C5: LK#V2:D10#RP (1692)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d11]$2$3"; // R11|C6: LK#V1:D11#RPD (720)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d12]$2$3"; // R12|C6: LK#V2:D12#RPD (360)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d13]$2$3"; // R13|C7: LK#V1:D13#RPE (216)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d14]$2$3"; // R14|C7: LK#V2:D14#RPE (108)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d15]$2$3"; // R15|C8: LMA#V1:D15#RK (96)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d16]$2$3"; // R16|C8: LMA#V2:D16#RK (48)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d17]$2$3"; // R17|C9: LMA#V1:D17#RN (792)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d18]$2$3"; // R18|C9: LMA#V2:D18#RN (396)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d19]$2$3"; // R19|C10: LMA#V1:D19#RND (180)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d2]$2$3"; // R2|C1: LK#V2:D2#RK (288)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d20]$2$3"; // R20|C10: LMA#V2:D20#RND (90)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d21]$2$3"; // R21|C11: LMA#V1:D21#RNE (84)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d22]$2$3"; // R22|C11: LMA#V2:D22#RNE (42)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d23]$2$3"; // R23|C12: LMA#V1:D23#RP (564)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d24]$2$3"; // R24|C12: LMA#V2:D24#RP (282)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d25]$2$3"; // R25|C13: LMA#V1:D25#RPD (120)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d26]$2$3"; // R26|C13: LMA#V2:D26#RPD (60)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d27]$2$3"; // R27|C14: LMA#V1:D27#RPE (36)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d28]$2$3"; // R28|C14: LMA#V2:D28#RPE (18)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d29]$2$3"; // R29|C15: LN#V1:D29#RK (3264)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d3]$2$3"; // R3|C2: LK#V1:D3#RN (4752)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d30]$2$3"; // R30|C15: LN#V2:D30#RK (1632)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d31]$2$3"; // R31|C16: LN#V1:D31#RN (26928)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d32]$2$3"; // R32|C16: LN#V2:D32#RN (13464)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d33]$2$3"; // R33|C17: LN#V1:D33#RND (6120)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d34]$2$3"; // R34|C17: LN#V2:D34#RND (3060)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d35]$2$3"; // R35|C18: LN#V1:D35#RNE (2856)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d36]$2$3"; // R36|C18: LN#V2:D36#RNE (1428)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d37]$2$3"; // R37|C19: LN#V1:D37#RP (19176)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d38]$2$3"; // R38|C19: LN#V2:D38#RP (9588)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d39]$2$3"; // R39|C20: LN#V1:D39#RPD (4080)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d4]$2$3"; // R4|C2: LK#V2:D4#RN (2376)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d40]$2$3"; // R40|C20: LN#V2:D40#RPD (2040)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d41]$2$3"; // R41|C21: LN#V1:D41#RPE (1224)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|l@#\/|s\=@#\/|s@#\.|s\=@#\.|ss@#\.|w@#\.|t@#\/\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d42]$2$3"; // R42|C21: LN#V2:D42#RPE (612)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d43]$2$3"; // R43|C22: LP#V1:D43#RK (1504)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/)\])" => "$1[#d44]$2$3"; // R44|C22: LP#V2:D44#RK (752)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d45]$2$3"; // R45|C23: LP#V1:D45#RN (12408)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6|s@#\.|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d46]$2$3"; // R46|C23: LP#V2:D46#RN (6204)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d47]$2$3"; // R47|C24: LP#V1:D47#RND (2820)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d48]$2$3"; // R48|C24: LP#V2:D48#RND (1410)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d49]$2$3"; // R49|C25: LP#V1:D49#RNE (1316)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d5]$2$3"; // R5|C3: LK#V1:D5#RND (1080)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d50]$2$3"; // R50|C25: LP#V2:D50#RNE (658)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d51]$2$3"; // R51|C26: LP#V1:D51#RP (8836)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d52]$2$3"; // R52|C26: LP#V2:D52#RP (4418)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d53]$2$3"; // R53|C27: LP#V1:D53#RPD (1880)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d54]$2$3"; // R54|C27: LP#V2:D54#RPD (940)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d55]$2$3"; // R55|C28: LP#V1:D55#RPE (564)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|est@#\/_)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d56]$2$3"; // R56|C28: LP#V2:D56#RPE (282)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.)\])" => "$1[#d6]$2$3"; // R6|C3: LK#V2:D6#RND (540)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d7]$2$3"; // R7|C4: LK#V1:D7#RNE (504)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d8]$2$3"; // R8|C4: LK#V2:D8#RNE (252)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|ar@#\/)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|l@#\/|w@#\.)\])" => "$1[#d9]$2$3"; // R9|C5: LK#V1:D9#RP (3384)

	#EndSubSection(spacer)
	#BeginSubSection(postspacer)
		// begin postspacer
		// assign concrete values to distances
		"\[#d1\]" => "[#3]"; 
		"\[#d2\]" => "[#4]";
		"\[#d3\]" => "[#2]";
		"\[#d4\]" => "[#3]";
		"\[#d5\]" => "[#4]";
		"\[#d6\]" => "[#4]";
		"\[#d7\]" => "[#5]";
		"\[#d8\]" => "[#5]";
		"\[#d9\]" => "[#3]";
		"\[#d10\]" => "[#2]";
		"\[#d11\]" => "[#5]";
		"\[#d12\]" => "[#5]";
		"\[#d13\]" => "[#6]";
		"\[#d14\]" => "[#7]";
		"\[#d15\]" => "[#5]"; 
		"\[#d16\]" => "[#0]"; 
		"\[#d17\]" => "[#3]"; 
		"\[#d18\]" => "[#0]"; 
		"\[#d19\]" => "[#4]"; 
		"\[#d20\]" => "[#4]"; 
		"\[#d21\]" => "[#4]"; 
		"\[#d22\]" => "[#4]";
		"\[#d23\]" => "[#3]";
		"\[#d24\]" => "[#1]";
		"\[#d25\]" => "[#2]";
		"\[#d26\]" => "[#3]";
		"\[#d27\]" => "[#5]";
		"\[#d28\]" => "[#6]";
		"\[#d29\]" => "[#3]";
		"\[#d30\]" => "[#3]";
		"\[#d31\]" => "[#5]";
		"\[#d32\]" => "[#3]";
		"\[#d33\]" => "[#6]";
		"\[#d34\]" => "[#4]";	
		"\[#d35\]" => "[#0]";	
		"\[#d36\]" => "[#4]";	
		"\[#d37\]" => "[#4]";
		"\[#d38\]" => "[#4]";
		"\[#d39\]" => "[#3]";
		"\[#d40\]" => "[#3]";
		"\[#d41\]" => "[#3]";
		"\[#d42\]" => "[#3]";
		"\[#d43\]" => "[#3]";
		"\[#d44\]" => "[#4]";
		"\[#d45\]" => "[#4]";
		"\[#d46\]" => "[#3]";
		"\[#d47\]" => "[#5]";
		"\[#d48\]" => "[#4]";
		"\[#d49\]" => "[#5]";
		"\[#d50\]" => "[#5]";
		"\[#d51\]" => "[#7]";
		"\[#d52\]" => "[#4]";
		"\[#d53\]" => "[#4]";
		"\[#d55\]" => "[#5]";
		"\[#d56\]" => "[#6]";
	
		
		// special
		"(\[bei\])\[#n\](\[les\])" => "$1[#2-]$2"; // adjust for coexistencia
		"(\[rr\])(\[ar\])" => "$1[#9-]$2"; // adjust for rtr (artritis)
		"(\[in\])\[#5\]\[a\](\[p@r6\])" => "$1[A]$2"; // test
		"\[t\]\[#0\]\[a\]\[ck\]" => "[T][#5][A][CK]";
		"\[rr\]\[#3\]\[vr\]" => "[rr][#0][vr]";

		// corrections
		"\[in\]\[#0\]\[a\]\[pp\]" => "[in][#5][a][pp]";

		// assign 5 to the rest (standard value)
		//"\[#d..?\]" => "[#5]";
		
	#EndSubSection(postspacer)
	#BeginSubSection(frenchspacer)
		// include some specific spacings for french here
		// (in order to not increase rules in general GESSBAS)
		// (if useful they could be included in general spacer / postspacer)
		"(\[f\])\[#.\](\[o\]\[d@r\])" => "$1[#1]$2";
		"(\[t\])\[#.\](\[o\]\[x\])" => "$1[#7]$2";
		"(\[n\])\[#.\](\[o\]\[g@r\])" => "$1[#2-]$2"; // pornografie (should be integrated in GESSBAS!)
		"(\[s=\])\[#.\](\[vr\])" => "$1[#3]$2"; // cerise
		"(\[ur\])\[#.\](\[on\])" => "$1[#7-]$2"; // pourrons
		"(\[bei\+ar\])\[#.\](\[o\]\[vr\])" => "$1[#3-]$2"; // contrordre
		"(\[d\])\[#.\](\[a\]\[x\])" => "$1[#7]$2"; // d'accepter
		"(\[ant\])\[#.\](\[a\]\[l\])" => "$1[#0]$2"; // antialcoolique
		"(\[ant\])\[#.\](\[n\])" => "$1[#2-]$2"; // antianational (should be included in GESSBAS)
		"(\[rück\])\[#.\](\[f\])" => "$1[#0]$2"; // imparfait
		"(\[rück\])\[#.\](\[d\])" => "$1[#0]$2"; // impardonnable
		"(\[AR\^\])\[#.\](\[a\]\[t@r\])" => "$1[#1]$2"; // retransmission
		"(\[&e\])\[#.\](\[&e\])" => "$1[#2]$2"; // réexpédier
		"(\[&e\])\[#.\](\[p\])" => "$1[#3]$2"; // réexpédier
		"(\[bei\])\[#..?\](\[w\])" => "$1[#1]$2"; // biconvexe (probably not good in GESSBAS!?)
		"(\[ng\])\[#.\](\[a]\[&u\])" => "$1[#3]$2"; // bijoux
		"(\[s\])(\[@l\])" => "$1[#2]$2"; // chancelier (ugly! ... and mostly wrong ...)
		"(\[l\])\[#.\](\[i\]\[ff\])" => "$1[#7]$2";
		"(\[&e\])\[#.\](\[a\]\[k\])" => "$1[#1]$2"; // réaction
		"(\[d\])\[#.\](\[au\]\[p\])" => "$1[#6]$2"; // Dupuis
		"(\[t\])\[#.\](\[i\]\[mpf\])" => "$1[#6]$2"; // sentiments
		"(\[ar\])(\\)(\[a\]\[l\])" => "$1$2[#2]$3"; // par-là
		"(\[h\])\[#.\](\[on\])" => "$1[#1-]$2"; // rayon

	#EndSubSection(frenchspacer)
	#BeginSubSection(diacritics)
		"([a-z]|Ä|Ö|Ü)" => "strtolower()";
		

		"tstwrt(^[Dd]att)" => { "^(.*?)\[[Tt]\]", "$1[T@#/.]" };
		"tstwrt(^B)" => { "\[[Bb]\]", "[B@#_]" };
		"tstwrt(^R)" => { "\[(?:ar|AR])\]", "[AR@#_]" };
		"tstwrt(^b$)" => { "\[[Bb]\]", "[B@#/]" };
		"tstwrt(^[Ww])" => { "\[[Ww]\]", "[W@#.]" };
		"tstwrt(res$)" => { "\[(?:vr|VR)\]$", "[VR@#/_]" };
		"tstwrt(res$)" => { "\[VR10\]$", "[VR10@#/_]" };
		"tstwrt(aient$)" => { "\[(?:heit|HEIT)\]$", "[heit@#/_]" }; 
		"tstwrt(étés$)" => { "\[(?:heit|HEIT)\]$", "[heit@#/_]" }; 
		"tstwrt(ces$)" => { "\[[Ss]\]$", "[s@#/_]" }; 
		"tstwrt(tes$)" => { "\[[Tt]\]$", "[t@#/_]" }; 
		"tstwrt(^r$)" => { "\[(?:ar|AR)\]$", "[ar@#/]" };
		
		// complete words
		"tstwrt(^ânes?$)" => { "\[[Nn]\]$", "[n@#/]" };
		"tstwrt(^Andes$)" => { "\[[Dd]\]$", "[d@#/]" }; // book: writen in the middle of long a~ (VSTENO under d)
		"tstwrt(^[Ll]és(?!s))" => { "^(.*?)\[[Ss]\]", "$1[S@#.]" };
		"tstwrt(^[Pp]ois(?!s))" => { "^(.*?)\[[Ss]\]", "$1[S@#.]" };
		"tstwrt(^[Cc]ous(?![sc]))" => { "^(.*?)\[[Ss]\]", "$1[S@#.]" };
		"tstwrt(^[Ee]lles$)" => { "\[[Ll]\]$", "[L@#/_]" };

	#EndSubSection(diacritics)
	#BeginSubSection(finalizer)
		// convert all to upper case for final rendering [a-z]|ä|ö|ü
		"(^.*?$)" => "strtoupper()";
		"\[###([0123456789]-?)\]" => "[#$1]"; // replace fix spacing ##x with real distances
		//"ä" => "Ä";	// strtolower() works with umlaut, but strtoupper() doesn't ?!
		//"ö" => "Ö";
		//"ü" => "Ü"; 
	#EndSubSection(finalizer,=:prt)
#EndSection(rules)